
practica-5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003038  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  080031e8  080031e8  000131e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080032a8  080032a8  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  080032a8  080032a8  000132a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080032b0  080032b0  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080032b0  080032b0  000132b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080032b4  080032b4  000132b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  080032b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002006c  2**0
                  CONTENTS
 10 .bss          000001c4  2000006c  2000006c  0002006c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000230  20000230  0002006c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00008bad  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001bc1  00000000  00000000  00028c8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000007e8  00000000  00000000  0002a850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000005e9  00000000  00000000  0002b038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00025d8e  00000000  00000000  0002b621  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000cea3  00000000  00000000  000513af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e1aea  00000000  00000000  0005e252  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002280  00000000  00000000  0013fd3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006f  00000000  00000000  00141fbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080031d0 	.word	0x080031d0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000070 	.word	0x20000070
 80001ec:	080031d0 	.word	0x080031d0

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002b4:	f000 b970 	b.w	8000598 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9e08      	ldr	r6, [sp, #32]
 80002d6:	460d      	mov	r5, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	460f      	mov	r7, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14a      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4694      	mov	ip, r2
 80002e4:	d965      	bls.n	80003b2 <__udivmoddi4+0xe2>
 80002e6:	fab2 f382 	clz	r3, r2
 80002ea:	b143      	cbz	r3, 80002fe <__udivmoddi4+0x2e>
 80002ec:	fa02 fc03 	lsl.w	ip, r2, r3
 80002f0:	f1c3 0220 	rsb	r2, r3, #32
 80002f4:	409f      	lsls	r7, r3
 80002f6:	fa20 f202 	lsr.w	r2, r0, r2
 80002fa:	4317      	orrs	r7, r2
 80002fc:	409c      	lsls	r4, r3
 80002fe:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000302:	fa1f f58c 	uxth.w	r5, ip
 8000306:	fbb7 f1fe 	udiv	r1, r7, lr
 800030a:	0c22      	lsrs	r2, r4, #16
 800030c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000310:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000314:	fb01 f005 	mul.w	r0, r1, r5
 8000318:	4290      	cmp	r0, r2
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x62>
 800031c:	eb1c 0202 	adds.w	r2, ip, r2
 8000320:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000324:	f080 811c 	bcs.w	8000560 <__udivmoddi4+0x290>
 8000328:	4290      	cmp	r0, r2
 800032a:	f240 8119 	bls.w	8000560 <__udivmoddi4+0x290>
 800032e:	3902      	subs	r1, #2
 8000330:	4462      	add	r2, ip
 8000332:	1a12      	subs	r2, r2, r0
 8000334:	b2a4      	uxth	r4, r4
 8000336:	fbb2 f0fe 	udiv	r0, r2, lr
 800033a:	fb0e 2210 	mls	r2, lr, r0, r2
 800033e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000342:	fb00 f505 	mul.w	r5, r0, r5
 8000346:	42a5      	cmp	r5, r4
 8000348:	d90a      	bls.n	8000360 <__udivmoddi4+0x90>
 800034a:	eb1c 0404 	adds.w	r4, ip, r4
 800034e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000352:	f080 8107 	bcs.w	8000564 <__udivmoddi4+0x294>
 8000356:	42a5      	cmp	r5, r4
 8000358:	f240 8104 	bls.w	8000564 <__udivmoddi4+0x294>
 800035c:	4464      	add	r4, ip
 800035e:	3802      	subs	r0, #2
 8000360:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000364:	1b64      	subs	r4, r4, r5
 8000366:	2100      	movs	r1, #0
 8000368:	b11e      	cbz	r6, 8000372 <__udivmoddi4+0xa2>
 800036a:	40dc      	lsrs	r4, r3
 800036c:	2300      	movs	r3, #0
 800036e:	e9c6 4300 	strd	r4, r3, [r6]
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0xbc>
 800037a:	2e00      	cmp	r6, #0
 800037c:	f000 80ed 	beq.w	800055a <__udivmoddi4+0x28a>
 8000380:	2100      	movs	r1, #0
 8000382:	e9c6 0500 	strd	r0, r5, [r6]
 8000386:	4608      	mov	r0, r1
 8000388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038c:	fab3 f183 	clz	r1, r3
 8000390:	2900      	cmp	r1, #0
 8000392:	d149      	bne.n	8000428 <__udivmoddi4+0x158>
 8000394:	42ab      	cmp	r3, r5
 8000396:	d302      	bcc.n	800039e <__udivmoddi4+0xce>
 8000398:	4282      	cmp	r2, r0
 800039a:	f200 80f8 	bhi.w	800058e <__udivmoddi4+0x2be>
 800039e:	1a84      	subs	r4, r0, r2
 80003a0:	eb65 0203 	sbc.w	r2, r5, r3
 80003a4:	2001      	movs	r0, #1
 80003a6:	4617      	mov	r7, r2
 80003a8:	2e00      	cmp	r6, #0
 80003aa:	d0e2      	beq.n	8000372 <__udivmoddi4+0xa2>
 80003ac:	e9c6 4700 	strd	r4, r7, [r6]
 80003b0:	e7df      	b.n	8000372 <__udivmoddi4+0xa2>
 80003b2:	b902      	cbnz	r2, 80003b6 <__udivmoddi4+0xe6>
 80003b4:	deff      	udf	#255	; 0xff
 80003b6:	fab2 f382 	clz	r3, r2
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	f040 8090 	bne.w	80004e0 <__udivmoddi4+0x210>
 80003c0:	1a8a      	subs	r2, r1, r2
 80003c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003c6:	fa1f fe8c 	uxth.w	lr, ip
 80003ca:	2101      	movs	r1, #1
 80003cc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003d0:	fb07 2015 	mls	r0, r7, r5, r2
 80003d4:	0c22      	lsrs	r2, r4, #16
 80003d6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003da:	fb0e f005 	mul.w	r0, lr, r5
 80003de:	4290      	cmp	r0, r2
 80003e0:	d908      	bls.n	80003f4 <__udivmoddi4+0x124>
 80003e2:	eb1c 0202 	adds.w	r2, ip, r2
 80003e6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x122>
 80003ec:	4290      	cmp	r0, r2
 80003ee:	f200 80cb 	bhi.w	8000588 <__udivmoddi4+0x2b8>
 80003f2:	4645      	mov	r5, r8
 80003f4:	1a12      	subs	r2, r2, r0
 80003f6:	b2a4      	uxth	r4, r4
 80003f8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003fc:	fb07 2210 	mls	r2, r7, r0, r2
 8000400:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000404:	fb0e fe00 	mul.w	lr, lr, r0
 8000408:	45a6      	cmp	lr, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x14e>
 800040c:	eb1c 0404 	adds.w	r4, ip, r4
 8000410:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000414:	d202      	bcs.n	800041c <__udivmoddi4+0x14c>
 8000416:	45a6      	cmp	lr, r4
 8000418:	f200 80bb 	bhi.w	8000592 <__udivmoddi4+0x2c2>
 800041c:	4610      	mov	r0, r2
 800041e:	eba4 040e 	sub.w	r4, r4, lr
 8000422:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000426:	e79f      	b.n	8000368 <__udivmoddi4+0x98>
 8000428:	f1c1 0720 	rsb	r7, r1, #32
 800042c:	408b      	lsls	r3, r1
 800042e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000432:	ea4c 0c03 	orr.w	ip, ip, r3
 8000436:	fa05 f401 	lsl.w	r4, r5, r1
 800043a:	fa20 f307 	lsr.w	r3, r0, r7
 800043e:	40fd      	lsrs	r5, r7
 8000440:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000444:	4323      	orrs	r3, r4
 8000446:	fbb5 f8f9 	udiv	r8, r5, r9
 800044a:	fa1f fe8c 	uxth.w	lr, ip
 800044e:	fb09 5518 	mls	r5, r9, r8, r5
 8000452:	0c1c      	lsrs	r4, r3, #16
 8000454:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000458:	fb08 f50e 	mul.w	r5, r8, lr
 800045c:	42a5      	cmp	r5, r4
 800045e:	fa02 f201 	lsl.w	r2, r2, r1
 8000462:	fa00 f001 	lsl.w	r0, r0, r1
 8000466:	d90b      	bls.n	8000480 <__udivmoddi4+0x1b0>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000470:	f080 8088 	bcs.w	8000584 <__udivmoddi4+0x2b4>
 8000474:	42a5      	cmp	r5, r4
 8000476:	f240 8085 	bls.w	8000584 <__udivmoddi4+0x2b4>
 800047a:	f1a8 0802 	sub.w	r8, r8, #2
 800047e:	4464      	add	r4, ip
 8000480:	1b64      	subs	r4, r4, r5
 8000482:	b29d      	uxth	r5, r3
 8000484:	fbb4 f3f9 	udiv	r3, r4, r9
 8000488:	fb09 4413 	mls	r4, r9, r3, r4
 800048c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000490:	fb03 fe0e 	mul.w	lr, r3, lr
 8000494:	45a6      	cmp	lr, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x1da>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004a0:	d26c      	bcs.n	800057c <__udivmoddi4+0x2ac>
 80004a2:	45a6      	cmp	lr, r4
 80004a4:	d96a      	bls.n	800057c <__udivmoddi4+0x2ac>
 80004a6:	3b02      	subs	r3, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ae:	fba3 9502 	umull	r9, r5, r3, r2
 80004b2:	eba4 040e 	sub.w	r4, r4, lr
 80004b6:	42ac      	cmp	r4, r5
 80004b8:	46c8      	mov	r8, r9
 80004ba:	46ae      	mov	lr, r5
 80004bc:	d356      	bcc.n	800056c <__udivmoddi4+0x29c>
 80004be:	d053      	beq.n	8000568 <__udivmoddi4+0x298>
 80004c0:	b156      	cbz	r6, 80004d8 <__udivmoddi4+0x208>
 80004c2:	ebb0 0208 	subs.w	r2, r0, r8
 80004c6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ca:	fa04 f707 	lsl.w	r7, r4, r7
 80004ce:	40ca      	lsrs	r2, r1
 80004d0:	40cc      	lsrs	r4, r1
 80004d2:	4317      	orrs	r7, r2
 80004d4:	e9c6 7400 	strd	r7, r4, [r6]
 80004d8:	4618      	mov	r0, r3
 80004da:	2100      	movs	r1, #0
 80004dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004e0:	f1c3 0120 	rsb	r1, r3, #32
 80004e4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004e8:	fa20 f201 	lsr.w	r2, r0, r1
 80004ec:	fa25 f101 	lsr.w	r1, r5, r1
 80004f0:	409d      	lsls	r5, r3
 80004f2:	432a      	orrs	r2, r5
 80004f4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f8:	fa1f fe8c 	uxth.w	lr, ip
 80004fc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000500:	fb07 1510 	mls	r5, r7, r0, r1
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800050a:	fb00 f50e 	mul.w	r5, r0, lr
 800050e:	428d      	cmp	r5, r1
 8000510:	fa04 f403 	lsl.w	r4, r4, r3
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x258>
 8000516:	eb1c 0101 	adds.w	r1, ip, r1
 800051a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800051e:	d22f      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000520:	428d      	cmp	r5, r1
 8000522:	d92d      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000524:	3802      	subs	r0, #2
 8000526:	4461      	add	r1, ip
 8000528:	1b49      	subs	r1, r1, r5
 800052a:	b292      	uxth	r2, r2
 800052c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000530:	fb07 1115 	mls	r1, r7, r5, r1
 8000534:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000538:	fb05 f10e 	mul.w	r1, r5, lr
 800053c:	4291      	cmp	r1, r2
 800053e:	d908      	bls.n	8000552 <__udivmoddi4+0x282>
 8000540:	eb1c 0202 	adds.w	r2, ip, r2
 8000544:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000548:	d216      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 800054a:	4291      	cmp	r1, r2
 800054c:	d914      	bls.n	8000578 <__udivmoddi4+0x2a8>
 800054e:	3d02      	subs	r5, #2
 8000550:	4462      	add	r2, ip
 8000552:	1a52      	subs	r2, r2, r1
 8000554:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000558:	e738      	b.n	80003cc <__udivmoddi4+0xfc>
 800055a:	4631      	mov	r1, r6
 800055c:	4630      	mov	r0, r6
 800055e:	e708      	b.n	8000372 <__udivmoddi4+0xa2>
 8000560:	4639      	mov	r1, r7
 8000562:	e6e6      	b.n	8000332 <__udivmoddi4+0x62>
 8000564:	4610      	mov	r0, r2
 8000566:	e6fb      	b.n	8000360 <__udivmoddi4+0x90>
 8000568:	4548      	cmp	r0, r9
 800056a:	d2a9      	bcs.n	80004c0 <__udivmoddi4+0x1f0>
 800056c:	ebb9 0802 	subs.w	r8, r9, r2
 8000570:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000574:	3b01      	subs	r3, #1
 8000576:	e7a3      	b.n	80004c0 <__udivmoddi4+0x1f0>
 8000578:	4645      	mov	r5, r8
 800057a:	e7ea      	b.n	8000552 <__udivmoddi4+0x282>
 800057c:	462b      	mov	r3, r5
 800057e:	e794      	b.n	80004aa <__udivmoddi4+0x1da>
 8000580:	4640      	mov	r0, r8
 8000582:	e7d1      	b.n	8000528 <__udivmoddi4+0x258>
 8000584:	46d0      	mov	r8, sl
 8000586:	e77b      	b.n	8000480 <__udivmoddi4+0x1b0>
 8000588:	3d02      	subs	r5, #2
 800058a:	4462      	add	r2, ip
 800058c:	e732      	b.n	80003f4 <__udivmoddi4+0x124>
 800058e:	4608      	mov	r0, r1
 8000590:	e70a      	b.n	80003a8 <__udivmoddi4+0xd8>
 8000592:	4464      	add	r4, ip
 8000594:	3802      	subs	r0, #2
 8000596:	e742      	b.n	800041e <__udivmoddi4+0x14e>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <Error_Handler>:
static bool_t isButtonPressed;
static bool_t FSM_isInit = false;   // To check initialization first

static void Error_Handler(void);
static void Error_Handler(void)
{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0
	while (1)
 80005a0:	e7fe      	b.n	80005a0 <Error_Handler+0x4>
	...

080005a4 <debounceFSM_init>:
 * @brief   Initializes the debounce Finite State Machine (FSM) to its starting
 * 		    state. This function sets the internal state of the FSM to the 
 *          initial state, preparing it for operation and state tracking.
 */
void debounceFSM_init()
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
	actualState = BUTTON_UP;
 80005a8:	4b09      	ldr	r3, [pc, #36]	; (80005d0 <debounceFSM_init+0x2c>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	701a      	strb	r2, [r3, #0]
    isButtonPressed = false;
 80005ae:	4b09      	ldr	r3, [pc, #36]	; (80005d4 <debounceFSM_init+0x30>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	701a      	strb	r2, [r3, #0]
	BSP_PB_Init(BUTTON_USER, BUTTON_MODE_GPIO);
 80005b4:	2100      	movs	r1, #0
 80005b6:	2000      	movs	r0, #0
 80005b8:	f000 fa52 	bl	8000a60 <BSP_PB_Init>
    delayInit(&FSM_delay, DEBOUNCE_TIME);
 80005bc:	2128      	movs	r1, #40	; 0x28
 80005be:	4806      	ldr	r0, [pc, #24]	; (80005d8 <debounceFSM_init+0x34>)
 80005c0:	f000 f8a4 	bl	800070c <delayInit>
	
    FSM_isInit = true;  // All resources initialized. 
 80005c4:	4b05      	ldr	r3, [pc, #20]	; (80005dc <debounceFSM_init+0x38>)
 80005c6:	2201      	movs	r2, #1
 80005c8:	701a      	strb	r2, [r3, #0]
}
 80005ca:	bf00      	nop
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	20000094 	.word	0x20000094
 80005d4:	20000095 	.word	0x20000095
 80005d8:	20000088 	.word	0x20000088
 80005dc:	20000096 	.word	0x20000096

080005e0 <debounceFSM_update>:
 * 		    BUTTON_USER. This function reads the current state of BUTTON_USER 
 *          and adjusts the FSM to reflect any changes, ensuring that button 
 * 		    debouncing is handled properly.
 */
void debounceFSM_update()
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b084      	sub	sp, #16
 80005e4:	af00      	add	r7, sp, #0
    if (!FSM_isInit)
 80005e6:	4b3a      	ldr	r3, [pc, #232]	; (80006d0 <debounceFSM_update+0xf0>)
 80005e8:	781b      	ldrb	r3, [r3, #0]
 80005ea:	f083 0301 	eor.w	r3, r3, #1
 80005ee:	b2db      	uxtb	r3, r3
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <debounceFSM_update+0x18>
    {
        Error_Handler();
 80005f4:	f7ff ffd2 	bl	800059c <Error_Handler>
    }
    
	GPIO_PinState buttonState = BSP_PB_GetState(BUTTON_USER);
 80005f8:	2000      	movs	r0, #0
 80005fa:	f000 fa87 	bl	8000b0c <BSP_PB_GetState>
 80005fe:	4603      	mov	r3, r0
 8000600:	73fb      	strb	r3, [r7, #15]

	switch (actualState)
 8000602:	4b34      	ldr	r3, [pc, #208]	; (80006d4 <debounceFSM_update+0xf4>)
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	2b03      	cmp	r3, #3
 8000608:	d853      	bhi.n	80006b2 <debounceFSM_update+0xd2>
 800060a:	a201      	add	r2, pc, #4	; (adr r2, 8000610 <debounceFSM_update+0x30>)
 800060c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000610:	08000621 	.word	0x08000621
 8000614:	08000637 	.word	0x08000637
 8000618:	0800066d 	.word	0x0800066d
 800061c:	08000683 	.word	0x08000683
	{
	case BUTTON_UP:
		if(buttonState == GPIO_PIN_RESET)
 8000620:	7bfb      	ldrb	r3, [r7, #15]
 8000622:	2b00      	cmp	r3, #0
 8000624:	d148      	bne.n	80006b8 <debounceFSM_update+0xd8>
		{
			delayInit(&FSM_delay, DEBOUNCE_TIME);
 8000626:	2128      	movs	r1, #40	; 0x28
 8000628:	482b      	ldr	r0, [pc, #172]	; (80006d8 <debounceFSM_update+0xf8>)
 800062a:	f000 f86f 	bl	800070c <delayInit>
			actualState = BUTTON_FALLING;
 800062e:	4b29      	ldr	r3, [pc, #164]	; (80006d4 <debounceFSM_update+0xf4>)
 8000630:	2201      	movs	r2, #1
 8000632:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000634:	e040      	b.n	80006b8 <debounceFSM_update+0xd8>

	case BUTTON_FALLING:
		if (delayRead(&FSM_delay))
 8000636:	4828      	ldr	r0, [pc, #160]	; (80006d8 <debounceFSM_update+0xf8>)
 8000638:	f000 f87f 	bl	800073a <delayRead>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d03c      	beq.n	80006bc <debounceFSM_update+0xdc>
		{
			if (buttonState == GPIO_PIN_RESET)
 8000642:	7bfb      	ldrb	r3, [r7, #15]
 8000644:	2b00      	cmp	r3, #0
 8000646:	d139      	bne.n	80006bc <debounceFSM_update+0xdc>
			{
				isButtonPressed = true;
 8000648:	4b24      	ldr	r3, [pc, #144]	; (80006dc <debounceFSM_update+0xfc>)
 800064a:	2201      	movs	r2, #1
 800064c:	701a      	strb	r2, [r3, #0]
				actualState = BUTTON_DOWN;
 800064e:	4b21      	ldr	r3, [pc, #132]	; (80006d4 <debounceFSM_update+0xf4>)
 8000650:	2202      	movs	r2, #2
 8000652:	701a      	strb	r2, [r3, #0]
				const char *msg = "FLANCO DESCENDENTE\n\r";
 8000654:	4b22      	ldr	r3, [pc, #136]	; (80006e0 <debounceFSM_update+0x100>)
 8000656:	607b      	str	r3, [r7, #4]
				uartSendStringSize((uint8_t *)msg, strlen(msg));
 8000658:	6878      	ldr	r0, [r7, #4]
 800065a:	f7ff fdc9 	bl	80001f0 <strlen>
 800065e:	4603      	mov	r3, r0
 8000660:	b29b      	uxth	r3, r3
 8000662:	4619      	mov	r1, r3
 8000664:	6878      	ldr	r0, [r7, #4]
 8000666:	f000 f8e1 	bl	800082c <uartSendStringSize>
			}
		}
		break;
 800066a:	e027      	b.n	80006bc <debounceFSM_update+0xdc>

	case BUTTON_DOWN:
		if(buttonState == GPIO_PIN_SET)
 800066c:	7bfb      	ldrb	r3, [r7, #15]
 800066e:	2b01      	cmp	r3, #1
 8000670:	d126      	bne.n	80006c0 <debounceFSM_update+0xe0>
		{
			delayInit(&FSM_delay, DEBOUNCE_TIME);
 8000672:	2128      	movs	r1, #40	; 0x28
 8000674:	4818      	ldr	r0, [pc, #96]	; (80006d8 <debounceFSM_update+0xf8>)
 8000676:	f000 f849 	bl	800070c <delayInit>
			actualState = BUTTON_RAISING;
 800067a:	4b16      	ldr	r3, [pc, #88]	; (80006d4 <debounceFSM_update+0xf4>)
 800067c:	2203      	movs	r2, #3
 800067e:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000680:	e01e      	b.n	80006c0 <debounceFSM_update+0xe0>

	case BUTTON_RAISING:
		if (delayRead(&FSM_delay))
 8000682:	4815      	ldr	r0, [pc, #84]	; (80006d8 <debounceFSM_update+0xf8>)
 8000684:	f000 f859 	bl	800073a <delayRead>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d01a      	beq.n	80006c4 <debounceFSM_update+0xe4>
		{
			if (buttonState == GPIO_PIN_SET)
 800068e:	7bfb      	ldrb	r3, [r7, #15]
 8000690:	2b01      	cmp	r3, #1
 8000692:	d117      	bne.n	80006c4 <debounceFSM_update+0xe4>
			{
				actualState = BUTTON_UP;
 8000694:	4b0f      	ldr	r3, [pc, #60]	; (80006d4 <debounceFSM_update+0xf4>)
 8000696:	2200      	movs	r2, #0
 8000698:	701a      	strb	r2, [r3, #0]
				const char *msg = "FLANCO ASCENDENTE\n\r";
 800069a:	4b12      	ldr	r3, [pc, #72]	; (80006e4 <debounceFSM_update+0x104>)
 800069c:	60bb      	str	r3, [r7, #8]
				uartSendStringSize((uint8_t *)msg, strlen(msg));
 800069e:	68b8      	ldr	r0, [r7, #8]
 80006a0:	f7ff fda6 	bl	80001f0 <strlen>
 80006a4:	4603      	mov	r3, r0
 80006a6:	b29b      	uxth	r3, r3
 80006a8:	4619      	mov	r1, r3
 80006aa:	68b8      	ldr	r0, [r7, #8]
 80006ac:	f000 f8be 	bl	800082c <uartSendStringSize>
			}
		}
		break;
 80006b0:	e008      	b.n	80006c4 <debounceFSM_update+0xe4>

	default:
	    debounceFSM_init();
 80006b2:	f7ff ff77 	bl	80005a4 <debounceFSM_init>
		break;
 80006b6:	e006      	b.n	80006c6 <debounceFSM_update+0xe6>
		break;
 80006b8:	bf00      	nop
 80006ba:	e004      	b.n	80006c6 <debounceFSM_update+0xe6>
		break;
 80006bc:	bf00      	nop
 80006be:	e002      	b.n	80006c6 <debounceFSM_update+0xe6>
		break;
 80006c0:	bf00      	nop
 80006c2:	e000      	b.n	80006c6 <debounceFSM_update+0xe6>
		break;
 80006c4:	bf00      	nop
	}
}
 80006c6:	bf00      	nop
 80006c8:	3710      	adds	r7, #16
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	20000096 	.word	0x20000096
 80006d4:	20000094 	.word	0x20000094
 80006d8:	20000088 	.word	0x20000088
 80006dc:	20000095 	.word	0x20000095
 80006e0:	080031e8 	.word	0x080031e8
 80006e4:	08003200 	.word	0x08003200

080006e8 <readKey>:
 *          outputs a boolean value: true or false.
 * @return  bool_t Returns true if the key has been pressed since the last time
 *          it was checked. Otherwise, returns false.
 */
bool_t readKey()
{
 80006e8:	b480      	push	{r7}
 80006ea:	b083      	sub	sp, #12
 80006ec:	af00      	add	r7, sp, #0
    bool_t _ret = isButtonPressed;
 80006ee:	4b06      	ldr	r3, [pc, #24]	; (8000708 <readKey+0x20>)
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	71fb      	strb	r3, [r7, #7]
    isButtonPressed = false;
 80006f4:	4b04      	ldr	r3, [pc, #16]	; (8000708 <readKey+0x20>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	701a      	strb	r2, [r3, #0]
    return _ret;
 80006fa:	79fb      	ldrb	r3, [r7, #7]
}
 80006fc:	4618      	mov	r0, r3
 80006fe:	370c      	adds	r7, #12
 8000700:	46bd      	mov	sp, r7
 8000702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000706:	4770      	bx	lr
 8000708:	20000095 	.word	0x20000095

0800070c <delayInit>:
 * @param duration Delay duration in ticks. This duration determines the time 
 * that must elapse before the Delay instance is considered
 * complete or expired, once it has been started.
 */
void delayInit(delay_t *delay, tick_t duration)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
 8000714:	6039      	str	r1, [r7, #0]
   if (delay == NULL || duration == 0U) // Fault check
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	2b00      	cmp	r3, #0
 800071a:	d002      	beq.n	8000722 <delayInit+0x16>
 800071c:	683b      	ldr	r3, [r7, #0]
 800071e:	2b00      	cmp	r3, #0
 8000720:	d101      	bne.n	8000726 <delayInit+0x1a>
   {
      Error_Handler();
 8000722:	f000 f835 	bl	8000790 <Error_Handler>
   }

   delay->duration = duration;
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	683a      	ldr	r2, [r7, #0]
 800072a:	605a      	str	r2, [r3, #4]
   delay->running  = false;
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	2200      	movs	r2, #0
 8000730:	721a      	strb	r2, [r3, #8]
}
 8000732:	bf00      	nop
 8000734:	3708      	adds	r7, #8
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}

0800073a <delayRead>:
 * @return Returns true if the delay duration has elapsed (time is up), 
 * indicating that the delay period is complete. Returns false if the delay is 
 * still running (time has not yet fully elapsed).
 */
bool_t delayRead(delay_t *delay)
{
 800073a:	b580      	push	{r7, lr}
 800073c:	b084      	sub	sp, #16
 800073e:	af00      	add	r7, sp, #0
 8000740:	6078      	str	r0, [r7, #4]
   bool_t _ret = false;
 8000742:	2300      	movs	r3, #0
 8000744:	73fb      	strb	r3, [r7, #15]

   if (delay == NULL) // Fault check
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	2b00      	cmp	r3, #0
 800074a:	d101      	bne.n	8000750 <delayRead+0x16>
   {
      Error_Handler();
 800074c:	f000 f820 	bl	8000790 <Error_Handler>
   }

   tick_t currentTime = HAL_GetTick();
 8000750:	f000 faec 	bl	8000d2c <HAL_GetTick>
 8000754:	60b8      	str	r0, [r7, #8]

   if (delay->running)
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	7a1b      	ldrb	r3, [r3, #8]
 800075a:	2b00      	cmp	r3, #0
 800075c:	d00d      	beq.n	800077a <delayRead+0x40>
   {
      if (currentTime - delay->startTime >= delay->duration)
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	68ba      	ldr	r2, [r7, #8]
 8000764:	1ad2      	subs	r2, r2, r3
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	685b      	ldr	r3, [r3, #4]
 800076a:	429a      	cmp	r2, r3
 800076c:	d30b      	bcc.n	8000786 <delayRead+0x4c>
      {
         delay->running = false;
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	2200      	movs	r2, #0
 8000772:	721a      	strb	r2, [r3, #8]
         _ret = true;
 8000774:	2301      	movs	r3, #1
 8000776:	73fb      	strb	r3, [r7, #15]
 8000778:	e005      	b.n	8000786 <delayRead+0x4c>
      }      
   }
   else
   {
      delay->startTime = currentTime;
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	68ba      	ldr	r2, [r7, #8]
 800077e:	601a      	str	r2, [r3, #0]
      delay->running   = true;
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	2201      	movs	r2, #1
 8000784:	721a      	strb	r2, [r3, #8]
   }

   return _ret;         
 8000786:	7bfb      	ldrb	r3, [r7, #15]
}
 8000788:	4618      	mov	r0, r3
 800078a:	3710      	adds	r7, #16
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}

08000790 <Error_Handler>:
 * @brief Error handler function.
 *
 * This function is called when an unrecoverable error occurs.
 */
static void Error_Handler(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
	while (1)
 8000794:	e7fe      	b.n	8000794 <Error_Handler+0x4>
	...

08000798 <uartInit>:
 * rate, parity, stop bits, etc., and checks if initialization is successful.
 *
 * @return bool_t True if initialization was successful, otherwise false.
 */
bool_t uartInit()
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b08e      	sub	sp, #56	; 0x38
 800079c:	af00      	add	r7, sp, #0
    bool_t _ret = false;
 800079e:	2300      	movs	r3, #0
 80007a0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    huart_.Instance          = UART_INSTANCE;
 80007a4:	4b1c      	ldr	r3, [pc, #112]	; (8000818 <uartInit+0x80>)
 80007a6:	4a1d      	ldr	r2, [pc, #116]	; (800081c <uartInit+0x84>)
 80007a8:	601a      	str	r2, [r3, #0]
    huart_.Init.BaudRate     = UART_BAUDRATE;
 80007aa:	4b1b      	ldr	r3, [pc, #108]	; (8000818 <uartInit+0x80>)
 80007ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007b0:	605a      	str	r2, [r3, #4]
    huart_.Init.Parity       = UART_PARITY_NONE;    
 80007b2:	4b19      	ldr	r3, [pc, #100]	; (8000818 <uartInit+0x80>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	611a      	str	r2, [r3, #16]
    huart_.Init.StopBits     = UART_STOPBITS_1;     
 80007b8:	4b17      	ldr	r3, [pc, #92]	; (8000818 <uartInit+0x80>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	60da      	str	r2, [r3, #12]
    huart_.Init.WordLength   = UART_WORDLENGTH_8B;  
 80007be:	4b16      	ldr	r3, [pc, #88]	; (8000818 <uartInit+0x80>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	609a      	str	r2, [r3, #8]
    huart_.Init.Mode         = UART_MODE_TX_RX;     
 80007c4:	4b14      	ldr	r3, [pc, #80]	; (8000818 <uartInit+0x80>)
 80007c6:	220c      	movs	r2, #12
 80007c8:	615a      	str	r2, [r3, #20]
    huart_.Init.HwFlowCtl    = UART_HWCONTROL_NONE; 
 80007ca:	4b13      	ldr	r3, [pc, #76]	; (8000818 <uartInit+0x80>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	619a      	str	r2, [r3, #24]
    huart_.Init.OverSampling = UART_OVERSAMPLING_16;
 80007d0:	4b11      	ldr	r3, [pc, #68]	; (8000818 <uartInit+0x80>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	61da      	str	r2, [r3, #28]
    // HAL_UART_MspInit(&huart1);

    if(HAL_UART_Init(&huart_) == HAL_OK)
 80007d6:	4810      	ldr	r0, [pc, #64]	; (8000818 <uartInit+0x80>)
 80007d8:	f001 fb24 	bl	8001e24 <HAL_UART_Init>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d113      	bne.n	800080a <uartInit+0x72>
    {
        isInit = true;
 80007e2:	4b0f      	ldr	r3, [pc, #60]	; (8000820 <uartInit+0x88>)
 80007e4:	2201      	movs	r2, #1
 80007e6:	701a      	strb	r2, [r3, #0]
        _ret = true;
 80007e8:	2301      	movs	r3, #1
 80007ea:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

        uartSendString((uint8_t *)"UART configuration: 8N1\n\r");
 80007ee:	480d      	ldr	r0, [pc, #52]	; (8000824 <uartInit+0x8c>)
 80007f0:	f000 f844 	bl	800087c <uartSendString>
        
        char _buffer[PRINT_BUFFER_SIZE];
        snprintf(_buffer, sizeof(_buffer), "UART baudrate:      %lu\n\r",
 80007f4:	4b08      	ldr	r3, [pc, #32]	; (8000818 <uartInit+0x80>)
 80007f6:	685b      	ldr	r3, [r3, #4]
 80007f8:	1d38      	adds	r0, r7, #4
 80007fa:	4a0b      	ldr	r2, [pc, #44]	; (8000828 <uartInit+0x90>)
 80007fc:	2132      	movs	r1, #50	; 0x32
 80007fe:	f002 f837 	bl	8002870 <sniprintf>
                 huart_.Init.BaudRate);
        uartSendString((uint8_t *)_buffer);
 8000802:	1d3b      	adds	r3, r7, #4
 8000804:	4618      	mov	r0, r3
 8000806:	f000 f839 	bl	800087c <uartSendString>
    }

    return _ret;
 800080a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 800080e:	4618      	mov	r0, r3
 8000810:	3738      	adds	r7, #56	; 0x38
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	20000098 	.word	0x20000098
 800081c:	40004800 	.word	0x40004800
 8000820:	200000dc 	.word	0x200000dc
 8000824:	08003214 	.word	0x08003214
 8000828:	08003230 	.word	0x08003230

0800082c <uartSendStringSize>:
 *
 * @param pString Pointer to the string to be sent.
 * @param size Size of the string to be sent.
 */
void uartSendStringSize(uint8_t *pString, uint16_t size)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
 8000834:	460b      	mov	r3, r1
 8000836:	807b      	strh	r3, [r7, #2]
    if ((pString == NULL) || (isInit == false))
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	2b00      	cmp	r3, #0
 800083c:	d006      	beq.n	800084c <uartSendStringSize+0x20>
 800083e:	4b0d      	ldr	r3, [pc, #52]	; (8000874 <uartSendStringSize+0x48>)
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	f083 0301 	eor.w	r3, r3, #1
 8000846:	b2db      	uxtb	r3, r3
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <uartSendStringSize+0x24>
    {
        Error_Handler();
 800084c:	f000 f880 	bl	8000950 <Error_Handler>
    }

    if (size > 0)
 8000850:	887b      	ldrh	r3, [r7, #2]
 8000852:	2b00      	cmp	r3, #0
 8000854:	d00a      	beq.n	800086c <uartSendStringSize+0x40>
    {
        if(uartTransmitData(&huart_, pString, size) != HAL_OK)
 8000856:	887b      	ldrh	r3, [r7, #2]
 8000858:	461a      	mov	r2, r3
 800085a:	6879      	ldr	r1, [r7, #4]
 800085c:	4806      	ldr	r0, [pc, #24]	; (8000878 <uartSendStringSize+0x4c>)
 800085e:	f000 f83f 	bl	80008e0 <uartTransmitData>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <uartSendStringSize+0x40>
        {
            Error_Handler();
 8000868:	f000 f872 	bl	8000950 <Error_Handler>
        }
    }
}
 800086c:	bf00      	nop
 800086e:	3708      	adds	r7, #8
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	200000dc 	.word	0x200000dc
 8000878:	20000098 	.word	0x20000098

0800087c <uartSendString>:
 * limit is reached.
 *
 * @param pString Pointer to the null-terminated string to be sent.
 */
void uartSendString(uint8_t *pString)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b084      	sub	sp, #16
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
    if ((pString == NULL) || (isInit == false))
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	2b00      	cmp	r3, #0
 8000888:	d006      	beq.n	8000898 <uartSendString+0x1c>
 800088a:	4b13      	ldr	r3, [pc, #76]	; (80008d8 <uartSendString+0x5c>)
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	f083 0301 	eor.w	r3, r3, #1
 8000892:	b2db      	uxtb	r3, r3
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <uartSendString+0x20>
    {
        Error_Handler();
 8000898:	f000 f85a 	bl	8000950 <Error_Handler>
    }

    uint8_t _guard = 0U;
 800089c:	2300      	movs	r3, #0
 800089e:	73fb      	strb	r3, [r7, #15]
    
    while (((*pString) != '\0') && (_guard < UART_MAX_CHAR))
 80008a0:	e00d      	b.n	80008be <uartSendString+0x42>
    {
        if(uartTransmitData(&huart_, pString, 1U) != HAL_OK)
 80008a2:	2201      	movs	r2, #1
 80008a4:	6879      	ldr	r1, [r7, #4]
 80008a6:	480d      	ldr	r0, [pc, #52]	; (80008dc <uartSendString+0x60>)
 80008a8:	f000 f81a 	bl	80008e0 <uartTransmitData>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d10d      	bne.n	80008ce <uartSendString+0x52>
        {
            break;
        }
        pString++;
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	3301      	adds	r3, #1
 80008b6:	607b      	str	r3, [r7, #4]
        _guard++;
 80008b8:	7bfb      	ldrb	r3, [r7, #15]
 80008ba:	3301      	adds	r3, #1
 80008bc:	73fb      	strb	r3, [r7, #15]
    while (((*pString) != '\0') && (_guard < UART_MAX_CHAR))
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	781b      	ldrb	r3, [r3, #0]
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d004      	beq.n	80008d0 <uartSendString+0x54>
 80008c6:	7bfb      	ldrb	r3, [r7, #15]
 80008c8:	2bf9      	cmp	r3, #249	; 0xf9
 80008ca:	d9ea      	bls.n	80008a2 <uartSendString+0x26>
    }
}
 80008cc:	e000      	b.n	80008d0 <uartSendString+0x54>
            break;
 80008ce:	bf00      	nop
}
 80008d0:	bf00      	nop
 80008d2:	3710      	adds	r7, #16
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	200000dc 	.word	0x200000dc
 80008dc:	20000098 	.word	0x20000098

080008e0 <uartTransmitData>:
 * @return HAL_StatusTypeDef HAL status code.
 */
static HAL_StatusTypeDef uartTransmitData(UART_HandleTypeDef *huart,
                                          uint8_t *pData,
                                          uint16_t size)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b086      	sub	sp, #24
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	60f8      	str	r0, [r7, #12]
 80008e8:	60b9      	str	r1, [r7, #8]
 80008ea:	4613      	mov	r3, r2
 80008ec:	80fb      	strh	r3, [r7, #6]
    if ((huart == NULL) || (isInit == false))
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d006      	beq.n	8000902 <uartTransmitData+0x22>
 80008f4:	4b15      	ldr	r3, [pc, #84]	; (800094c <uartTransmitData+0x6c>)
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	f083 0301 	eor.w	r3, r3, #1
 80008fc:	b2db      	uxtb	r3, r3
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <uartTransmitData+0x26>
    {
        Error_Handler();
 8000902:	f000 f825 	bl	8000950 <Error_Handler>
    }

    HAL_StatusTypeDef _result = HAL_ERROR;
 8000906:	2301      	movs	r3, #1
 8000908:	75bb      	strb	r3, [r7, #22]

    uint8_t _retries = UART_ERROR_SUPPORTED;
 800090a:	2303      	movs	r3, #3
 800090c:	75fb      	strb	r3, [r7, #23]

    do
    {
        _result = HAL_UART_Transmit(huart, pData, size, UART_TIMEOUT);
 800090e:	88fa      	ldrh	r2, [r7, #6]
 8000910:	2364      	movs	r3, #100	; 0x64
 8000912:	68b9      	ldr	r1, [r7, #8]
 8000914:	68f8      	ldr	r0, [r7, #12]
 8000916:	f001 fad2 	bl	8001ebe <HAL_UART_Transmit>
 800091a:	4603      	mov	r3, r0
 800091c:	75bb      	strb	r3, [r7, #22]

        if (_result == HAL_OK)
 800091e:	7dbb      	ldrb	r3, [r7, #22]
 8000920:	2b00      	cmp	r3, #0
 8000922:	d00b      	beq.n	800093c <uartTransmitData+0x5c>
        {
            break;
        }

        HAL_Delay(TICKS_WAIT_ERROR);
 8000924:	2008      	movs	r0, #8
 8000926:	f000 fa0d 	bl	8000d44 <HAL_Delay>

        if (_retries == 0U)
 800092a:	7dfb      	ldrb	r3, [r7, #23]
 800092c:	2b00      	cmp	r3, #0
 800092e:	d007      	beq.n	8000940 <uartTransmitData+0x60>
        {
            break;
        }

    } while(_retries-- > 0);
 8000930:	7dfb      	ldrb	r3, [r7, #23]
 8000932:	1e5a      	subs	r2, r3, #1
 8000934:	75fa      	strb	r2, [r7, #23]
 8000936:	2b00      	cmp	r3, #0
 8000938:	d1e9      	bne.n	800090e <uartTransmitData+0x2e>
 800093a:	e002      	b.n	8000942 <uartTransmitData+0x62>
            break;
 800093c:	bf00      	nop
 800093e:	e000      	b.n	8000942 <uartTransmitData+0x62>
            break;
 8000940:	bf00      	nop

    return _result;
 8000942:	7dbb      	ldrb	r3, [r7, #22]
}
 8000944:	4618      	mov	r0, r3
 8000946:	3718      	adds	r7, #24
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	200000dc 	.word	0x200000dc

08000950 <Error_Handler>:
 * @brief Error handler function.
 *
 * This function is called when an unrecoverable error occurs.
 */
static void Error_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
    while(1)
 8000954:	e7fe      	b.n	8000954 <Error_Handler+0x4>
	...

08000958 <BSP_LED_Init>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b08a      	sub	sp, #40	; 0x28
 800095c:	af00      	add	r7, sp, #0
 800095e:	4603      	mov	r3, r0
 8000960:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8000962:	79fb      	ldrb	r3, [r7, #7]
 8000964:	2b00      	cmp	r3, #0
 8000966:	d10e      	bne.n	8000986 <BSP_LED_Init+0x2e>
 8000968:	2300      	movs	r3, #0
 800096a:	613b      	str	r3, [r7, #16]
 800096c:	4b1f      	ldr	r3, [pc, #124]	; (80009ec <BSP_LED_Init+0x94>)
 800096e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000970:	4a1e      	ldr	r2, [pc, #120]	; (80009ec <BSP_LED_Init+0x94>)
 8000972:	f043 0302 	orr.w	r3, r3, #2
 8000976:	6313      	str	r3, [r2, #48]	; 0x30
 8000978:	4b1c      	ldr	r3, [pc, #112]	; (80009ec <BSP_LED_Init+0x94>)
 800097a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097c:	f003 0302 	and.w	r3, r3, #2
 8000980:	613b      	str	r3, [r7, #16]
 8000982:	693b      	ldr	r3, [r7, #16]
 8000984:	e00d      	b.n	80009a2 <BSP_LED_Init+0x4a>
 8000986:	2300      	movs	r3, #0
 8000988:	60fb      	str	r3, [r7, #12]
 800098a:	4b18      	ldr	r3, [pc, #96]	; (80009ec <BSP_LED_Init+0x94>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	4a17      	ldr	r2, [pc, #92]	; (80009ec <BSP_LED_Init+0x94>)
 8000990:	f043 0302 	orr.w	r3, r3, #2
 8000994:	6313      	str	r3, [r2, #48]	; 0x30
 8000996:	4b15      	ldr	r3, [pc, #84]	; (80009ec <BSP_LED_Init+0x94>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	f003 0302 	and.w	r3, r3, #2
 800099e:	60fb      	str	r3, [r7, #12]
 80009a0:	68fb      	ldr	r3, [r7, #12]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 80009a2:	79fb      	ldrb	r3, [r7, #7]
 80009a4:	4a12      	ldr	r2, [pc, #72]	; (80009f0 <BSP_LED_Init+0x98>)
 80009a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80009aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ac:	2301      	movs	r3, #1
 80009ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b0:	2300      	movs	r3, #0
 80009b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 80009b4:	2302      	movs	r3, #2
 80009b6:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 80009b8:	79fb      	ldrb	r3, [r7, #7]
 80009ba:	4a0e      	ldr	r2, [pc, #56]	; (80009f4 <BSP_LED_Init+0x9c>)
 80009bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009c0:	f107 0214 	add.w	r2, r7, #20
 80009c4:	4611      	mov	r1, r2
 80009c6:	4618      	mov	r0, r3
 80009c8:	f000 faf2 	bl	8000fb0 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 80009cc:	79fb      	ldrb	r3, [r7, #7]
 80009ce:	4a09      	ldr	r2, [pc, #36]	; (80009f4 <BSP_LED_Init+0x9c>)
 80009d0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80009d4:	79fb      	ldrb	r3, [r7, #7]
 80009d6:	4a06      	ldr	r2, [pc, #24]	; (80009f0 <BSP_LED_Init+0x98>)
 80009d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80009dc:	2200      	movs	r2, #0
 80009de:	4619      	mov	r1, r3
 80009e0:	f000 fcaa 	bl	8001338 <HAL_GPIO_WritePin>
}
 80009e4:	bf00      	nop
 80009e6:	3728      	adds	r7, #40	; 0x28
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	40023800 	.word	0x40023800
 80009f0:	08003254 	.word	0x08003254
 80009f4:	20000000 	.word	0x20000000

080009f8 <BSP_LED_On>:
  * @param  Led: Specifies the Led to be set on. 
  *   This parameter can be one of following parameters:
  *     @arg LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	4603      	mov	r3, r0
 8000a00:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 8000a02:	79fb      	ldrb	r3, [r7, #7]
 8000a04:	4a07      	ldr	r2, [pc, #28]	; (8000a24 <BSP_LED_On+0x2c>)
 8000a06:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000a0a:	79fb      	ldrb	r3, [r7, #7]
 8000a0c:	4a06      	ldr	r2, [pc, #24]	; (8000a28 <BSP_LED_On+0x30>)
 8000a0e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a12:	2201      	movs	r2, #1
 8000a14:	4619      	mov	r1, r3
 8000a16:	f000 fc8f 	bl	8001338 <HAL_GPIO_WritePin>
}
 8000a1a:	bf00      	nop
 8000a1c:	3708      	adds	r7, #8
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	20000000 	.word	0x20000000
 8000a28:	08003254 	.word	0x08003254

08000a2c <BSP_LED_Toggle>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3 
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	4603      	mov	r3, r0
 8000a34:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 8000a36:	79fb      	ldrb	r3, [r7, #7]
 8000a38:	4a07      	ldr	r2, [pc, #28]	; (8000a58 <BSP_LED_Toggle+0x2c>)
 8000a3a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a3e:	79fb      	ldrb	r3, [r7, #7]
 8000a40:	4906      	ldr	r1, [pc, #24]	; (8000a5c <BSP_LED_Toggle+0x30>)
 8000a42:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000a46:	4619      	mov	r1, r3
 8000a48:	4610      	mov	r0, r2
 8000a4a:	f000 fc8e 	bl	800136a <HAL_GPIO_TogglePin>
}
 8000a4e:	bf00      	nop
 8000a50:	3708      	adds	r7, #8
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	20000000 	.word	0x20000000
 8000a5c:	08003254 	.word	0x08003254

08000a60 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_GPIO: Button will be used as simple IO 
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b088      	sub	sp, #32
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	4603      	mov	r3, r0
 8000a68:	460a      	mov	r2, r1
 8000a6a:	71fb      	strb	r3, [r7, #7]
 8000a6c:	4613      	mov	r3, r2
 8000a6e:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef GPIO_InitStruct;
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8000a70:	2300      	movs	r3, #0
 8000a72:	60bb      	str	r3, [r7, #8]
 8000a74:	4b23      	ldr	r3, [pc, #140]	; (8000b04 <BSP_PB_Init+0xa4>)
 8000a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a78:	4a22      	ldr	r2, [pc, #136]	; (8000b04 <BSP_PB_Init+0xa4>)
 8000a7a:	f043 0304 	orr.w	r3, r3, #4
 8000a7e:	6313      	str	r3, [r2, #48]	; 0x30
 8000a80:	4b20      	ldr	r3, [pc, #128]	; (8000b04 <BSP_PB_Init+0xa4>)
 8000a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a84:	f003 0304 	and.w	r3, r3, #4
 8000a88:	60bb      	str	r3, [r7, #8]
 8000a8a:	68bb      	ldr	r3, [r7, #8]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8000a8c:	79bb      	ldrb	r3, [r7, #6]
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d112      	bne.n	8000ab8 <BSP_PB_Init+0x58>
  {
    /* Configure Button pin as input */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8000a92:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a96:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a9c:	2302      	movs	r3, #2
 8000a9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8000aa0:	2302      	movs	r3, #2
 8000aa2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8000aa4:	79fb      	ldrb	r3, [r7, #7]
 8000aa6:	4a18      	ldr	r2, [pc, #96]	; (8000b08 <BSP_PB_Init+0xa8>)
 8000aa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000aac:	f107 020c 	add.w	r2, r7, #12
 8000ab0:	4611      	mov	r1, r2
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f000 fa7c 	bl	8000fb0 <HAL_GPIO_Init>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 8000ab8:	79bb      	ldrb	r3, [r7, #6]
 8000aba:	2b01      	cmp	r3, #1
 8000abc:	d11d      	bne.n	8000afa <BSP_PB_Init+0x9a>
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8000abe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ac2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING; 
 8000ac8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000acc:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8000ace:	79fb      	ldrb	r3, [r7, #7]
 8000ad0:	4a0d      	ldr	r2, [pc, #52]	; (8000b08 <BSP_PB_Init+0xa8>)
 8000ad2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ad6:	f107 020c 	add.w	r2, r7, #12
 8000ada:	4611      	mov	r1, r2
 8000adc:	4618      	mov	r0, r3
 8000ade:	f000 fa67 	bl	8000fb0 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8000ae2:	2328      	movs	r3, #40	; 0x28
 8000ae4:	b25b      	sxtb	r3, r3
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	210f      	movs	r1, #15
 8000aea:	4618      	mov	r0, r3
 8000aec:	f000 fa29 	bl	8000f42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8000af0:	2328      	movs	r3, #40	; 0x28
 8000af2:	b25b      	sxtb	r3, r3
 8000af4:	4618      	mov	r0, r3
 8000af6:	f000 fa40 	bl	8000f7a <HAL_NVIC_EnableIRQ>
  }
}
 8000afa:	bf00      	nop
 8000afc:	3720      	adds	r7, #32
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	40023800 	.word	0x40023800
 8000b08:	2000000c 	.word	0x2000000c

08000b0c <BSP_PB_GetState>:
  * @param  Button: Specifies the Button to be checked.
  *   This parameter should be: BUTTON_USER  
  * @retval The Button GPIO pin value.
  */
uint32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	4603      	mov	r3, r0
 8000b14:	71fb      	strb	r3, [r7, #7]
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8000b16:	79fb      	ldrb	r3, [r7, #7]
 8000b18:	4a06      	ldr	r2, [pc, #24]	; (8000b34 <BSP_PB_GetState+0x28>)
 8000b1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b1e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b22:	4611      	mov	r1, r2
 8000b24:	4618      	mov	r0, r3
 8000b26:	f000 fbef 	bl	8001308 <HAL_GPIO_ReadPin>
 8000b2a:	4603      	mov	r3, r0
}
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	3708      	adds	r7, #8
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	2000000c 	.word	0x2000000c

08000b38 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b3c:	4b16      	ldr	r3, [pc, #88]	; (8000b98 <SystemInit+0x60>)
 8000b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b42:	4a15      	ldr	r2, [pc, #84]	; (8000b98 <SystemInit+0x60>)
 8000b44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000b4c:	4b13      	ldr	r3, [pc, #76]	; (8000b9c <SystemInit+0x64>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4a12      	ldr	r2, [pc, #72]	; (8000b9c <SystemInit+0x64>)
 8000b52:	f043 0301 	orr.w	r3, r3, #1
 8000b56:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000b58:	4b10      	ldr	r3, [pc, #64]	; (8000b9c <SystemInit+0x64>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000b5e:	4b0f      	ldr	r3, [pc, #60]	; (8000b9c <SystemInit+0x64>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	4a0e      	ldr	r2, [pc, #56]	; (8000b9c <SystemInit+0x64>)
 8000b64:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000b68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b6c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000b6e:	4b0b      	ldr	r3, [pc, #44]	; (8000b9c <SystemInit+0x64>)
 8000b70:	4a0b      	ldr	r2, [pc, #44]	; (8000ba0 <SystemInit+0x68>)
 8000b72:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000b74:	4b09      	ldr	r3, [pc, #36]	; (8000b9c <SystemInit+0x64>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a08      	ldr	r2, [pc, #32]	; (8000b9c <SystemInit+0x64>)
 8000b7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b7e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000b80:	4b06      	ldr	r3, [pc, #24]	; (8000b9c <SystemInit+0x64>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b86:	4b04      	ldr	r3, [pc, #16]	; (8000b98 <SystemInit+0x60>)
 8000b88:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b8c:	609a      	str	r2, [r3, #8]
#endif
}
 8000b8e:	bf00      	nop
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr
 8000b98:	e000ed00 	.word	0xe000ed00
 8000b9c:	40023800 	.word	0x40023800
 8000ba0:	24003010 	.word	0x24003010

08000ba4 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
}
 8000ba8:	bf00      	nop
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr

08000bb2 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000bb2:	b480      	push	{r7}
 8000bb4:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000bb6:	e7fe      	b.n	8000bb6 <HardFault_Handler+0x4>

08000bb8 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000bbc:	e7fe      	b.n	8000bbc <MemManage_Handler+0x4>

08000bbe <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000bc2:	e7fe      	b.n	8000bc2 <BusFault_Handler+0x4>

08000bc4 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000bc8:	e7fe      	b.n	8000bc8 <UsageFault_Handler+0x4>

08000bca <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000bca:	b480      	push	{r7}
 8000bcc:	af00      	add	r7, sp, #0
}
 8000bce:	bf00      	nop
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr

08000bd8 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
}
 8000bdc:	bf00      	nop
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr

08000be6 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000be6:	b480      	push	{r7}
 8000be8:	af00      	add	r7, sp, #0
}
 8000bea:	bf00      	nop
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr

08000bf4 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
    HAL_IncTick();
 8000bf8:	f000 f884 	bl	8000d04 <HAL_IncTick>
}
 8000bfc:	bf00      	nop
 8000bfe:	bd80      	pop	{r7, pc}

08000c00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b086      	sub	sp, #24
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c08:	4a14      	ldr	r2, [pc, #80]	; (8000c5c <_sbrk+0x5c>)
 8000c0a:	4b15      	ldr	r3, [pc, #84]	; (8000c60 <_sbrk+0x60>)
 8000c0c:	1ad3      	subs	r3, r2, r3
 8000c0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c14:	4b13      	ldr	r3, [pc, #76]	; (8000c64 <_sbrk+0x64>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d102      	bne.n	8000c22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c1c:	4b11      	ldr	r3, [pc, #68]	; (8000c64 <_sbrk+0x64>)
 8000c1e:	4a12      	ldr	r2, [pc, #72]	; (8000c68 <_sbrk+0x68>)
 8000c20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c22:	4b10      	ldr	r3, [pc, #64]	; (8000c64 <_sbrk+0x64>)
 8000c24:	681a      	ldr	r2, [r3, #0]
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	4413      	add	r3, r2
 8000c2a:	693a      	ldr	r2, [r7, #16]
 8000c2c:	429a      	cmp	r2, r3
 8000c2e:	d207      	bcs.n	8000c40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c30:	f001 fe52 	bl	80028d8 <__errno>
 8000c34:	4603      	mov	r3, r0
 8000c36:	220c      	movs	r2, #12
 8000c38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c3e:	e009      	b.n	8000c54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c40:	4b08      	ldr	r3, [pc, #32]	; (8000c64 <_sbrk+0x64>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c46:	4b07      	ldr	r3, [pc, #28]	; (8000c64 <_sbrk+0x64>)
 8000c48:	681a      	ldr	r2, [r3, #0]
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	4413      	add	r3, r2
 8000c4e:	4a05      	ldr	r2, [pc, #20]	; (8000c64 <_sbrk+0x64>)
 8000c50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c52:	68fb      	ldr	r3, [r7, #12]
}
 8000c54:	4618      	mov	r0, r3
 8000c56:	3718      	adds	r7, #24
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	20030000 	.word	0x20030000
 8000c60:	00000400 	.word	0x00000400
 8000c64:	200000e0 	.word	0x200000e0
 8000c68:	20000230 	.word	0x20000230

08000c6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c70:	4b0b      	ldr	r3, [pc, #44]	; (8000ca0 <HAL_Init+0x34>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a0a      	ldr	r2, [pc, #40]	; (8000ca0 <HAL_Init+0x34>)
 8000c76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c7a:	6013      	str	r3, [r2, #0]
#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c7c:	4b08      	ldr	r3, [pc, #32]	; (8000ca0 <HAL_Init+0x34>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a07      	ldr	r2, [pc, #28]	; (8000ca0 <HAL_Init+0x34>)
 8000c82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c88:	2003      	movs	r0, #3
 8000c8a:	f000 f94f 	bl	8000f2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c8e:	200f      	movs	r0, #15
 8000c90:	f000 f808 	bl	8000ca4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c94:	f000 fbd6 	bl	8001444 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c98:	2300      	movs	r3, #0
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	40023c00 	.word	0x40023c00

08000ca4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cac:	4b12      	ldr	r3, [pc, #72]	; (8000cf8 <HAL_InitTick+0x54>)
 8000cae:	681a      	ldr	r2, [r3, #0]
 8000cb0:	4b12      	ldr	r3, [pc, #72]	; (8000cfc <HAL_InitTick+0x58>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cba:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f000 f967 	bl	8000f96 <HAL_SYSTICK_Config>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	e00e      	b.n	8000cf0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	2b0f      	cmp	r3, #15
 8000cd6:	d80a      	bhi.n	8000cee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cd8:	2200      	movs	r2, #0
 8000cda:	6879      	ldr	r1, [r7, #4]
 8000cdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ce0:	f000 f92f 	bl	8000f42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ce4:	4a06      	ldr	r2, [pc, #24]	; (8000d00 <HAL_InitTick+0x5c>)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cea:	2300      	movs	r3, #0
 8000cec:	e000      	b.n	8000cf0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cee:	2301      	movs	r3, #1
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	3708      	adds	r7, #8
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	20000010 	.word	0x20000010
 8000cfc:	20000018 	.word	0x20000018
 8000d00:	20000014 	.word	0x20000014

08000d04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d08:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <HAL_IncTick+0x20>)
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	461a      	mov	r2, r3
 8000d0e:	4b06      	ldr	r3, [pc, #24]	; (8000d28 <HAL_IncTick+0x24>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	4413      	add	r3, r2
 8000d14:	4a04      	ldr	r2, [pc, #16]	; (8000d28 <HAL_IncTick+0x24>)
 8000d16:	6013      	str	r3, [r2, #0]
}
 8000d18:	bf00      	nop
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	20000018 	.word	0x20000018
 8000d28:	200000e4 	.word	0x200000e4

08000d2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d30:	4b03      	ldr	r3, [pc, #12]	; (8000d40 <HAL_GetTick+0x14>)
 8000d32:	681b      	ldr	r3, [r3, #0]
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop
 8000d40:	200000e4 	.word	0x200000e4

08000d44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b084      	sub	sp, #16
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d4c:	f7ff ffee 	bl	8000d2c <HAL_GetTick>
 8000d50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000d5c:	d005      	beq.n	8000d6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d5e:	4b0a      	ldr	r3, [pc, #40]	; (8000d88 <HAL_Delay+0x44>)
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	461a      	mov	r2, r3
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	4413      	add	r3, r2
 8000d68:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d6a:	bf00      	nop
 8000d6c:	f7ff ffde 	bl	8000d2c <HAL_GetTick>
 8000d70:	4602      	mov	r2, r0
 8000d72:	68bb      	ldr	r3, [r7, #8]
 8000d74:	1ad3      	subs	r3, r2, r3
 8000d76:	68fa      	ldr	r2, [r7, #12]
 8000d78:	429a      	cmp	r2, r3
 8000d7a:	d8f7      	bhi.n	8000d6c <HAL_Delay+0x28>
  {
  }
}
 8000d7c:	bf00      	nop
 8000d7e:	bf00      	nop
 8000d80:	3710      	adds	r7, #16
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	20000018 	.word	0x20000018

08000d8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b085      	sub	sp, #20
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	f003 0307 	and.w	r3, r3, #7
 8000d9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d9c:	4b0c      	ldr	r3, [pc, #48]	; (8000dd0 <__NVIC_SetPriorityGrouping+0x44>)
 8000d9e:	68db      	ldr	r3, [r3, #12]
 8000da0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000da2:	68ba      	ldr	r2, [r7, #8]
 8000da4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000da8:	4013      	ands	r3, r2
 8000daa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000db0:	68bb      	ldr	r3, [r7, #8]
 8000db2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000db4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000db8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dbe:	4a04      	ldr	r2, [pc, #16]	; (8000dd0 <__NVIC_SetPriorityGrouping+0x44>)
 8000dc0:	68bb      	ldr	r3, [r7, #8]
 8000dc2:	60d3      	str	r3, [r2, #12]
}
 8000dc4:	bf00      	nop
 8000dc6:	3714      	adds	r7, #20
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr
 8000dd0:	e000ed00 	.word	0xe000ed00

08000dd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dd8:	4b04      	ldr	r3, [pc, #16]	; (8000dec <__NVIC_GetPriorityGrouping+0x18>)
 8000dda:	68db      	ldr	r3, [r3, #12]
 8000ddc:	0a1b      	lsrs	r3, r3, #8
 8000dde:	f003 0307 	and.w	r3, r3, #7
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr
 8000dec:	e000ed00 	.word	0xe000ed00

08000df0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b083      	sub	sp, #12
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	4603      	mov	r3, r0
 8000df8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	db0b      	blt.n	8000e1a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e02:	79fb      	ldrb	r3, [r7, #7]
 8000e04:	f003 021f 	and.w	r2, r3, #31
 8000e08:	4907      	ldr	r1, [pc, #28]	; (8000e28 <__NVIC_EnableIRQ+0x38>)
 8000e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e0e:	095b      	lsrs	r3, r3, #5
 8000e10:	2001      	movs	r0, #1
 8000e12:	fa00 f202 	lsl.w	r2, r0, r2
 8000e16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e1a:	bf00      	nop
 8000e1c:	370c      	adds	r7, #12
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	e000e100 	.word	0xe000e100

08000e2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b083      	sub	sp, #12
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	4603      	mov	r3, r0
 8000e34:	6039      	str	r1, [r7, #0]
 8000e36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	db0a      	blt.n	8000e56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	b2da      	uxtb	r2, r3
 8000e44:	490c      	ldr	r1, [pc, #48]	; (8000e78 <__NVIC_SetPriority+0x4c>)
 8000e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e4a:	0112      	lsls	r2, r2, #4
 8000e4c:	b2d2      	uxtb	r2, r2
 8000e4e:	440b      	add	r3, r1
 8000e50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e54:	e00a      	b.n	8000e6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	b2da      	uxtb	r2, r3
 8000e5a:	4908      	ldr	r1, [pc, #32]	; (8000e7c <__NVIC_SetPriority+0x50>)
 8000e5c:	79fb      	ldrb	r3, [r7, #7]
 8000e5e:	f003 030f 	and.w	r3, r3, #15
 8000e62:	3b04      	subs	r3, #4
 8000e64:	0112      	lsls	r2, r2, #4
 8000e66:	b2d2      	uxtb	r2, r2
 8000e68:	440b      	add	r3, r1
 8000e6a:	761a      	strb	r2, [r3, #24]
}
 8000e6c:	bf00      	nop
 8000e6e:	370c      	adds	r7, #12
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr
 8000e78:	e000e100 	.word	0xe000e100
 8000e7c:	e000ed00 	.word	0xe000ed00

08000e80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b089      	sub	sp, #36	; 0x24
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	60f8      	str	r0, [r7, #12]
 8000e88:	60b9      	str	r1, [r7, #8]
 8000e8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	f003 0307 	and.w	r3, r3, #7
 8000e92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e94:	69fb      	ldr	r3, [r7, #28]
 8000e96:	f1c3 0307 	rsb	r3, r3, #7
 8000e9a:	2b04      	cmp	r3, #4
 8000e9c:	bf28      	it	cs
 8000e9e:	2304      	movcs	r3, #4
 8000ea0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ea2:	69fb      	ldr	r3, [r7, #28]
 8000ea4:	3304      	adds	r3, #4
 8000ea6:	2b06      	cmp	r3, #6
 8000ea8:	d902      	bls.n	8000eb0 <NVIC_EncodePriority+0x30>
 8000eaa:	69fb      	ldr	r3, [r7, #28]
 8000eac:	3b03      	subs	r3, #3
 8000eae:	e000      	b.n	8000eb2 <NVIC_EncodePriority+0x32>
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eb4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000eb8:	69bb      	ldr	r3, [r7, #24]
 8000eba:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebe:	43da      	mvns	r2, r3
 8000ec0:	68bb      	ldr	r3, [r7, #8]
 8000ec2:	401a      	ands	r2, r3
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ec8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	fa01 f303 	lsl.w	r3, r1, r3
 8000ed2:	43d9      	mvns	r1, r3
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ed8:	4313      	orrs	r3, r2
         );
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	3724      	adds	r7, #36	; 0x24
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
	...

08000ee8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	3b01      	subs	r3, #1
 8000ef4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ef8:	d301      	bcc.n	8000efe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000efa:	2301      	movs	r3, #1
 8000efc:	e00f      	b.n	8000f1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000efe:	4a0a      	ldr	r2, [pc, #40]	; (8000f28 <SysTick_Config+0x40>)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	3b01      	subs	r3, #1
 8000f04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f06:	210f      	movs	r1, #15
 8000f08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f0c:	f7ff ff8e 	bl	8000e2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f10:	4b05      	ldr	r3, [pc, #20]	; (8000f28 <SysTick_Config+0x40>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f16:	4b04      	ldr	r3, [pc, #16]	; (8000f28 <SysTick_Config+0x40>)
 8000f18:	2207      	movs	r2, #7
 8000f1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f1c:	2300      	movs	r3, #0
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3708      	adds	r7, #8
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	e000e010 	.word	0xe000e010

08000f2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f34:	6878      	ldr	r0, [r7, #4]
 8000f36:	f7ff ff29 	bl	8000d8c <__NVIC_SetPriorityGrouping>
}
 8000f3a:	bf00      	nop
 8000f3c:	3708      	adds	r7, #8
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}

08000f42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f42:	b580      	push	{r7, lr}
 8000f44:	b086      	sub	sp, #24
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	4603      	mov	r3, r0
 8000f4a:	60b9      	str	r1, [r7, #8]
 8000f4c:	607a      	str	r2, [r7, #4]
 8000f4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f50:	2300      	movs	r3, #0
 8000f52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f54:	f7ff ff3e 	bl	8000dd4 <__NVIC_GetPriorityGrouping>
 8000f58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f5a:	687a      	ldr	r2, [r7, #4]
 8000f5c:	68b9      	ldr	r1, [r7, #8]
 8000f5e:	6978      	ldr	r0, [r7, #20]
 8000f60:	f7ff ff8e 	bl	8000e80 <NVIC_EncodePriority>
 8000f64:	4602      	mov	r2, r0
 8000f66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f6a:	4611      	mov	r1, r2
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f7ff ff5d 	bl	8000e2c <__NVIC_SetPriority>
}
 8000f72:	bf00      	nop
 8000f74:	3718      	adds	r7, #24
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}

08000f7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f7a:	b580      	push	{r7, lr}
 8000f7c:	b082      	sub	sp, #8
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	4603      	mov	r3, r0
 8000f82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f7ff ff31 	bl	8000df0 <__NVIC_EnableIRQ>
}
 8000f8e:	bf00      	nop
 8000f90:	3708      	adds	r7, #8
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}

08000f96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f96:	b580      	push	{r7, lr}
 8000f98:	b082      	sub	sp, #8
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f9e:	6878      	ldr	r0, [r7, #4]
 8000fa0:	f7ff ffa2 	bl	8000ee8 <SysTick_Config>
 8000fa4:	4603      	mov	r3, r0
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3708      	adds	r7, #8
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
	...

08000fb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b089      	sub	sp, #36	; 0x24
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
 8000fb8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	61fb      	str	r3, [r7, #28]
 8000fca:	e177      	b.n	80012bc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fcc:	2201      	movs	r2, #1
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	697a      	ldr	r2, [r7, #20]
 8000fdc:	4013      	ands	r3, r2
 8000fde:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fe0:	693a      	ldr	r2, [r7, #16]
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	429a      	cmp	r2, r3
 8000fe6:	f040 8166 	bne.w	80012b6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	f003 0303 	and.w	r3, r3, #3
 8000ff2:	2b01      	cmp	r3, #1
 8000ff4:	d005      	beq.n	8001002 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ffe:	2b02      	cmp	r3, #2
 8001000:	d130      	bne.n	8001064 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	689b      	ldr	r3, [r3, #8]
 8001006:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001008:	69fb      	ldr	r3, [r7, #28]
 800100a:	005b      	lsls	r3, r3, #1
 800100c:	2203      	movs	r2, #3
 800100e:	fa02 f303 	lsl.w	r3, r2, r3
 8001012:	43db      	mvns	r3, r3
 8001014:	69ba      	ldr	r2, [r7, #24]
 8001016:	4013      	ands	r3, r2
 8001018:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	68da      	ldr	r2, [r3, #12]
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	005b      	lsls	r3, r3, #1
 8001022:	fa02 f303 	lsl.w	r3, r2, r3
 8001026:	69ba      	ldr	r2, [r7, #24]
 8001028:	4313      	orrs	r3, r2
 800102a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	69ba      	ldr	r2, [r7, #24]
 8001030:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001038:	2201      	movs	r2, #1
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	fa02 f303 	lsl.w	r3, r2, r3
 8001040:	43db      	mvns	r3, r3
 8001042:	69ba      	ldr	r2, [r7, #24]
 8001044:	4013      	ands	r3, r2
 8001046:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	091b      	lsrs	r3, r3, #4
 800104e:	f003 0201 	and.w	r2, r3, #1
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	fa02 f303 	lsl.w	r3, r2, r3
 8001058:	69ba      	ldr	r2, [r7, #24]
 800105a:	4313      	orrs	r3, r2
 800105c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	69ba      	ldr	r2, [r7, #24]
 8001062:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	f003 0303 	and.w	r3, r3, #3
 800106c:	2b03      	cmp	r3, #3
 800106e:	d017      	beq.n	80010a0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	68db      	ldr	r3, [r3, #12]
 8001074:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	005b      	lsls	r3, r3, #1
 800107a:	2203      	movs	r2, #3
 800107c:	fa02 f303 	lsl.w	r3, r2, r3
 8001080:	43db      	mvns	r3, r3
 8001082:	69ba      	ldr	r2, [r7, #24]
 8001084:	4013      	ands	r3, r2
 8001086:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	689a      	ldr	r2, [r3, #8]
 800108c:	69fb      	ldr	r3, [r7, #28]
 800108e:	005b      	lsls	r3, r3, #1
 8001090:	fa02 f303 	lsl.w	r3, r2, r3
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	4313      	orrs	r3, r2
 8001098:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	69ba      	ldr	r2, [r7, #24]
 800109e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	f003 0303 	and.w	r3, r3, #3
 80010a8:	2b02      	cmp	r3, #2
 80010aa:	d123      	bne.n	80010f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010ac:	69fb      	ldr	r3, [r7, #28]
 80010ae:	08da      	lsrs	r2, r3, #3
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	3208      	adds	r2, #8
 80010b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	f003 0307 	and.w	r3, r3, #7
 80010c0:	009b      	lsls	r3, r3, #2
 80010c2:	220f      	movs	r2, #15
 80010c4:	fa02 f303 	lsl.w	r3, r2, r3
 80010c8:	43db      	mvns	r3, r3
 80010ca:	69ba      	ldr	r2, [r7, #24]
 80010cc:	4013      	ands	r3, r2
 80010ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	691a      	ldr	r2, [r3, #16]
 80010d4:	69fb      	ldr	r3, [r7, #28]
 80010d6:	f003 0307 	and.w	r3, r3, #7
 80010da:	009b      	lsls	r3, r3, #2
 80010dc:	fa02 f303 	lsl.w	r3, r2, r3
 80010e0:	69ba      	ldr	r2, [r7, #24]
 80010e2:	4313      	orrs	r3, r2
 80010e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	08da      	lsrs	r2, r3, #3
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	3208      	adds	r2, #8
 80010ee:	69b9      	ldr	r1, [r7, #24]
 80010f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	005b      	lsls	r3, r3, #1
 80010fe:	2203      	movs	r2, #3
 8001100:	fa02 f303 	lsl.w	r3, r2, r3
 8001104:	43db      	mvns	r3, r3
 8001106:	69ba      	ldr	r2, [r7, #24]
 8001108:	4013      	ands	r3, r2
 800110a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	f003 0203 	and.w	r2, r3, #3
 8001114:	69fb      	ldr	r3, [r7, #28]
 8001116:	005b      	lsls	r3, r3, #1
 8001118:	fa02 f303 	lsl.w	r3, r2, r3
 800111c:	69ba      	ldr	r2, [r7, #24]
 800111e:	4313      	orrs	r3, r2
 8001120:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001130:	2b00      	cmp	r3, #0
 8001132:	f000 80c0 	beq.w	80012b6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001136:	2300      	movs	r3, #0
 8001138:	60fb      	str	r3, [r7, #12]
 800113a:	4b66      	ldr	r3, [pc, #408]	; (80012d4 <HAL_GPIO_Init+0x324>)
 800113c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800113e:	4a65      	ldr	r2, [pc, #404]	; (80012d4 <HAL_GPIO_Init+0x324>)
 8001140:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001144:	6453      	str	r3, [r2, #68]	; 0x44
 8001146:	4b63      	ldr	r3, [pc, #396]	; (80012d4 <HAL_GPIO_Init+0x324>)
 8001148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800114a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800114e:	60fb      	str	r3, [r7, #12]
 8001150:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001152:	4a61      	ldr	r2, [pc, #388]	; (80012d8 <HAL_GPIO_Init+0x328>)
 8001154:	69fb      	ldr	r3, [r7, #28]
 8001156:	089b      	lsrs	r3, r3, #2
 8001158:	3302      	adds	r3, #2
 800115a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800115e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001160:	69fb      	ldr	r3, [r7, #28]
 8001162:	f003 0303 	and.w	r3, r3, #3
 8001166:	009b      	lsls	r3, r3, #2
 8001168:	220f      	movs	r2, #15
 800116a:	fa02 f303 	lsl.w	r3, r2, r3
 800116e:	43db      	mvns	r3, r3
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	4013      	ands	r3, r2
 8001174:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4a58      	ldr	r2, [pc, #352]	; (80012dc <HAL_GPIO_Init+0x32c>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d037      	beq.n	80011ee <HAL_GPIO_Init+0x23e>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	4a57      	ldr	r2, [pc, #348]	; (80012e0 <HAL_GPIO_Init+0x330>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d031      	beq.n	80011ea <HAL_GPIO_Init+0x23a>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	4a56      	ldr	r2, [pc, #344]	; (80012e4 <HAL_GPIO_Init+0x334>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d02b      	beq.n	80011e6 <HAL_GPIO_Init+0x236>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	4a55      	ldr	r2, [pc, #340]	; (80012e8 <HAL_GPIO_Init+0x338>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d025      	beq.n	80011e2 <HAL_GPIO_Init+0x232>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4a54      	ldr	r2, [pc, #336]	; (80012ec <HAL_GPIO_Init+0x33c>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d01f      	beq.n	80011de <HAL_GPIO_Init+0x22e>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4a53      	ldr	r2, [pc, #332]	; (80012f0 <HAL_GPIO_Init+0x340>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d019      	beq.n	80011da <HAL_GPIO_Init+0x22a>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4a52      	ldr	r2, [pc, #328]	; (80012f4 <HAL_GPIO_Init+0x344>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d013      	beq.n	80011d6 <HAL_GPIO_Init+0x226>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	4a51      	ldr	r2, [pc, #324]	; (80012f8 <HAL_GPIO_Init+0x348>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d00d      	beq.n	80011d2 <HAL_GPIO_Init+0x222>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4a50      	ldr	r2, [pc, #320]	; (80012fc <HAL_GPIO_Init+0x34c>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d007      	beq.n	80011ce <HAL_GPIO_Init+0x21e>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	4a4f      	ldr	r2, [pc, #316]	; (8001300 <HAL_GPIO_Init+0x350>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d101      	bne.n	80011ca <HAL_GPIO_Init+0x21a>
 80011c6:	2309      	movs	r3, #9
 80011c8:	e012      	b.n	80011f0 <HAL_GPIO_Init+0x240>
 80011ca:	230a      	movs	r3, #10
 80011cc:	e010      	b.n	80011f0 <HAL_GPIO_Init+0x240>
 80011ce:	2308      	movs	r3, #8
 80011d0:	e00e      	b.n	80011f0 <HAL_GPIO_Init+0x240>
 80011d2:	2307      	movs	r3, #7
 80011d4:	e00c      	b.n	80011f0 <HAL_GPIO_Init+0x240>
 80011d6:	2306      	movs	r3, #6
 80011d8:	e00a      	b.n	80011f0 <HAL_GPIO_Init+0x240>
 80011da:	2305      	movs	r3, #5
 80011dc:	e008      	b.n	80011f0 <HAL_GPIO_Init+0x240>
 80011de:	2304      	movs	r3, #4
 80011e0:	e006      	b.n	80011f0 <HAL_GPIO_Init+0x240>
 80011e2:	2303      	movs	r3, #3
 80011e4:	e004      	b.n	80011f0 <HAL_GPIO_Init+0x240>
 80011e6:	2302      	movs	r3, #2
 80011e8:	e002      	b.n	80011f0 <HAL_GPIO_Init+0x240>
 80011ea:	2301      	movs	r3, #1
 80011ec:	e000      	b.n	80011f0 <HAL_GPIO_Init+0x240>
 80011ee:	2300      	movs	r3, #0
 80011f0:	69fa      	ldr	r2, [r7, #28]
 80011f2:	f002 0203 	and.w	r2, r2, #3
 80011f6:	0092      	lsls	r2, r2, #2
 80011f8:	4093      	lsls	r3, r2
 80011fa:	69ba      	ldr	r2, [r7, #24]
 80011fc:	4313      	orrs	r3, r2
 80011fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001200:	4935      	ldr	r1, [pc, #212]	; (80012d8 <HAL_GPIO_Init+0x328>)
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	089b      	lsrs	r3, r3, #2
 8001206:	3302      	adds	r3, #2
 8001208:	69ba      	ldr	r2, [r7, #24]
 800120a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800120e:	4b3d      	ldr	r3, [pc, #244]	; (8001304 <HAL_GPIO_Init+0x354>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	43db      	mvns	r3, r3
 8001218:	69ba      	ldr	r2, [r7, #24]
 800121a:	4013      	ands	r3, r2
 800121c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001226:	2b00      	cmp	r3, #0
 8001228:	d003      	beq.n	8001232 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800122a:	69ba      	ldr	r2, [r7, #24]
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	4313      	orrs	r3, r2
 8001230:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001232:	4a34      	ldr	r2, [pc, #208]	; (8001304 <HAL_GPIO_Init+0x354>)
 8001234:	69bb      	ldr	r3, [r7, #24]
 8001236:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001238:	4b32      	ldr	r3, [pc, #200]	; (8001304 <HAL_GPIO_Init+0x354>)
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	43db      	mvns	r3, r3
 8001242:	69ba      	ldr	r2, [r7, #24]
 8001244:	4013      	ands	r3, r2
 8001246:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001250:	2b00      	cmp	r3, #0
 8001252:	d003      	beq.n	800125c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	693b      	ldr	r3, [r7, #16]
 8001258:	4313      	orrs	r3, r2
 800125a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800125c:	4a29      	ldr	r2, [pc, #164]	; (8001304 <HAL_GPIO_Init+0x354>)
 800125e:	69bb      	ldr	r3, [r7, #24]
 8001260:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001262:	4b28      	ldr	r3, [pc, #160]	; (8001304 <HAL_GPIO_Init+0x354>)
 8001264:	689b      	ldr	r3, [r3, #8]
 8001266:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001268:	693b      	ldr	r3, [r7, #16]
 800126a:	43db      	mvns	r3, r3
 800126c:	69ba      	ldr	r2, [r7, #24]
 800126e:	4013      	ands	r3, r2
 8001270:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800127a:	2b00      	cmp	r3, #0
 800127c:	d003      	beq.n	8001286 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800127e:	69ba      	ldr	r2, [r7, #24]
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	4313      	orrs	r3, r2
 8001284:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001286:	4a1f      	ldr	r2, [pc, #124]	; (8001304 <HAL_GPIO_Init+0x354>)
 8001288:	69bb      	ldr	r3, [r7, #24]
 800128a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800128c:	4b1d      	ldr	r3, [pc, #116]	; (8001304 <HAL_GPIO_Init+0x354>)
 800128e:	68db      	ldr	r3, [r3, #12]
 8001290:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	43db      	mvns	r3, r3
 8001296:	69ba      	ldr	r2, [r7, #24]
 8001298:	4013      	ands	r3, r2
 800129a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d003      	beq.n	80012b0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80012a8:	69ba      	ldr	r2, [r7, #24]
 80012aa:	693b      	ldr	r3, [r7, #16]
 80012ac:	4313      	orrs	r3, r2
 80012ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012b0:	4a14      	ldr	r2, [pc, #80]	; (8001304 <HAL_GPIO_Init+0x354>)
 80012b2:	69bb      	ldr	r3, [r7, #24]
 80012b4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	3301      	adds	r3, #1
 80012ba:	61fb      	str	r3, [r7, #28]
 80012bc:	69fb      	ldr	r3, [r7, #28]
 80012be:	2b0f      	cmp	r3, #15
 80012c0:	f67f ae84 	bls.w	8000fcc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012c4:	bf00      	nop
 80012c6:	bf00      	nop
 80012c8:	3724      	adds	r7, #36	; 0x24
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop
 80012d4:	40023800 	.word	0x40023800
 80012d8:	40013800 	.word	0x40013800
 80012dc:	40020000 	.word	0x40020000
 80012e0:	40020400 	.word	0x40020400
 80012e4:	40020800 	.word	0x40020800
 80012e8:	40020c00 	.word	0x40020c00
 80012ec:	40021000 	.word	0x40021000
 80012f0:	40021400 	.word	0x40021400
 80012f4:	40021800 	.word	0x40021800
 80012f8:	40021c00 	.word	0x40021c00
 80012fc:	40022000 	.word	0x40022000
 8001300:	40022400 	.word	0x40022400
 8001304:	40013c00 	.word	0x40013c00

08001308 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001308:	b480      	push	{r7}
 800130a:	b085      	sub	sp, #20
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
 8001310:	460b      	mov	r3, r1
 8001312:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	691a      	ldr	r2, [r3, #16]
 8001318:	887b      	ldrh	r3, [r7, #2]
 800131a:	4013      	ands	r3, r2
 800131c:	2b00      	cmp	r3, #0
 800131e:	d002      	beq.n	8001326 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001320:	2301      	movs	r3, #1
 8001322:	73fb      	strb	r3, [r7, #15]
 8001324:	e001      	b.n	800132a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001326:	2300      	movs	r3, #0
 8001328:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800132a:	7bfb      	ldrb	r3, [r7, #15]
}
 800132c:	4618      	mov	r0, r3
 800132e:	3714      	adds	r7, #20
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr

08001338 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
 8001340:	460b      	mov	r3, r1
 8001342:	807b      	strh	r3, [r7, #2]
 8001344:	4613      	mov	r3, r2
 8001346:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001348:	787b      	ldrb	r3, [r7, #1]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d003      	beq.n	8001356 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800134e:	887a      	ldrh	r2, [r7, #2]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001354:	e003      	b.n	800135e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001356:	887b      	ldrh	r3, [r7, #2]
 8001358:	041a      	lsls	r2, r3, #16
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	619a      	str	r2, [r3, #24]
}
 800135e:	bf00      	nop
 8001360:	370c      	adds	r7, #12
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr

0800136a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800136a:	b480      	push	{r7}
 800136c:	b085      	sub	sp, #20
 800136e:	af00      	add	r7, sp, #0
 8001370:	6078      	str	r0, [r7, #4]
 8001372:	460b      	mov	r3, r1
 8001374:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	695b      	ldr	r3, [r3, #20]
 800137a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800137c:	887a      	ldrh	r2, [r7, #2]
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	4013      	ands	r3, r2
 8001382:	041a      	lsls	r2, r3, #16
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	43d9      	mvns	r1, r3
 8001388:	887b      	ldrh	r3, [r7, #2]
 800138a:	400b      	ands	r3, r1
 800138c:	431a      	orrs	r2, r3
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	619a      	str	r2, [r3, #24]
}
 8001392:	bf00      	nop
 8001394:	3714      	adds	r7, #20
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
	...

080013a0 <HAL_UART_MspInit>:
  *           - Peripheral's GPIO Configuration
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b08a      	sub	sp, #40	; 0x28
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStruct;


  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable GPIO TX/RX clock */
  USARTx_TX_GPIO_CLK_ENABLE();
 80013a8:	2300      	movs	r3, #0
 80013aa:	613b      	str	r3, [r7, #16]
 80013ac:	4b23      	ldr	r3, [pc, #140]	; (800143c <HAL_UART_MspInit+0x9c>)
 80013ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b0:	4a22      	ldr	r2, [pc, #136]	; (800143c <HAL_UART_MspInit+0x9c>)
 80013b2:	f043 0308 	orr.w	r3, r3, #8
 80013b6:	6313      	str	r3, [r2, #48]	; 0x30
 80013b8:	4b20      	ldr	r3, [pc, #128]	; (800143c <HAL_UART_MspInit+0x9c>)
 80013ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013bc:	f003 0308 	and.w	r3, r3, #8
 80013c0:	613b      	str	r3, [r7, #16]
 80013c2:	693b      	ldr	r3, [r7, #16]
  USARTx_RX_GPIO_CLK_ENABLE();
 80013c4:	2300      	movs	r3, #0
 80013c6:	60fb      	str	r3, [r7, #12]
 80013c8:	4b1c      	ldr	r3, [pc, #112]	; (800143c <HAL_UART_MspInit+0x9c>)
 80013ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013cc:	4a1b      	ldr	r2, [pc, #108]	; (800143c <HAL_UART_MspInit+0x9c>)
 80013ce:	f043 0308 	orr.w	r3, r3, #8
 80013d2:	6313      	str	r3, [r2, #48]	; 0x30
 80013d4:	4b19      	ldr	r3, [pc, #100]	; (800143c <HAL_UART_MspInit+0x9c>)
 80013d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d8:	f003 0308 	and.w	r3, r3, #8
 80013dc:	60fb      	str	r3, [r7, #12]
 80013de:	68fb      	ldr	r3, [r7, #12]


  /* Enable USARTx clock */
  USARTx_CLK_ENABLE();
 80013e0:	2300      	movs	r3, #0
 80013e2:	60bb      	str	r3, [r7, #8]
 80013e4:	4b15      	ldr	r3, [pc, #84]	; (800143c <HAL_UART_MspInit+0x9c>)
 80013e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e8:	4a14      	ldr	r2, [pc, #80]	; (800143c <HAL_UART_MspInit+0x9c>)
 80013ea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013ee:	6413      	str	r3, [r2, #64]	; 0x40
 80013f0:	4b12      	ldr	r3, [pc, #72]	; (800143c <HAL_UART_MspInit+0x9c>)
 80013f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013f8:	60bb      	str	r3, [r7, #8]
 80013fa:	68bb      	ldr	r3, [r7, #8]

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* UART TX GPIO pin configuration  */
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
 80013fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001400:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8001402:	2302      	movs	r3, #2
 8001404:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8001406:	2301      	movs	r3, #1
 8001408:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 800140a:	2303      	movs	r3, #3
 800140c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
 800140e:	2307      	movs	r3, #7
 8001410:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 8001412:	f107 0314 	add.w	r3, r7, #20
 8001416:	4619      	mov	r1, r3
 8001418:	4809      	ldr	r0, [pc, #36]	; (8001440 <HAL_UART_MspInit+0xa0>)
 800141a:	f7ff fdc9 	bl	8000fb0 <HAL_GPIO_Init>

  /* UART RX GPIO pin configuration  */
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 800141e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001422:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = USARTx_RX_AF;
 8001424:	2307      	movs	r3, #7
 8001426:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 8001428:	f107 0314 	add.w	r3, r7, #20
 800142c:	4619      	mov	r1, r3
 800142e:	4804      	ldr	r0, [pc, #16]	; (8001440 <HAL_UART_MspInit+0xa0>)
 8001430:	f7ff fdbe 	bl	8000fb0 <HAL_GPIO_Init>
}
 8001434:	bf00      	nop
 8001436:	3728      	adds	r7, #40	; 0x28
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	40023800 	.word	0x40023800
 8001440:	40020c00 	.word	0x40020c00

08001444 <HAL_MspInit>:
  * @note   This function is called from HAL_Init() function to perform system
  *         level initialization (GPIOs, clock, DMA, interrupt).
  * @retval None
  */
void HAL_MspInit(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0

}
 8001448:	bf00      	nop
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
	...

08001454 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800145a:	2300      	movs	r3, #0
 800145c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800145e:	2300      	movs	r3, #0
 8001460:	603b      	str	r3, [r7, #0]
 8001462:	4b20      	ldr	r3, [pc, #128]	; (80014e4 <HAL_PWREx_EnableOverDrive+0x90>)
 8001464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001466:	4a1f      	ldr	r2, [pc, #124]	; (80014e4 <HAL_PWREx_EnableOverDrive+0x90>)
 8001468:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800146c:	6413      	str	r3, [r2, #64]	; 0x40
 800146e:	4b1d      	ldr	r3, [pc, #116]	; (80014e4 <HAL_PWREx_EnableOverDrive+0x90>)
 8001470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001472:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001476:	603b      	str	r3, [r7, #0]
 8001478:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800147a:	4b1b      	ldr	r3, [pc, #108]	; (80014e8 <HAL_PWREx_EnableOverDrive+0x94>)
 800147c:	2201      	movs	r2, #1
 800147e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001480:	f7ff fc54 	bl	8000d2c <HAL_GetTick>
 8001484:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001486:	e009      	b.n	800149c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001488:	f7ff fc50 	bl	8000d2c <HAL_GetTick>
 800148c:	4602      	mov	r2, r0
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	1ad3      	subs	r3, r2, r3
 8001492:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001496:	d901      	bls.n	800149c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001498:	2303      	movs	r3, #3
 800149a:	e01f      	b.n	80014dc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800149c:	4b13      	ldr	r3, [pc, #76]	; (80014ec <HAL_PWREx_EnableOverDrive+0x98>)
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014a8:	d1ee      	bne.n	8001488 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80014aa:	4b11      	ldr	r3, [pc, #68]	; (80014f0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80014ac:	2201      	movs	r2, #1
 80014ae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014b0:	f7ff fc3c 	bl	8000d2c <HAL_GetTick>
 80014b4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80014b6:	e009      	b.n	80014cc <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80014b8:	f7ff fc38 	bl	8000d2c <HAL_GetTick>
 80014bc:	4602      	mov	r2, r0
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80014c6:	d901      	bls.n	80014cc <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80014c8:	2303      	movs	r3, #3
 80014ca:	e007      	b.n	80014dc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80014cc:	4b07      	ldr	r3, [pc, #28]	; (80014ec <HAL_PWREx_EnableOverDrive+0x98>)
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80014d8:	d1ee      	bne.n	80014b8 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80014da:	2300      	movs	r3, #0
}
 80014dc:	4618      	mov	r0, r3
 80014de:	3708      	adds	r7, #8
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	40023800 	.word	0x40023800
 80014e8:	420e0040 	.word	0x420e0040
 80014ec:	40007000 	.word	0x40007000
 80014f0:	420e0044 	.word	0x420e0044

080014f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b086      	sub	sp, #24
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d101      	bne.n	8001506 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
 8001504:	e267      	b.n	80019d6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f003 0301 	and.w	r3, r3, #1
 800150e:	2b00      	cmp	r3, #0
 8001510:	d075      	beq.n	80015fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001512:	4b88      	ldr	r3, [pc, #544]	; (8001734 <HAL_RCC_OscConfig+0x240>)
 8001514:	689b      	ldr	r3, [r3, #8]
 8001516:	f003 030c 	and.w	r3, r3, #12
 800151a:	2b04      	cmp	r3, #4
 800151c:	d00c      	beq.n	8001538 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800151e:	4b85      	ldr	r3, [pc, #532]	; (8001734 <HAL_RCC_OscConfig+0x240>)
 8001520:	689b      	ldr	r3, [r3, #8]
 8001522:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001526:	2b08      	cmp	r3, #8
 8001528:	d112      	bne.n	8001550 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800152a:	4b82      	ldr	r3, [pc, #520]	; (8001734 <HAL_RCC_OscConfig+0x240>)
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001532:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001536:	d10b      	bne.n	8001550 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001538:	4b7e      	ldr	r3, [pc, #504]	; (8001734 <HAL_RCC_OscConfig+0x240>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001540:	2b00      	cmp	r3, #0
 8001542:	d05b      	beq.n	80015fc <HAL_RCC_OscConfig+0x108>
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d157      	bne.n	80015fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800154c:	2301      	movs	r3, #1
 800154e:	e242      	b.n	80019d6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001558:	d106      	bne.n	8001568 <HAL_RCC_OscConfig+0x74>
 800155a:	4b76      	ldr	r3, [pc, #472]	; (8001734 <HAL_RCC_OscConfig+0x240>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4a75      	ldr	r2, [pc, #468]	; (8001734 <HAL_RCC_OscConfig+0x240>)
 8001560:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001564:	6013      	str	r3, [r2, #0]
 8001566:	e01d      	b.n	80015a4 <HAL_RCC_OscConfig+0xb0>
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001570:	d10c      	bne.n	800158c <HAL_RCC_OscConfig+0x98>
 8001572:	4b70      	ldr	r3, [pc, #448]	; (8001734 <HAL_RCC_OscConfig+0x240>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a6f      	ldr	r2, [pc, #444]	; (8001734 <HAL_RCC_OscConfig+0x240>)
 8001578:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800157c:	6013      	str	r3, [r2, #0]
 800157e:	4b6d      	ldr	r3, [pc, #436]	; (8001734 <HAL_RCC_OscConfig+0x240>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a6c      	ldr	r2, [pc, #432]	; (8001734 <HAL_RCC_OscConfig+0x240>)
 8001584:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001588:	6013      	str	r3, [r2, #0]
 800158a:	e00b      	b.n	80015a4 <HAL_RCC_OscConfig+0xb0>
 800158c:	4b69      	ldr	r3, [pc, #420]	; (8001734 <HAL_RCC_OscConfig+0x240>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a68      	ldr	r2, [pc, #416]	; (8001734 <HAL_RCC_OscConfig+0x240>)
 8001592:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001596:	6013      	str	r3, [r2, #0]
 8001598:	4b66      	ldr	r3, [pc, #408]	; (8001734 <HAL_RCC_OscConfig+0x240>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a65      	ldr	r2, [pc, #404]	; (8001734 <HAL_RCC_OscConfig+0x240>)
 800159e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d013      	beq.n	80015d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ac:	f7ff fbbe 	bl	8000d2c <HAL_GetTick>
 80015b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015b2:	e008      	b.n	80015c6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015b4:	f7ff fbba 	bl	8000d2c <HAL_GetTick>
 80015b8:	4602      	mov	r2, r0
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	2b64      	cmp	r3, #100	; 0x64
 80015c0:	d901      	bls.n	80015c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80015c2:	2303      	movs	r3, #3
 80015c4:	e207      	b.n	80019d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015c6:	4b5b      	ldr	r3, [pc, #364]	; (8001734 <HAL_RCC_OscConfig+0x240>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d0f0      	beq.n	80015b4 <HAL_RCC_OscConfig+0xc0>
 80015d2:	e014      	b.n	80015fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015d4:	f7ff fbaa 	bl	8000d2c <HAL_GetTick>
 80015d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015da:	e008      	b.n	80015ee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015dc:	f7ff fba6 	bl	8000d2c <HAL_GetTick>
 80015e0:	4602      	mov	r2, r0
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	1ad3      	subs	r3, r2, r3
 80015e6:	2b64      	cmp	r3, #100	; 0x64
 80015e8:	d901      	bls.n	80015ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80015ea:	2303      	movs	r3, #3
 80015ec:	e1f3      	b.n	80019d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015ee:	4b51      	ldr	r3, [pc, #324]	; (8001734 <HAL_RCC_OscConfig+0x240>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d1f0      	bne.n	80015dc <HAL_RCC_OscConfig+0xe8>
 80015fa:	e000      	b.n	80015fe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f003 0302 	and.w	r3, r3, #2
 8001606:	2b00      	cmp	r3, #0
 8001608:	d063      	beq.n	80016d2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800160a:	4b4a      	ldr	r3, [pc, #296]	; (8001734 <HAL_RCC_OscConfig+0x240>)
 800160c:	689b      	ldr	r3, [r3, #8]
 800160e:	f003 030c 	and.w	r3, r3, #12
 8001612:	2b00      	cmp	r3, #0
 8001614:	d00b      	beq.n	800162e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001616:	4b47      	ldr	r3, [pc, #284]	; (8001734 <HAL_RCC_OscConfig+0x240>)
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800161e:	2b08      	cmp	r3, #8
 8001620:	d11c      	bne.n	800165c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001622:	4b44      	ldr	r3, [pc, #272]	; (8001734 <HAL_RCC_OscConfig+0x240>)
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800162a:	2b00      	cmp	r3, #0
 800162c:	d116      	bne.n	800165c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800162e:	4b41      	ldr	r3, [pc, #260]	; (8001734 <HAL_RCC_OscConfig+0x240>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f003 0302 	and.w	r3, r3, #2
 8001636:	2b00      	cmp	r3, #0
 8001638:	d005      	beq.n	8001646 <HAL_RCC_OscConfig+0x152>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	68db      	ldr	r3, [r3, #12]
 800163e:	2b01      	cmp	r3, #1
 8001640:	d001      	beq.n	8001646 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	e1c7      	b.n	80019d6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001646:	4b3b      	ldr	r3, [pc, #236]	; (8001734 <HAL_RCC_OscConfig+0x240>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	691b      	ldr	r3, [r3, #16]
 8001652:	00db      	lsls	r3, r3, #3
 8001654:	4937      	ldr	r1, [pc, #220]	; (8001734 <HAL_RCC_OscConfig+0x240>)
 8001656:	4313      	orrs	r3, r2
 8001658:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800165a:	e03a      	b.n	80016d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	68db      	ldr	r3, [r3, #12]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d020      	beq.n	80016a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001664:	4b34      	ldr	r3, [pc, #208]	; (8001738 <HAL_RCC_OscConfig+0x244>)
 8001666:	2201      	movs	r2, #1
 8001668:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800166a:	f7ff fb5f 	bl	8000d2c <HAL_GetTick>
 800166e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001670:	e008      	b.n	8001684 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001672:	f7ff fb5b 	bl	8000d2c <HAL_GetTick>
 8001676:	4602      	mov	r2, r0
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	1ad3      	subs	r3, r2, r3
 800167c:	2b02      	cmp	r3, #2
 800167e:	d901      	bls.n	8001684 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001680:	2303      	movs	r3, #3
 8001682:	e1a8      	b.n	80019d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001684:	4b2b      	ldr	r3, [pc, #172]	; (8001734 <HAL_RCC_OscConfig+0x240>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f003 0302 	and.w	r3, r3, #2
 800168c:	2b00      	cmp	r3, #0
 800168e:	d0f0      	beq.n	8001672 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001690:	4b28      	ldr	r3, [pc, #160]	; (8001734 <HAL_RCC_OscConfig+0x240>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	691b      	ldr	r3, [r3, #16]
 800169c:	00db      	lsls	r3, r3, #3
 800169e:	4925      	ldr	r1, [pc, #148]	; (8001734 <HAL_RCC_OscConfig+0x240>)
 80016a0:	4313      	orrs	r3, r2
 80016a2:	600b      	str	r3, [r1, #0]
 80016a4:	e015      	b.n	80016d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016a6:	4b24      	ldr	r3, [pc, #144]	; (8001738 <HAL_RCC_OscConfig+0x244>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016ac:	f7ff fb3e 	bl	8000d2c <HAL_GetTick>
 80016b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016b2:	e008      	b.n	80016c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016b4:	f7ff fb3a 	bl	8000d2c <HAL_GetTick>
 80016b8:	4602      	mov	r2, r0
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	2b02      	cmp	r3, #2
 80016c0:	d901      	bls.n	80016c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80016c2:	2303      	movs	r3, #3
 80016c4:	e187      	b.n	80019d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016c6:	4b1b      	ldr	r3, [pc, #108]	; (8001734 <HAL_RCC_OscConfig+0x240>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 0302 	and.w	r3, r3, #2
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d1f0      	bne.n	80016b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f003 0308 	and.w	r3, r3, #8
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d036      	beq.n	800174c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	695b      	ldr	r3, [r3, #20]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d016      	beq.n	8001714 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016e6:	4b15      	ldr	r3, [pc, #84]	; (800173c <HAL_RCC_OscConfig+0x248>)
 80016e8:	2201      	movs	r2, #1
 80016ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016ec:	f7ff fb1e 	bl	8000d2c <HAL_GetTick>
 80016f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016f2:	e008      	b.n	8001706 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016f4:	f7ff fb1a 	bl	8000d2c <HAL_GetTick>
 80016f8:	4602      	mov	r2, r0
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	2b02      	cmp	r3, #2
 8001700:	d901      	bls.n	8001706 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001702:	2303      	movs	r3, #3
 8001704:	e167      	b.n	80019d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001706:	4b0b      	ldr	r3, [pc, #44]	; (8001734 <HAL_RCC_OscConfig+0x240>)
 8001708:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800170a:	f003 0302 	and.w	r3, r3, #2
 800170e:	2b00      	cmp	r3, #0
 8001710:	d0f0      	beq.n	80016f4 <HAL_RCC_OscConfig+0x200>
 8001712:	e01b      	b.n	800174c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001714:	4b09      	ldr	r3, [pc, #36]	; (800173c <HAL_RCC_OscConfig+0x248>)
 8001716:	2200      	movs	r2, #0
 8001718:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800171a:	f7ff fb07 	bl	8000d2c <HAL_GetTick>
 800171e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001720:	e00e      	b.n	8001740 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001722:	f7ff fb03 	bl	8000d2c <HAL_GetTick>
 8001726:	4602      	mov	r2, r0
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	1ad3      	subs	r3, r2, r3
 800172c:	2b02      	cmp	r3, #2
 800172e:	d907      	bls.n	8001740 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001730:	2303      	movs	r3, #3
 8001732:	e150      	b.n	80019d6 <HAL_RCC_OscConfig+0x4e2>
 8001734:	40023800 	.word	0x40023800
 8001738:	42470000 	.word	0x42470000
 800173c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001740:	4b88      	ldr	r3, [pc, #544]	; (8001964 <HAL_RCC_OscConfig+0x470>)
 8001742:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001744:	f003 0302 	and.w	r3, r3, #2
 8001748:	2b00      	cmp	r3, #0
 800174a:	d1ea      	bne.n	8001722 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f003 0304 	and.w	r3, r3, #4
 8001754:	2b00      	cmp	r3, #0
 8001756:	f000 8097 	beq.w	8001888 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800175a:	2300      	movs	r3, #0
 800175c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800175e:	4b81      	ldr	r3, [pc, #516]	; (8001964 <HAL_RCC_OscConfig+0x470>)
 8001760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001762:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001766:	2b00      	cmp	r3, #0
 8001768:	d10f      	bne.n	800178a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800176a:	2300      	movs	r3, #0
 800176c:	60bb      	str	r3, [r7, #8]
 800176e:	4b7d      	ldr	r3, [pc, #500]	; (8001964 <HAL_RCC_OscConfig+0x470>)
 8001770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001772:	4a7c      	ldr	r2, [pc, #496]	; (8001964 <HAL_RCC_OscConfig+0x470>)
 8001774:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001778:	6413      	str	r3, [r2, #64]	; 0x40
 800177a:	4b7a      	ldr	r3, [pc, #488]	; (8001964 <HAL_RCC_OscConfig+0x470>)
 800177c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001782:	60bb      	str	r3, [r7, #8]
 8001784:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001786:	2301      	movs	r3, #1
 8001788:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800178a:	4b77      	ldr	r3, [pc, #476]	; (8001968 <HAL_RCC_OscConfig+0x474>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001792:	2b00      	cmp	r3, #0
 8001794:	d118      	bne.n	80017c8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001796:	4b74      	ldr	r3, [pc, #464]	; (8001968 <HAL_RCC_OscConfig+0x474>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a73      	ldr	r2, [pc, #460]	; (8001968 <HAL_RCC_OscConfig+0x474>)
 800179c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017a2:	f7ff fac3 	bl	8000d2c <HAL_GetTick>
 80017a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017a8:	e008      	b.n	80017bc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017aa:	f7ff fabf 	bl	8000d2c <HAL_GetTick>
 80017ae:	4602      	mov	r2, r0
 80017b0:	693b      	ldr	r3, [r7, #16]
 80017b2:	1ad3      	subs	r3, r2, r3
 80017b4:	2b02      	cmp	r3, #2
 80017b6:	d901      	bls.n	80017bc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80017b8:	2303      	movs	r3, #3
 80017ba:	e10c      	b.n	80019d6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017bc:	4b6a      	ldr	r3, [pc, #424]	; (8001968 <HAL_RCC_OscConfig+0x474>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d0f0      	beq.n	80017aa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	d106      	bne.n	80017de <HAL_RCC_OscConfig+0x2ea>
 80017d0:	4b64      	ldr	r3, [pc, #400]	; (8001964 <HAL_RCC_OscConfig+0x470>)
 80017d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017d4:	4a63      	ldr	r2, [pc, #396]	; (8001964 <HAL_RCC_OscConfig+0x470>)
 80017d6:	f043 0301 	orr.w	r3, r3, #1
 80017da:	6713      	str	r3, [r2, #112]	; 0x70
 80017dc:	e01c      	b.n	8001818 <HAL_RCC_OscConfig+0x324>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	2b05      	cmp	r3, #5
 80017e4:	d10c      	bne.n	8001800 <HAL_RCC_OscConfig+0x30c>
 80017e6:	4b5f      	ldr	r3, [pc, #380]	; (8001964 <HAL_RCC_OscConfig+0x470>)
 80017e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017ea:	4a5e      	ldr	r2, [pc, #376]	; (8001964 <HAL_RCC_OscConfig+0x470>)
 80017ec:	f043 0304 	orr.w	r3, r3, #4
 80017f0:	6713      	str	r3, [r2, #112]	; 0x70
 80017f2:	4b5c      	ldr	r3, [pc, #368]	; (8001964 <HAL_RCC_OscConfig+0x470>)
 80017f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017f6:	4a5b      	ldr	r2, [pc, #364]	; (8001964 <HAL_RCC_OscConfig+0x470>)
 80017f8:	f043 0301 	orr.w	r3, r3, #1
 80017fc:	6713      	str	r3, [r2, #112]	; 0x70
 80017fe:	e00b      	b.n	8001818 <HAL_RCC_OscConfig+0x324>
 8001800:	4b58      	ldr	r3, [pc, #352]	; (8001964 <HAL_RCC_OscConfig+0x470>)
 8001802:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001804:	4a57      	ldr	r2, [pc, #348]	; (8001964 <HAL_RCC_OscConfig+0x470>)
 8001806:	f023 0301 	bic.w	r3, r3, #1
 800180a:	6713      	str	r3, [r2, #112]	; 0x70
 800180c:	4b55      	ldr	r3, [pc, #340]	; (8001964 <HAL_RCC_OscConfig+0x470>)
 800180e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001810:	4a54      	ldr	r2, [pc, #336]	; (8001964 <HAL_RCC_OscConfig+0x470>)
 8001812:	f023 0304 	bic.w	r3, r3, #4
 8001816:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d015      	beq.n	800184c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001820:	f7ff fa84 	bl	8000d2c <HAL_GetTick>
 8001824:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001826:	e00a      	b.n	800183e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001828:	f7ff fa80 	bl	8000d2c <HAL_GetTick>
 800182c:	4602      	mov	r2, r0
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	f241 3288 	movw	r2, #5000	; 0x1388
 8001836:	4293      	cmp	r3, r2
 8001838:	d901      	bls.n	800183e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800183a:	2303      	movs	r3, #3
 800183c:	e0cb      	b.n	80019d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800183e:	4b49      	ldr	r3, [pc, #292]	; (8001964 <HAL_RCC_OscConfig+0x470>)
 8001840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001842:	f003 0302 	and.w	r3, r3, #2
 8001846:	2b00      	cmp	r3, #0
 8001848:	d0ee      	beq.n	8001828 <HAL_RCC_OscConfig+0x334>
 800184a:	e014      	b.n	8001876 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800184c:	f7ff fa6e 	bl	8000d2c <HAL_GetTick>
 8001850:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001852:	e00a      	b.n	800186a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001854:	f7ff fa6a 	bl	8000d2c <HAL_GetTick>
 8001858:	4602      	mov	r2, r0
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001862:	4293      	cmp	r3, r2
 8001864:	d901      	bls.n	800186a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001866:	2303      	movs	r3, #3
 8001868:	e0b5      	b.n	80019d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800186a:	4b3e      	ldr	r3, [pc, #248]	; (8001964 <HAL_RCC_OscConfig+0x470>)
 800186c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800186e:	f003 0302 	and.w	r3, r3, #2
 8001872:	2b00      	cmp	r3, #0
 8001874:	d1ee      	bne.n	8001854 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001876:	7dfb      	ldrb	r3, [r7, #23]
 8001878:	2b01      	cmp	r3, #1
 800187a:	d105      	bne.n	8001888 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800187c:	4b39      	ldr	r3, [pc, #228]	; (8001964 <HAL_RCC_OscConfig+0x470>)
 800187e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001880:	4a38      	ldr	r2, [pc, #224]	; (8001964 <HAL_RCC_OscConfig+0x470>)
 8001882:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001886:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	699b      	ldr	r3, [r3, #24]
 800188c:	2b00      	cmp	r3, #0
 800188e:	f000 80a1 	beq.w	80019d4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001892:	4b34      	ldr	r3, [pc, #208]	; (8001964 <HAL_RCC_OscConfig+0x470>)
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	f003 030c 	and.w	r3, r3, #12
 800189a:	2b08      	cmp	r3, #8
 800189c:	d05c      	beq.n	8001958 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	699b      	ldr	r3, [r3, #24]
 80018a2:	2b02      	cmp	r3, #2
 80018a4:	d141      	bne.n	800192a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018a6:	4b31      	ldr	r3, [pc, #196]	; (800196c <HAL_RCC_OscConfig+0x478>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ac:	f7ff fa3e 	bl	8000d2c <HAL_GetTick>
 80018b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018b2:	e008      	b.n	80018c6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018b4:	f7ff fa3a 	bl	8000d2c <HAL_GetTick>
 80018b8:	4602      	mov	r2, r0
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	2b02      	cmp	r3, #2
 80018c0:	d901      	bls.n	80018c6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80018c2:	2303      	movs	r3, #3
 80018c4:	e087      	b.n	80019d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018c6:	4b27      	ldr	r3, [pc, #156]	; (8001964 <HAL_RCC_OscConfig+0x470>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d1f0      	bne.n	80018b4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	69da      	ldr	r2, [r3, #28]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6a1b      	ldr	r3, [r3, #32]
 80018da:	431a      	orrs	r2, r3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018e0:	019b      	lsls	r3, r3, #6
 80018e2:	431a      	orrs	r2, r3
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018e8:	085b      	lsrs	r3, r3, #1
 80018ea:	3b01      	subs	r3, #1
 80018ec:	041b      	lsls	r3, r3, #16
 80018ee:	431a      	orrs	r2, r3
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f4:	061b      	lsls	r3, r3, #24
 80018f6:	491b      	ldr	r1, [pc, #108]	; (8001964 <HAL_RCC_OscConfig+0x470>)
 80018f8:	4313      	orrs	r3, r2
 80018fa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018fc:	4b1b      	ldr	r3, [pc, #108]	; (800196c <HAL_RCC_OscConfig+0x478>)
 80018fe:	2201      	movs	r2, #1
 8001900:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001902:	f7ff fa13 	bl	8000d2c <HAL_GetTick>
 8001906:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001908:	e008      	b.n	800191c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800190a:	f7ff fa0f 	bl	8000d2c <HAL_GetTick>
 800190e:	4602      	mov	r2, r0
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	1ad3      	subs	r3, r2, r3
 8001914:	2b02      	cmp	r3, #2
 8001916:	d901      	bls.n	800191c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001918:	2303      	movs	r3, #3
 800191a:	e05c      	b.n	80019d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800191c:	4b11      	ldr	r3, [pc, #68]	; (8001964 <HAL_RCC_OscConfig+0x470>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001924:	2b00      	cmp	r3, #0
 8001926:	d0f0      	beq.n	800190a <HAL_RCC_OscConfig+0x416>
 8001928:	e054      	b.n	80019d4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800192a:	4b10      	ldr	r3, [pc, #64]	; (800196c <HAL_RCC_OscConfig+0x478>)
 800192c:	2200      	movs	r2, #0
 800192e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001930:	f7ff f9fc 	bl	8000d2c <HAL_GetTick>
 8001934:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001936:	e008      	b.n	800194a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001938:	f7ff f9f8 	bl	8000d2c <HAL_GetTick>
 800193c:	4602      	mov	r2, r0
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	2b02      	cmp	r3, #2
 8001944:	d901      	bls.n	800194a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001946:	2303      	movs	r3, #3
 8001948:	e045      	b.n	80019d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800194a:	4b06      	ldr	r3, [pc, #24]	; (8001964 <HAL_RCC_OscConfig+0x470>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001952:	2b00      	cmp	r3, #0
 8001954:	d1f0      	bne.n	8001938 <HAL_RCC_OscConfig+0x444>
 8001956:	e03d      	b.n	80019d4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	699b      	ldr	r3, [r3, #24]
 800195c:	2b01      	cmp	r3, #1
 800195e:	d107      	bne.n	8001970 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	e038      	b.n	80019d6 <HAL_RCC_OscConfig+0x4e2>
 8001964:	40023800 	.word	0x40023800
 8001968:	40007000 	.word	0x40007000
 800196c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001970:	4b1b      	ldr	r3, [pc, #108]	; (80019e0 <HAL_RCC_OscConfig+0x4ec>)
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	699b      	ldr	r3, [r3, #24]
 800197a:	2b01      	cmp	r3, #1
 800197c:	d028      	beq.n	80019d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001988:	429a      	cmp	r2, r3
 800198a:	d121      	bne.n	80019d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001996:	429a      	cmp	r2, r3
 8001998:	d11a      	bne.n	80019d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800199a:	68fa      	ldr	r2, [r7, #12]
 800199c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80019a0:	4013      	ands	r3, r2
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80019a6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d111      	bne.n	80019d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019b6:	085b      	lsrs	r3, r3, #1
 80019b8:	3b01      	subs	r3, #1
 80019ba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80019bc:	429a      	cmp	r2, r3
 80019be:	d107      	bne.n	80019d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d001      	beq.n	80019d4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80019d0:	2301      	movs	r3, #1
 80019d2:	e000      	b.n	80019d6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80019d4:	2300      	movs	r3, #0
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	3718      	adds	r7, #24
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	40023800 	.word	0x40023800

080019e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b084      	sub	sp, #16
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
 80019ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d101      	bne.n	80019f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019f4:	2301      	movs	r3, #1
 80019f6:	e0cc      	b.n	8001b92 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019f8:	4b68      	ldr	r3, [pc, #416]	; (8001b9c <HAL_RCC_ClockConfig+0x1b8>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f003 030f 	and.w	r3, r3, #15
 8001a00:	683a      	ldr	r2, [r7, #0]
 8001a02:	429a      	cmp	r2, r3
 8001a04:	d90c      	bls.n	8001a20 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a06:	4b65      	ldr	r3, [pc, #404]	; (8001b9c <HAL_RCC_ClockConfig+0x1b8>)
 8001a08:	683a      	ldr	r2, [r7, #0]
 8001a0a:	b2d2      	uxtb	r2, r2
 8001a0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a0e:	4b63      	ldr	r3, [pc, #396]	; (8001b9c <HAL_RCC_ClockConfig+0x1b8>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 030f 	and.w	r3, r3, #15
 8001a16:	683a      	ldr	r2, [r7, #0]
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	d001      	beq.n	8001a20 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	e0b8      	b.n	8001b92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f003 0302 	and.w	r3, r3, #2
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d020      	beq.n	8001a6e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 0304 	and.w	r3, r3, #4
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d005      	beq.n	8001a44 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a38:	4b59      	ldr	r3, [pc, #356]	; (8001ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	4a58      	ldr	r2, [pc, #352]	; (8001ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a3e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001a42:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f003 0308 	and.w	r3, r3, #8
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d005      	beq.n	8001a5c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a50:	4b53      	ldr	r3, [pc, #332]	; (8001ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	4a52      	ldr	r2, [pc, #328]	; (8001ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a56:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001a5a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a5c:	4b50      	ldr	r3, [pc, #320]	; (8001ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	494d      	ldr	r1, [pc, #308]	; (8001ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 0301 	and.w	r3, r3, #1
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d044      	beq.n	8001b04 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	2b01      	cmp	r3, #1
 8001a80:	d107      	bne.n	8001a92 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a82:	4b47      	ldr	r3, [pc, #284]	; (8001ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d119      	bne.n	8001ac2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e07f      	b.n	8001b92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	2b02      	cmp	r3, #2
 8001a98:	d003      	beq.n	8001aa2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a9e:	2b03      	cmp	r3, #3
 8001aa0:	d107      	bne.n	8001ab2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001aa2:	4b3f      	ldr	r3, [pc, #252]	; (8001ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d109      	bne.n	8001ac2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e06f      	b.n	8001b92 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ab2:	4b3b      	ldr	r3, [pc, #236]	; (8001ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 0302 	and.w	r3, r3, #2
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d101      	bne.n	8001ac2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e067      	b.n	8001b92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ac2:	4b37      	ldr	r3, [pc, #220]	; (8001ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	f023 0203 	bic.w	r2, r3, #3
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	4934      	ldr	r1, [pc, #208]	; (8001ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ad4:	f7ff f92a 	bl	8000d2c <HAL_GetTick>
 8001ad8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ada:	e00a      	b.n	8001af2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001adc:	f7ff f926 	bl	8000d2c <HAL_GetTick>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d901      	bls.n	8001af2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001aee:	2303      	movs	r3, #3
 8001af0:	e04f      	b.n	8001b92 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001af2:	4b2b      	ldr	r3, [pc, #172]	; (8001ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	f003 020c 	and.w	r2, r3, #12
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	429a      	cmp	r2, r3
 8001b02:	d1eb      	bne.n	8001adc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b04:	4b25      	ldr	r3, [pc, #148]	; (8001b9c <HAL_RCC_ClockConfig+0x1b8>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 030f 	and.w	r3, r3, #15
 8001b0c:	683a      	ldr	r2, [r7, #0]
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	d20c      	bcs.n	8001b2c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b12:	4b22      	ldr	r3, [pc, #136]	; (8001b9c <HAL_RCC_ClockConfig+0x1b8>)
 8001b14:	683a      	ldr	r2, [r7, #0]
 8001b16:	b2d2      	uxtb	r2, r2
 8001b18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b1a:	4b20      	ldr	r3, [pc, #128]	; (8001b9c <HAL_RCC_ClockConfig+0x1b8>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f003 030f 	and.w	r3, r3, #15
 8001b22:	683a      	ldr	r2, [r7, #0]
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d001      	beq.n	8001b2c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e032      	b.n	8001b92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f003 0304 	and.w	r3, r3, #4
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d008      	beq.n	8001b4a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b38:	4b19      	ldr	r3, [pc, #100]	; (8001ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	4916      	ldr	r1, [pc, #88]	; (8001ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b46:	4313      	orrs	r3, r2
 8001b48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 0308 	and.w	r3, r3, #8
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d009      	beq.n	8001b6a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b56:	4b12      	ldr	r3, [pc, #72]	; (8001ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	691b      	ldr	r3, [r3, #16]
 8001b62:	00db      	lsls	r3, r3, #3
 8001b64:	490e      	ldr	r1, [pc, #56]	; (8001ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b66:	4313      	orrs	r3, r2
 8001b68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b6a:	f000 f821 	bl	8001bb0 <HAL_RCC_GetSysClockFreq>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	4b0b      	ldr	r3, [pc, #44]	; (8001ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	091b      	lsrs	r3, r3, #4
 8001b76:	f003 030f 	and.w	r3, r3, #15
 8001b7a:	490a      	ldr	r1, [pc, #40]	; (8001ba4 <HAL_RCC_ClockConfig+0x1c0>)
 8001b7c:	5ccb      	ldrb	r3, [r1, r3]
 8001b7e:	fa22 f303 	lsr.w	r3, r2, r3
 8001b82:	4a09      	ldr	r2, [pc, #36]	; (8001ba8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001b86:	4b09      	ldr	r3, [pc, #36]	; (8001bac <HAL_RCC_ClockConfig+0x1c8>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f7ff f88a 	bl	8000ca4 <HAL_InitTick>

  return HAL_OK;
 8001b90:	2300      	movs	r3, #0
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3710      	adds	r7, #16
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	40023c00 	.word	0x40023c00
 8001ba0:	40023800 	.word	0x40023800
 8001ba4:	0800325c 	.word	0x0800325c
 8001ba8:	20000010 	.word	0x20000010
 8001bac:	20000014 	.word	0x20000014

08001bb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001bb4:	b094      	sub	sp, #80	; 0x50
 8001bb6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	647b      	str	r3, [r7, #68]	; 0x44
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001bc8:	4b79      	ldr	r3, [pc, #484]	; (8001db0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	f003 030c 	and.w	r3, r3, #12
 8001bd0:	2b08      	cmp	r3, #8
 8001bd2:	d00d      	beq.n	8001bf0 <HAL_RCC_GetSysClockFreq+0x40>
 8001bd4:	2b08      	cmp	r3, #8
 8001bd6:	f200 80e1 	bhi.w	8001d9c <HAL_RCC_GetSysClockFreq+0x1ec>
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d002      	beq.n	8001be4 <HAL_RCC_GetSysClockFreq+0x34>
 8001bde:	2b04      	cmp	r3, #4
 8001be0:	d003      	beq.n	8001bea <HAL_RCC_GetSysClockFreq+0x3a>
 8001be2:	e0db      	b.n	8001d9c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001be4:	4b73      	ldr	r3, [pc, #460]	; (8001db4 <HAL_RCC_GetSysClockFreq+0x204>)
 8001be6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001be8:	e0db      	b.n	8001da2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001bea:	4b73      	ldr	r3, [pc, #460]	; (8001db8 <HAL_RCC_GetSysClockFreq+0x208>)
 8001bec:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001bee:	e0d8      	b.n	8001da2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001bf0:	4b6f      	ldr	r3, [pc, #444]	; (8001db0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001bf8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001bfa:	4b6d      	ldr	r3, [pc, #436]	; (8001db0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d063      	beq.n	8001cce <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c06:	4b6a      	ldr	r3, [pc, #424]	; (8001db0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	099b      	lsrs	r3, r3, #6
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001c10:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001c12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c18:	633b      	str	r3, [r7, #48]	; 0x30
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	637b      	str	r3, [r7, #52]	; 0x34
 8001c1e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001c22:	4622      	mov	r2, r4
 8001c24:	462b      	mov	r3, r5
 8001c26:	f04f 0000 	mov.w	r0, #0
 8001c2a:	f04f 0100 	mov.w	r1, #0
 8001c2e:	0159      	lsls	r1, r3, #5
 8001c30:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c34:	0150      	lsls	r0, r2, #5
 8001c36:	4602      	mov	r2, r0
 8001c38:	460b      	mov	r3, r1
 8001c3a:	4621      	mov	r1, r4
 8001c3c:	1a51      	subs	r1, r2, r1
 8001c3e:	6139      	str	r1, [r7, #16]
 8001c40:	4629      	mov	r1, r5
 8001c42:	eb63 0301 	sbc.w	r3, r3, r1
 8001c46:	617b      	str	r3, [r7, #20]
 8001c48:	f04f 0200 	mov.w	r2, #0
 8001c4c:	f04f 0300 	mov.w	r3, #0
 8001c50:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001c54:	4659      	mov	r1, fp
 8001c56:	018b      	lsls	r3, r1, #6
 8001c58:	4651      	mov	r1, sl
 8001c5a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c5e:	4651      	mov	r1, sl
 8001c60:	018a      	lsls	r2, r1, #6
 8001c62:	4651      	mov	r1, sl
 8001c64:	ebb2 0801 	subs.w	r8, r2, r1
 8001c68:	4659      	mov	r1, fp
 8001c6a:	eb63 0901 	sbc.w	r9, r3, r1
 8001c6e:	f04f 0200 	mov.w	r2, #0
 8001c72:	f04f 0300 	mov.w	r3, #0
 8001c76:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c7a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001c7e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001c82:	4690      	mov	r8, r2
 8001c84:	4699      	mov	r9, r3
 8001c86:	4623      	mov	r3, r4
 8001c88:	eb18 0303 	adds.w	r3, r8, r3
 8001c8c:	60bb      	str	r3, [r7, #8]
 8001c8e:	462b      	mov	r3, r5
 8001c90:	eb49 0303 	adc.w	r3, r9, r3
 8001c94:	60fb      	str	r3, [r7, #12]
 8001c96:	f04f 0200 	mov.w	r2, #0
 8001c9a:	f04f 0300 	mov.w	r3, #0
 8001c9e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001ca2:	4629      	mov	r1, r5
 8001ca4:	024b      	lsls	r3, r1, #9
 8001ca6:	4621      	mov	r1, r4
 8001ca8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001cac:	4621      	mov	r1, r4
 8001cae:	024a      	lsls	r2, r1, #9
 8001cb0:	4610      	mov	r0, r2
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	62bb      	str	r3, [r7, #40]	; 0x28
 8001cba:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001cbc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001cc0:	f7fe faee 	bl	80002a0 <__aeabi_uldivmod>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	460b      	mov	r3, r1
 8001cc8:	4613      	mov	r3, r2
 8001cca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001ccc:	e058      	b.n	8001d80 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cce:	4b38      	ldr	r3, [pc, #224]	; (8001db0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	099b      	lsrs	r3, r3, #6
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	4611      	mov	r1, r2
 8001cda:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001cde:	623b      	str	r3, [r7, #32]
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	627b      	str	r3, [r7, #36]	; 0x24
 8001ce4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001ce8:	4642      	mov	r2, r8
 8001cea:	464b      	mov	r3, r9
 8001cec:	f04f 0000 	mov.w	r0, #0
 8001cf0:	f04f 0100 	mov.w	r1, #0
 8001cf4:	0159      	lsls	r1, r3, #5
 8001cf6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001cfa:	0150      	lsls	r0, r2, #5
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	460b      	mov	r3, r1
 8001d00:	4641      	mov	r1, r8
 8001d02:	ebb2 0a01 	subs.w	sl, r2, r1
 8001d06:	4649      	mov	r1, r9
 8001d08:	eb63 0b01 	sbc.w	fp, r3, r1
 8001d0c:	f04f 0200 	mov.w	r2, #0
 8001d10:	f04f 0300 	mov.w	r3, #0
 8001d14:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001d18:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001d1c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001d20:	ebb2 040a 	subs.w	r4, r2, sl
 8001d24:	eb63 050b 	sbc.w	r5, r3, fp
 8001d28:	f04f 0200 	mov.w	r2, #0
 8001d2c:	f04f 0300 	mov.w	r3, #0
 8001d30:	00eb      	lsls	r3, r5, #3
 8001d32:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d36:	00e2      	lsls	r2, r4, #3
 8001d38:	4614      	mov	r4, r2
 8001d3a:	461d      	mov	r5, r3
 8001d3c:	4643      	mov	r3, r8
 8001d3e:	18e3      	adds	r3, r4, r3
 8001d40:	603b      	str	r3, [r7, #0]
 8001d42:	464b      	mov	r3, r9
 8001d44:	eb45 0303 	adc.w	r3, r5, r3
 8001d48:	607b      	str	r3, [r7, #4]
 8001d4a:	f04f 0200 	mov.w	r2, #0
 8001d4e:	f04f 0300 	mov.w	r3, #0
 8001d52:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d56:	4629      	mov	r1, r5
 8001d58:	028b      	lsls	r3, r1, #10
 8001d5a:	4621      	mov	r1, r4
 8001d5c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d60:	4621      	mov	r1, r4
 8001d62:	028a      	lsls	r2, r1, #10
 8001d64:	4610      	mov	r0, r2
 8001d66:	4619      	mov	r1, r3
 8001d68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	61bb      	str	r3, [r7, #24]
 8001d6e:	61fa      	str	r2, [r7, #28]
 8001d70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d74:	f7fe fa94 	bl	80002a0 <__aeabi_uldivmod>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	460b      	mov	r3, r1
 8001d7c:	4613      	mov	r3, r2
 8001d7e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001d80:	4b0b      	ldr	r3, [pc, #44]	; (8001db0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	0c1b      	lsrs	r3, r3, #16
 8001d86:	f003 0303 	and.w	r3, r3, #3
 8001d8a:	3301      	adds	r3, #1
 8001d8c:	005b      	lsls	r3, r3, #1
 8001d8e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001d90:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001d92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d94:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d98:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001d9a:	e002      	b.n	8001da2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d9c:	4b05      	ldr	r3, [pc, #20]	; (8001db4 <HAL_RCC_GetSysClockFreq+0x204>)
 8001d9e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001da0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001da2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3750      	adds	r7, #80	; 0x50
 8001da8:	46bd      	mov	sp, r7
 8001daa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001dae:	bf00      	nop
 8001db0:	40023800 	.word	0x40023800
 8001db4:	00f42400 	.word	0x00f42400
 8001db8:	007a1200 	.word	0x007a1200

08001dbc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001dc0:	4b03      	ldr	r3, [pc, #12]	; (8001dd0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	20000010 	.word	0x20000010

08001dd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001dd8:	f7ff fff0 	bl	8001dbc <HAL_RCC_GetHCLKFreq>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	4b05      	ldr	r3, [pc, #20]	; (8001df4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	0a9b      	lsrs	r3, r3, #10
 8001de4:	f003 0307 	and.w	r3, r3, #7
 8001de8:	4903      	ldr	r1, [pc, #12]	; (8001df8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001dea:	5ccb      	ldrb	r3, [r1, r3]
 8001dec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	40023800 	.word	0x40023800
 8001df8:	0800326c 	.word	0x0800326c

08001dfc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001e00:	f7ff ffdc 	bl	8001dbc <HAL_RCC_GetHCLKFreq>
 8001e04:	4602      	mov	r2, r0
 8001e06:	4b05      	ldr	r3, [pc, #20]	; (8001e1c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	0b5b      	lsrs	r3, r3, #13
 8001e0c:	f003 0307 	and.w	r3, r3, #7
 8001e10:	4903      	ldr	r1, [pc, #12]	; (8001e20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e12:	5ccb      	ldrb	r3, [r1, r3]
 8001e14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	40023800 	.word	0x40023800
 8001e20:	0800326c 	.word	0x0800326c

08001e24 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d101      	bne.n	8001e36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e03f      	b.n	8001eb6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d106      	bne.n	8001e50 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2200      	movs	r2, #0
 8001e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f7ff faa8 	bl	80013a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2224      	movs	r2, #36	; 0x24
 8001e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	68da      	ldr	r2, [r3, #12]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e66:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	f000 f929 	bl	80020c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	691a      	ldr	r2, [r3, #16]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001e7c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	695a      	ldr	r2, [r3, #20]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001e8c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	68da      	ldr	r2, [r3, #12]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001e9c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2220      	movs	r2, #32
 8001ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2220      	movs	r2, #32
 8001eb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001eb4:	2300      	movs	r3, #0
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3708      	adds	r7, #8
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}

08001ebe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ebe:	b580      	push	{r7, lr}
 8001ec0:	b08a      	sub	sp, #40	; 0x28
 8001ec2:	af02      	add	r7, sp, #8
 8001ec4:	60f8      	str	r0, [r7, #12]
 8001ec6:	60b9      	str	r1, [r7, #8]
 8001ec8:	603b      	str	r3, [r7, #0]
 8001eca:	4613      	mov	r3, r2
 8001ecc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	2b20      	cmp	r3, #32
 8001edc:	d17c      	bne.n	8001fd8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d002      	beq.n	8001eea <HAL_UART_Transmit+0x2c>
 8001ee4:	88fb      	ldrh	r3, [r7, #6]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d101      	bne.n	8001eee <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e075      	b.n	8001fda <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d101      	bne.n	8001efc <HAL_UART_Transmit+0x3e>
 8001ef8:	2302      	movs	r3, #2
 8001efa:	e06e      	b.n	8001fda <HAL_UART_Transmit+0x11c>
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	2201      	movs	r2, #1
 8001f00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	2200      	movs	r2, #0
 8001f08:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	2221      	movs	r2, #33	; 0x21
 8001f0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001f12:	f7fe ff0b 	bl	8000d2c <HAL_GetTick>
 8001f16:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	88fa      	ldrh	r2, [r7, #6]
 8001f1c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	88fa      	ldrh	r2, [r7, #6]
 8001f22:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f2c:	d108      	bne.n	8001f40 <HAL_UART_Transmit+0x82>
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	691b      	ldr	r3, [r3, #16]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d104      	bne.n	8001f40 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001f36:	2300      	movs	r3, #0
 8001f38:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001f3a:	68bb      	ldr	r3, [r7, #8]
 8001f3c:	61bb      	str	r3, [r7, #24]
 8001f3e:	e003      	b.n	8001f48 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001f44:	2300      	movs	r3, #0
 8001f46:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001f50:	e02a      	b.n	8001fa8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	9300      	str	r3, [sp, #0]
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	2180      	movs	r1, #128	; 0x80
 8001f5c:	68f8      	ldr	r0, [r7, #12]
 8001f5e:	f000 f840 	bl	8001fe2 <UART_WaitOnFlagUntilTimeout>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d001      	beq.n	8001f6c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001f68:	2303      	movs	r3, #3
 8001f6a:	e036      	b.n	8001fda <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001f6c:	69fb      	ldr	r3, [r7, #28]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d10b      	bne.n	8001f8a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001f72:	69bb      	ldr	r3, [r7, #24]
 8001f74:	881b      	ldrh	r3, [r3, #0]
 8001f76:	461a      	mov	r2, r3
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001f80:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001f82:	69bb      	ldr	r3, [r7, #24]
 8001f84:	3302      	adds	r3, #2
 8001f86:	61bb      	str	r3, [r7, #24]
 8001f88:	e007      	b.n	8001f9a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	781a      	ldrb	r2, [r3, #0]
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001f94:	69fb      	ldr	r3, [r7, #28]
 8001f96:	3301      	adds	r3, #1
 8001f98:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001f9e:	b29b      	uxth	r3, r3
 8001fa0:	3b01      	subs	r3, #1
 8001fa2:	b29a      	uxth	r2, r3
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001fac:	b29b      	uxth	r3, r3
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d1cf      	bne.n	8001f52 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	9300      	str	r3, [sp, #0]
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	2140      	movs	r1, #64	; 0x40
 8001fbc:	68f8      	ldr	r0, [r7, #12]
 8001fbe:	f000 f810 	bl	8001fe2 <UART_WaitOnFlagUntilTimeout>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d001      	beq.n	8001fcc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001fc8:	2303      	movs	r3, #3
 8001fca:	e006      	b.n	8001fda <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	2220      	movs	r2, #32
 8001fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	e000      	b.n	8001fda <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001fd8:	2302      	movs	r3, #2
  }
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3720      	adds	r7, #32
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}

08001fe2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001fe2:	b580      	push	{r7, lr}
 8001fe4:	b090      	sub	sp, #64	; 0x40
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	60f8      	str	r0, [r7, #12]
 8001fea:	60b9      	str	r1, [r7, #8]
 8001fec:	603b      	str	r3, [r7, #0]
 8001fee:	4613      	mov	r3, r2
 8001ff0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001ff2:	e050      	b.n	8002096 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ff4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ff6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ffa:	d04c      	beq.n	8002096 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001ffc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d007      	beq.n	8002012 <UART_WaitOnFlagUntilTimeout+0x30>
 8002002:	f7fe fe93 	bl	8000d2c <HAL_GetTick>
 8002006:	4602      	mov	r2, r0
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	1ad3      	subs	r3, r2, r3
 800200c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800200e:	429a      	cmp	r2, r3
 8002010:	d241      	bcs.n	8002096 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	330c      	adds	r3, #12
 8002018:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800201a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800201c:	e853 3f00 	ldrex	r3, [r3]
 8002020:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002024:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002028:	63fb      	str	r3, [r7, #60]	; 0x3c
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	330c      	adds	r3, #12
 8002030:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002032:	637a      	str	r2, [r7, #52]	; 0x34
 8002034:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002036:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002038:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800203a:	e841 2300 	strex	r3, r2, [r1]
 800203e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002042:	2b00      	cmp	r3, #0
 8002044:	d1e5      	bne.n	8002012 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	3314      	adds	r3, #20
 800204c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	e853 3f00 	ldrex	r3, [r3]
 8002054:	613b      	str	r3, [r7, #16]
   return(result);
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	f023 0301 	bic.w	r3, r3, #1
 800205c:	63bb      	str	r3, [r7, #56]	; 0x38
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	3314      	adds	r3, #20
 8002064:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002066:	623a      	str	r2, [r7, #32]
 8002068:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800206a:	69f9      	ldr	r1, [r7, #28]
 800206c:	6a3a      	ldr	r2, [r7, #32]
 800206e:	e841 2300 	strex	r3, r2, [r1]
 8002072:	61bb      	str	r3, [r7, #24]
   return(result);
 8002074:	69bb      	ldr	r3, [r7, #24]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d1e5      	bne.n	8002046 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	2220      	movs	r2, #32
 800207e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	2220      	movs	r2, #32
 8002086:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	2200      	movs	r2, #0
 800208e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002092:	2303      	movs	r3, #3
 8002094:	e00f      	b.n	80020b6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	4013      	ands	r3, r2
 80020a0:	68ba      	ldr	r2, [r7, #8]
 80020a2:	429a      	cmp	r2, r3
 80020a4:	bf0c      	ite	eq
 80020a6:	2301      	moveq	r3, #1
 80020a8:	2300      	movne	r3, #0
 80020aa:	b2db      	uxtb	r3, r3
 80020ac:	461a      	mov	r2, r3
 80020ae:	79fb      	ldrb	r3, [r7, #7]
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d09f      	beq.n	8001ff4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80020b4:	2300      	movs	r3, #0
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3740      	adds	r7, #64	; 0x40
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
	...

080020c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80020c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80020c4:	b0c0      	sub	sp, #256	; 0x100
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80020cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	691b      	ldr	r3, [r3, #16]
 80020d4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80020d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020dc:	68d9      	ldr	r1, [r3, #12]
 80020de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	ea40 0301 	orr.w	r3, r0, r1
 80020e8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80020ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020ee:	689a      	ldr	r2, [r3, #8]
 80020f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020f4:	691b      	ldr	r3, [r3, #16]
 80020f6:	431a      	orrs	r2, r3
 80020f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020fc:	695b      	ldr	r3, [r3, #20]
 80020fe:	431a      	orrs	r2, r3
 8002100:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002104:	69db      	ldr	r3, [r3, #28]
 8002106:	4313      	orrs	r3, r2
 8002108:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800210c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002118:	f021 010c 	bic.w	r1, r1, #12
 800211c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002126:	430b      	orrs	r3, r1
 8002128:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800212a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	695b      	ldr	r3, [r3, #20]
 8002132:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002136:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800213a:	6999      	ldr	r1, [r3, #24]
 800213c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	ea40 0301 	orr.w	r3, r0, r1
 8002146:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002148:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	4b8f      	ldr	r3, [pc, #572]	; (800238c <UART_SetConfig+0x2cc>)
 8002150:	429a      	cmp	r2, r3
 8002152:	d005      	beq.n	8002160 <UART_SetConfig+0xa0>
 8002154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	4b8d      	ldr	r3, [pc, #564]	; (8002390 <UART_SetConfig+0x2d0>)
 800215c:	429a      	cmp	r2, r3
 800215e:	d104      	bne.n	800216a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002160:	f7ff fe4c 	bl	8001dfc <HAL_RCC_GetPCLK2Freq>
 8002164:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002168:	e003      	b.n	8002172 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800216a:	f7ff fe33 	bl	8001dd4 <HAL_RCC_GetPCLK1Freq>
 800216e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002172:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002176:	69db      	ldr	r3, [r3, #28]
 8002178:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800217c:	f040 810c 	bne.w	8002398 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002180:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002184:	2200      	movs	r2, #0
 8002186:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800218a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800218e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002192:	4622      	mov	r2, r4
 8002194:	462b      	mov	r3, r5
 8002196:	1891      	adds	r1, r2, r2
 8002198:	65b9      	str	r1, [r7, #88]	; 0x58
 800219a:	415b      	adcs	r3, r3
 800219c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800219e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80021a2:	4621      	mov	r1, r4
 80021a4:	eb12 0801 	adds.w	r8, r2, r1
 80021a8:	4629      	mov	r1, r5
 80021aa:	eb43 0901 	adc.w	r9, r3, r1
 80021ae:	f04f 0200 	mov.w	r2, #0
 80021b2:	f04f 0300 	mov.w	r3, #0
 80021b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80021ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80021be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80021c2:	4690      	mov	r8, r2
 80021c4:	4699      	mov	r9, r3
 80021c6:	4623      	mov	r3, r4
 80021c8:	eb18 0303 	adds.w	r3, r8, r3
 80021cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80021d0:	462b      	mov	r3, r5
 80021d2:	eb49 0303 	adc.w	r3, r9, r3
 80021d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80021da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	2200      	movs	r2, #0
 80021e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80021e6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80021ea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80021ee:	460b      	mov	r3, r1
 80021f0:	18db      	adds	r3, r3, r3
 80021f2:	653b      	str	r3, [r7, #80]	; 0x50
 80021f4:	4613      	mov	r3, r2
 80021f6:	eb42 0303 	adc.w	r3, r2, r3
 80021fa:	657b      	str	r3, [r7, #84]	; 0x54
 80021fc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002200:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002204:	f7fe f84c 	bl	80002a0 <__aeabi_uldivmod>
 8002208:	4602      	mov	r2, r0
 800220a:	460b      	mov	r3, r1
 800220c:	4b61      	ldr	r3, [pc, #388]	; (8002394 <UART_SetConfig+0x2d4>)
 800220e:	fba3 2302 	umull	r2, r3, r3, r2
 8002212:	095b      	lsrs	r3, r3, #5
 8002214:	011c      	lsls	r4, r3, #4
 8002216:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800221a:	2200      	movs	r2, #0
 800221c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002220:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002224:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002228:	4642      	mov	r2, r8
 800222a:	464b      	mov	r3, r9
 800222c:	1891      	adds	r1, r2, r2
 800222e:	64b9      	str	r1, [r7, #72]	; 0x48
 8002230:	415b      	adcs	r3, r3
 8002232:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002234:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002238:	4641      	mov	r1, r8
 800223a:	eb12 0a01 	adds.w	sl, r2, r1
 800223e:	4649      	mov	r1, r9
 8002240:	eb43 0b01 	adc.w	fp, r3, r1
 8002244:	f04f 0200 	mov.w	r2, #0
 8002248:	f04f 0300 	mov.w	r3, #0
 800224c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002250:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002254:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002258:	4692      	mov	sl, r2
 800225a:	469b      	mov	fp, r3
 800225c:	4643      	mov	r3, r8
 800225e:	eb1a 0303 	adds.w	r3, sl, r3
 8002262:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002266:	464b      	mov	r3, r9
 8002268:	eb4b 0303 	adc.w	r3, fp, r3
 800226c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002270:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	2200      	movs	r2, #0
 8002278:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800227c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002280:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002284:	460b      	mov	r3, r1
 8002286:	18db      	adds	r3, r3, r3
 8002288:	643b      	str	r3, [r7, #64]	; 0x40
 800228a:	4613      	mov	r3, r2
 800228c:	eb42 0303 	adc.w	r3, r2, r3
 8002290:	647b      	str	r3, [r7, #68]	; 0x44
 8002292:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002296:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800229a:	f7fe f801 	bl	80002a0 <__aeabi_uldivmod>
 800229e:	4602      	mov	r2, r0
 80022a0:	460b      	mov	r3, r1
 80022a2:	4611      	mov	r1, r2
 80022a4:	4b3b      	ldr	r3, [pc, #236]	; (8002394 <UART_SetConfig+0x2d4>)
 80022a6:	fba3 2301 	umull	r2, r3, r3, r1
 80022aa:	095b      	lsrs	r3, r3, #5
 80022ac:	2264      	movs	r2, #100	; 0x64
 80022ae:	fb02 f303 	mul.w	r3, r2, r3
 80022b2:	1acb      	subs	r3, r1, r3
 80022b4:	00db      	lsls	r3, r3, #3
 80022b6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80022ba:	4b36      	ldr	r3, [pc, #216]	; (8002394 <UART_SetConfig+0x2d4>)
 80022bc:	fba3 2302 	umull	r2, r3, r3, r2
 80022c0:	095b      	lsrs	r3, r3, #5
 80022c2:	005b      	lsls	r3, r3, #1
 80022c4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80022c8:	441c      	add	r4, r3
 80022ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80022ce:	2200      	movs	r2, #0
 80022d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80022d4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80022d8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80022dc:	4642      	mov	r2, r8
 80022de:	464b      	mov	r3, r9
 80022e0:	1891      	adds	r1, r2, r2
 80022e2:	63b9      	str	r1, [r7, #56]	; 0x38
 80022e4:	415b      	adcs	r3, r3
 80022e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80022e8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80022ec:	4641      	mov	r1, r8
 80022ee:	1851      	adds	r1, r2, r1
 80022f0:	6339      	str	r1, [r7, #48]	; 0x30
 80022f2:	4649      	mov	r1, r9
 80022f4:	414b      	adcs	r3, r1
 80022f6:	637b      	str	r3, [r7, #52]	; 0x34
 80022f8:	f04f 0200 	mov.w	r2, #0
 80022fc:	f04f 0300 	mov.w	r3, #0
 8002300:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002304:	4659      	mov	r1, fp
 8002306:	00cb      	lsls	r3, r1, #3
 8002308:	4651      	mov	r1, sl
 800230a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800230e:	4651      	mov	r1, sl
 8002310:	00ca      	lsls	r2, r1, #3
 8002312:	4610      	mov	r0, r2
 8002314:	4619      	mov	r1, r3
 8002316:	4603      	mov	r3, r0
 8002318:	4642      	mov	r2, r8
 800231a:	189b      	adds	r3, r3, r2
 800231c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002320:	464b      	mov	r3, r9
 8002322:	460a      	mov	r2, r1
 8002324:	eb42 0303 	adc.w	r3, r2, r3
 8002328:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800232c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	2200      	movs	r2, #0
 8002334:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002338:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800233c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002340:	460b      	mov	r3, r1
 8002342:	18db      	adds	r3, r3, r3
 8002344:	62bb      	str	r3, [r7, #40]	; 0x28
 8002346:	4613      	mov	r3, r2
 8002348:	eb42 0303 	adc.w	r3, r2, r3
 800234c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800234e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002352:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002356:	f7fd ffa3 	bl	80002a0 <__aeabi_uldivmod>
 800235a:	4602      	mov	r2, r0
 800235c:	460b      	mov	r3, r1
 800235e:	4b0d      	ldr	r3, [pc, #52]	; (8002394 <UART_SetConfig+0x2d4>)
 8002360:	fba3 1302 	umull	r1, r3, r3, r2
 8002364:	095b      	lsrs	r3, r3, #5
 8002366:	2164      	movs	r1, #100	; 0x64
 8002368:	fb01 f303 	mul.w	r3, r1, r3
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	00db      	lsls	r3, r3, #3
 8002370:	3332      	adds	r3, #50	; 0x32
 8002372:	4a08      	ldr	r2, [pc, #32]	; (8002394 <UART_SetConfig+0x2d4>)
 8002374:	fba2 2303 	umull	r2, r3, r2, r3
 8002378:	095b      	lsrs	r3, r3, #5
 800237a:	f003 0207 	and.w	r2, r3, #7
 800237e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4422      	add	r2, r4
 8002386:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002388:	e106      	b.n	8002598 <UART_SetConfig+0x4d8>
 800238a:	bf00      	nop
 800238c:	40011000 	.word	0x40011000
 8002390:	40011400 	.word	0x40011400
 8002394:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002398:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800239c:	2200      	movs	r2, #0
 800239e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80023a2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80023a6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80023aa:	4642      	mov	r2, r8
 80023ac:	464b      	mov	r3, r9
 80023ae:	1891      	adds	r1, r2, r2
 80023b0:	6239      	str	r1, [r7, #32]
 80023b2:	415b      	adcs	r3, r3
 80023b4:	627b      	str	r3, [r7, #36]	; 0x24
 80023b6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80023ba:	4641      	mov	r1, r8
 80023bc:	1854      	adds	r4, r2, r1
 80023be:	4649      	mov	r1, r9
 80023c0:	eb43 0501 	adc.w	r5, r3, r1
 80023c4:	f04f 0200 	mov.w	r2, #0
 80023c8:	f04f 0300 	mov.w	r3, #0
 80023cc:	00eb      	lsls	r3, r5, #3
 80023ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80023d2:	00e2      	lsls	r2, r4, #3
 80023d4:	4614      	mov	r4, r2
 80023d6:	461d      	mov	r5, r3
 80023d8:	4643      	mov	r3, r8
 80023da:	18e3      	adds	r3, r4, r3
 80023dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80023e0:	464b      	mov	r3, r9
 80023e2:	eb45 0303 	adc.w	r3, r5, r3
 80023e6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80023ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	2200      	movs	r2, #0
 80023f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80023f6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80023fa:	f04f 0200 	mov.w	r2, #0
 80023fe:	f04f 0300 	mov.w	r3, #0
 8002402:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002406:	4629      	mov	r1, r5
 8002408:	008b      	lsls	r3, r1, #2
 800240a:	4621      	mov	r1, r4
 800240c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002410:	4621      	mov	r1, r4
 8002412:	008a      	lsls	r2, r1, #2
 8002414:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002418:	f7fd ff42 	bl	80002a0 <__aeabi_uldivmod>
 800241c:	4602      	mov	r2, r0
 800241e:	460b      	mov	r3, r1
 8002420:	4b60      	ldr	r3, [pc, #384]	; (80025a4 <UART_SetConfig+0x4e4>)
 8002422:	fba3 2302 	umull	r2, r3, r3, r2
 8002426:	095b      	lsrs	r3, r3, #5
 8002428:	011c      	lsls	r4, r3, #4
 800242a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800242e:	2200      	movs	r2, #0
 8002430:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002434:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002438:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800243c:	4642      	mov	r2, r8
 800243e:	464b      	mov	r3, r9
 8002440:	1891      	adds	r1, r2, r2
 8002442:	61b9      	str	r1, [r7, #24]
 8002444:	415b      	adcs	r3, r3
 8002446:	61fb      	str	r3, [r7, #28]
 8002448:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800244c:	4641      	mov	r1, r8
 800244e:	1851      	adds	r1, r2, r1
 8002450:	6139      	str	r1, [r7, #16]
 8002452:	4649      	mov	r1, r9
 8002454:	414b      	adcs	r3, r1
 8002456:	617b      	str	r3, [r7, #20]
 8002458:	f04f 0200 	mov.w	r2, #0
 800245c:	f04f 0300 	mov.w	r3, #0
 8002460:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002464:	4659      	mov	r1, fp
 8002466:	00cb      	lsls	r3, r1, #3
 8002468:	4651      	mov	r1, sl
 800246a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800246e:	4651      	mov	r1, sl
 8002470:	00ca      	lsls	r2, r1, #3
 8002472:	4610      	mov	r0, r2
 8002474:	4619      	mov	r1, r3
 8002476:	4603      	mov	r3, r0
 8002478:	4642      	mov	r2, r8
 800247a:	189b      	adds	r3, r3, r2
 800247c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002480:	464b      	mov	r3, r9
 8002482:	460a      	mov	r2, r1
 8002484:	eb42 0303 	adc.w	r3, r2, r3
 8002488:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800248c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	2200      	movs	r2, #0
 8002494:	67bb      	str	r3, [r7, #120]	; 0x78
 8002496:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002498:	f04f 0200 	mov.w	r2, #0
 800249c:	f04f 0300 	mov.w	r3, #0
 80024a0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80024a4:	4649      	mov	r1, r9
 80024a6:	008b      	lsls	r3, r1, #2
 80024a8:	4641      	mov	r1, r8
 80024aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80024ae:	4641      	mov	r1, r8
 80024b0:	008a      	lsls	r2, r1, #2
 80024b2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80024b6:	f7fd fef3 	bl	80002a0 <__aeabi_uldivmod>
 80024ba:	4602      	mov	r2, r0
 80024bc:	460b      	mov	r3, r1
 80024be:	4611      	mov	r1, r2
 80024c0:	4b38      	ldr	r3, [pc, #224]	; (80025a4 <UART_SetConfig+0x4e4>)
 80024c2:	fba3 2301 	umull	r2, r3, r3, r1
 80024c6:	095b      	lsrs	r3, r3, #5
 80024c8:	2264      	movs	r2, #100	; 0x64
 80024ca:	fb02 f303 	mul.w	r3, r2, r3
 80024ce:	1acb      	subs	r3, r1, r3
 80024d0:	011b      	lsls	r3, r3, #4
 80024d2:	3332      	adds	r3, #50	; 0x32
 80024d4:	4a33      	ldr	r2, [pc, #204]	; (80025a4 <UART_SetConfig+0x4e4>)
 80024d6:	fba2 2303 	umull	r2, r3, r2, r3
 80024da:	095b      	lsrs	r3, r3, #5
 80024dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024e0:	441c      	add	r4, r3
 80024e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80024e6:	2200      	movs	r2, #0
 80024e8:	673b      	str	r3, [r7, #112]	; 0x70
 80024ea:	677a      	str	r2, [r7, #116]	; 0x74
 80024ec:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80024f0:	4642      	mov	r2, r8
 80024f2:	464b      	mov	r3, r9
 80024f4:	1891      	adds	r1, r2, r2
 80024f6:	60b9      	str	r1, [r7, #8]
 80024f8:	415b      	adcs	r3, r3
 80024fa:	60fb      	str	r3, [r7, #12]
 80024fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002500:	4641      	mov	r1, r8
 8002502:	1851      	adds	r1, r2, r1
 8002504:	6039      	str	r1, [r7, #0]
 8002506:	4649      	mov	r1, r9
 8002508:	414b      	adcs	r3, r1
 800250a:	607b      	str	r3, [r7, #4]
 800250c:	f04f 0200 	mov.w	r2, #0
 8002510:	f04f 0300 	mov.w	r3, #0
 8002514:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002518:	4659      	mov	r1, fp
 800251a:	00cb      	lsls	r3, r1, #3
 800251c:	4651      	mov	r1, sl
 800251e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002522:	4651      	mov	r1, sl
 8002524:	00ca      	lsls	r2, r1, #3
 8002526:	4610      	mov	r0, r2
 8002528:	4619      	mov	r1, r3
 800252a:	4603      	mov	r3, r0
 800252c:	4642      	mov	r2, r8
 800252e:	189b      	adds	r3, r3, r2
 8002530:	66bb      	str	r3, [r7, #104]	; 0x68
 8002532:	464b      	mov	r3, r9
 8002534:	460a      	mov	r2, r1
 8002536:	eb42 0303 	adc.w	r3, r2, r3
 800253a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800253c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	2200      	movs	r2, #0
 8002544:	663b      	str	r3, [r7, #96]	; 0x60
 8002546:	667a      	str	r2, [r7, #100]	; 0x64
 8002548:	f04f 0200 	mov.w	r2, #0
 800254c:	f04f 0300 	mov.w	r3, #0
 8002550:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002554:	4649      	mov	r1, r9
 8002556:	008b      	lsls	r3, r1, #2
 8002558:	4641      	mov	r1, r8
 800255a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800255e:	4641      	mov	r1, r8
 8002560:	008a      	lsls	r2, r1, #2
 8002562:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002566:	f7fd fe9b 	bl	80002a0 <__aeabi_uldivmod>
 800256a:	4602      	mov	r2, r0
 800256c:	460b      	mov	r3, r1
 800256e:	4b0d      	ldr	r3, [pc, #52]	; (80025a4 <UART_SetConfig+0x4e4>)
 8002570:	fba3 1302 	umull	r1, r3, r3, r2
 8002574:	095b      	lsrs	r3, r3, #5
 8002576:	2164      	movs	r1, #100	; 0x64
 8002578:	fb01 f303 	mul.w	r3, r1, r3
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	011b      	lsls	r3, r3, #4
 8002580:	3332      	adds	r3, #50	; 0x32
 8002582:	4a08      	ldr	r2, [pc, #32]	; (80025a4 <UART_SetConfig+0x4e4>)
 8002584:	fba2 2303 	umull	r2, r3, r2, r3
 8002588:	095b      	lsrs	r3, r3, #5
 800258a:	f003 020f 	and.w	r2, r3, #15
 800258e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4422      	add	r2, r4
 8002596:	609a      	str	r2, [r3, #8]
}
 8002598:	bf00      	nop
 800259a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800259e:	46bd      	mov	sp, r7
 80025a0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80025a4:	51eb851f 	.word	0x51eb851f

080025a8 <InitLEDs>:
static void InitLEDs(void);
static void ToggleLEDs(void);

/* Private functions ---------------------------------------------------------*/
static void InitLEDs(void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	af00      	add	r7, sp, #0
	BSP_LED_Init(LED1);
 80025ac:	2000      	movs	r0, #0
 80025ae:	f7fe f9d3 	bl	8000958 <BSP_LED_Init>
	BSP_LED_Init(LED2);
 80025b2:	2001      	movs	r0, #1
 80025b4:	f7fe f9d0 	bl	8000958 <BSP_LED_Init>
	BSP_LED_Init(LED3);
 80025b8:	2002      	movs	r0, #2
 80025ba:	f7fe f9cd 	bl	8000958 <BSP_LED_Init>
}
 80025be:	bf00      	nop
 80025c0:	bd80      	pop	{r7, pc}

080025c2 <ToggleLEDs>:

static void ToggleLEDs(void)
{
 80025c2:	b580      	push	{r7, lr}
 80025c4:	af00      	add	r7, sp, #0
	BSP_LED_Toggle(LED1);
 80025c6:	2000      	movs	r0, #0
 80025c8:	f7fe fa30 	bl	8000a2c <BSP_LED_Toggle>
	BSP_LED_Toggle(LED2);
 80025cc:	2001      	movs	r0, #1
 80025ce:	f7fe fa2d 	bl	8000a2c <BSP_LED_Toggle>
	BSP_LED_Toggle(LED3);
 80025d2:	2002      	movs	r0, #2
 80025d4:	f7fe fa2a 	bl	8000a2c <BSP_LED_Toggle>
}
 80025d8:	bf00      	nop
 80025da:	bd80      	pop	{r7, pc}

080025dc <main>:
 * @brief  Main program
 * @param  None
 * @retval None
 */
int main(void)
{
 80025dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025e0:	b08c      	sub	sp, #48	; 0x30
 80025e2:	af00      	add	r7, sp, #0
		   duration should be kept 1ms since PPP_TIMEOUT_VALUEs are defined and
		   handled in milliseconds basis.
		 - Set NVIC Group Priority to 4
		 - Low Level Initialization
	   */
	HAL_Init();
 80025e4:	f7fe fb42 	bl	8000c6c <HAL_Init>

	/* Configure the system clock to 180 MHz */
	SystemClock_Config();
 80025e8:	f000 f8b0 	bl	800274c <SystemClock_Config>

	/* Local variables declaration and initialization*/
	uint32_t blinkDurations[] = {PERIOD_1, PERIOD_2};
 80025ec:	4b56      	ldr	r3, [pc, #344]	; (8002748 <main+0x16c>)
 80025ee:	f107 021c 	add.w	r2, r7, #28
 80025f2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80025f6:	e882 0003 	stmia.w	r2, {r0, r1}
	uint8_t	blinkCount = sizeof(blinkDurations) / sizeof(uint32_t);
 80025fa:	2302      	movs	r3, #2
 80025fc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	delay_t blinkDelayStr[blinkCount];
 8002600:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 8002604:	460b      	mov	r3, r1
 8002606:	3b01      	subs	r3, #1
 8002608:	62bb      	str	r3, [r7, #40]	; 0x28
 800260a:	b2cb      	uxtb	r3, r1
 800260c:	2200      	movs	r2, #0
 800260e:	613b      	str	r3, [r7, #16]
 8002610:	617a      	str	r2, [r7, #20]
 8002612:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002616:	1890      	adds	r0, r2, r2
 8002618:	60b8      	str	r0, [r7, #8]
 800261a:	415b      	adcs	r3, r3
 800261c:	60fb      	str	r3, [r7, #12]
 800261e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002622:	6938      	ldr	r0, [r7, #16]
 8002624:	eb12 0800 	adds.w	r8, r2, r0
 8002628:	6978      	ldr	r0, [r7, #20]
 800262a:	eb43 0900 	adc.w	r9, r3, r0
 800262e:	f04f 0200 	mov.w	r2, #0
 8002632:	f04f 0300 	mov.w	r3, #0
 8002636:	ea4f 1349 	mov.w	r3, r9, lsl #5
 800263a:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 800263e:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8002642:	b2cb      	uxtb	r3, r1
 8002644:	2200      	movs	r2, #0
 8002646:	469a      	mov	sl, r3
 8002648:	4693      	mov	fp, r2
 800264a:	4652      	mov	r2, sl
 800264c:	465b      	mov	r3, fp
 800264e:	1890      	adds	r0, r2, r2
 8002650:	6038      	str	r0, [r7, #0]
 8002652:	415b      	adcs	r3, r3
 8002654:	607b      	str	r3, [r7, #4]
 8002656:	e9d7 2300 	ldrd	r2, r3, [r7]
 800265a:	eb12 040a 	adds.w	r4, r2, sl
 800265e:	eb43 050b 	adc.w	r5, r3, fp
 8002662:	f04f 0200 	mov.w	r2, #0
 8002666:	f04f 0300 	mov.w	r3, #0
 800266a:	016b      	lsls	r3, r5, #5
 800266c:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8002670:	0162      	lsls	r2, r4, #5
 8002672:	460a      	mov	r2, r1
 8002674:	4613      	mov	r3, r2
 8002676:	005b      	lsls	r3, r3, #1
 8002678:	4413      	add	r3, r2
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	3307      	adds	r3, #7
 800267e:	08db      	lsrs	r3, r3, #3
 8002680:	00db      	lsls	r3, r3, #3
 8002682:	ebad 0d03 	sub.w	sp, sp, r3
 8002686:	466b      	mov	r3, sp
 8002688:	3303      	adds	r3, #3
 800268a:	089b      	lsrs	r3, r3, #2
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	627b      	str	r3, [r7, #36]	; 0x24

	uint8_t runningDelay = START_DELAY_INDEX;
 8002690:	2300      	movs	r3, #0
 8002692:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if(uartInit() != true)
 8002696:	f7fe f87f 	bl	8000798 <uartInit>
 800269a:	4603      	mov	r3, r0
 800269c:	f083 0301 	eor.w	r3, r3, #1
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d001      	beq.n	80026aa <main+0xce>
	{
		Error_Handler();
 80026a6:	f000 f8b3 	bl	8002810 <Error_Handler>
	}

	for (uint8_t i = 0U; i < blinkCount; i++)
 80026aa:	2300      	movs	r3, #0
 80026ac:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80026b0:	e019      	b.n	80026e6 <main+0x10a>
	{
		delayInit(&blinkDelayStr[i], blinkDurations[i]);	
 80026b2:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 80026b6:	4613      	mov	r3, r2
 80026b8:	005b      	lsls	r3, r3, #1
 80026ba:	4413      	add	r3, r2
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026c0:	441a      	add	r2, r3
 80026c2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80026c6:	009b      	lsls	r3, r3, #2
 80026c8:	3318      	adds	r3, #24
 80026ca:	f107 0118 	add.w	r1, r7, #24
 80026ce:	440b      	add	r3, r1
 80026d0:	f853 3c14 	ldr.w	r3, [r3, #-20]
 80026d4:	4619      	mov	r1, r3
 80026d6:	4610      	mov	r0, r2
 80026d8:	f7fe f818 	bl	800070c <delayInit>
	for (uint8_t i = 0U; i < blinkCount; i++)
 80026dc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80026e0:	3301      	adds	r3, #1
 80026e2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80026e6:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 80026ea:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80026ee:	429a      	cmp	r2, r3
 80026f0:	d3df      	bcc.n	80026b2 <main+0xd6>
	}

	InitLEDs();
 80026f2:	f7ff ff59 	bl	80025a8 <InitLEDs>

	debounceFSM_init();
 80026f6:	f7fd ff55 	bl	80005a4 <debounceFSM_init>

	/* Infinite loop */
	while (1)
	{
		debounceFSM_update();
 80026fa:	f7fd ff71 	bl	80005e0 <debounceFSM_update>

		if (readKey())
 80026fe:	f7fd fff3 	bl	80006e8 <readKey>
 8002702:	4603      	mov	r3, r0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d00e      	beq.n	8002726 <main+0x14a>
		{
			runningDelay++;
 8002708:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800270c:	3301      	adds	r3, #1
 800270e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

			if (runningDelay > (blinkCount - 1U))
 8002712:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8002716:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800271a:	3b01      	subs	r3, #1
 800271c:	429a      	cmp	r2, r3
 800271e:	d902      	bls.n	8002726 <main+0x14a>
			{
				runningDelay = START_DELAY_INDEX;
 8002720:	2300      	movs	r3, #0
 8002722:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			}
		}

		if(delayRead(&blinkDelayStr[runningDelay]))
 8002726:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800272a:	4613      	mov	r3, r2
 800272c:	005b      	lsls	r3, r3, #1
 800272e:	4413      	add	r3, r2
 8002730:	009b      	lsls	r3, r3, #2
 8002732:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002734:	4413      	add	r3, r2
 8002736:	4618      	mov	r0, r3
 8002738:	f7fd ffff 	bl	800073a <delayRead>
 800273c:	4603      	mov	r3, r0
 800273e:	2b00      	cmp	r3, #0
 8002740:	d0db      	beq.n	80026fa <main+0x11e>
		{
			ToggleLEDs();
 8002742:	f7ff ff3e 	bl	80025c2 <ToggleLEDs>
		debounceFSM_update();
 8002746:	e7d8      	b.n	80026fa <main+0x11e>
 8002748:	0800324c 	.word	0x0800324c

0800274c <SystemClock_Config>:
 *            Flash Latency(WS)              = 5
 * @param  None
 * @retval None
 */
static void SystemClock_Config(void)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b094      	sub	sp, #80	; 0x50
 8002750:	af00      	add	r7, sp, #0
	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_OscInitTypeDef RCC_OscInitStruct;

	/* Enable Power Control clock */
	__HAL_RCC_PWR_CLK_ENABLE();
 8002752:	2300      	movs	r3, #0
 8002754:	60bb      	str	r3, [r7, #8]
 8002756:	4b2c      	ldr	r3, [pc, #176]	; (8002808 <SystemClock_Config+0xbc>)
 8002758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275a:	4a2b      	ldr	r2, [pc, #172]	; (8002808 <SystemClock_Config+0xbc>)
 800275c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002760:	6413      	str	r3, [r2, #64]	; 0x40
 8002762:	4b29      	ldr	r3, [pc, #164]	; (8002808 <SystemClock_Config+0xbc>)
 8002764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002766:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800276a:	60bb      	str	r3, [r7, #8]
 800276c:	68bb      	ldr	r3, [r7, #8]

	/* The voltage scaling allows optimizing the power consumption when the device is
	   clocked below the maximum system frequency, to update the voltage scaling value
	   regarding system frequency refer to product datasheet.  */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800276e:	2300      	movs	r3, #0
 8002770:	607b      	str	r3, [r7, #4]
 8002772:	4b26      	ldr	r3, [pc, #152]	; (800280c <SystemClock_Config+0xc0>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a25      	ldr	r2, [pc, #148]	; (800280c <SystemClock_Config+0xc0>)
 8002778:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800277c:	6013      	str	r3, [r2, #0]
 800277e:	4b23      	ldr	r3, [pc, #140]	; (800280c <SystemClock_Config+0xc0>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002786:	607b      	str	r3, [r7, #4]
 8002788:	687b      	ldr	r3, [r7, #4]

	/* Enable HSE Oscillator and activate PLL with HSE as source */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800278a:	2301      	movs	r3, #1
 800278c:	60fb      	str	r3, [r7, #12]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800278e:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002792:	613b      	str	r3, [r7, #16]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002794:	2302      	movs	r3, #2
 8002796:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002798:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800279c:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLM = 8;
 800279e:	2308      	movs	r3, #8
 80027a0:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLN = 360;
 80027a2:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80027a6:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80027a8:	2302      	movs	r3, #2
 80027aa:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLQ = 7;
 80027ac:	2307      	movs	r3, #7
 80027ae:	63bb      	str	r3, [r7, #56]	; 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80027b0:	f107 030c 	add.w	r3, r7, #12
 80027b4:	4618      	mov	r0, r3
 80027b6:	f7fe fe9d 	bl	80014f4 <HAL_RCC_OscConfig>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d001      	beq.n	80027c4 <SystemClock_Config+0x78>
	{
		/* Initialization Error */
		Error_Handler();
 80027c0:	f000 f826 	bl	8002810 <Error_Handler>
	}

	if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80027c4:	f7fe fe46 	bl	8001454 <HAL_PWREx_EnableOverDrive>
 80027c8:	4603      	mov	r3, r0
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d001      	beq.n	80027d2 <SystemClock_Config+0x86>
	{
		/* Initialization Error */
		Error_Handler();
 80027ce:	f000 f81f 	bl	8002810 <Error_Handler>
	}

	/* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
	   clocks dividers */
	RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80027d2:	230f      	movs	r3, #15
 80027d4:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80027d6:	2302      	movs	r3, #2
 80027d8:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80027da:	2300      	movs	r3, #0
 80027dc:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80027de:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80027e2:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80027e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027e8:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80027ea:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80027ee:	2105      	movs	r1, #5
 80027f0:	4618      	mov	r0, r3
 80027f2:	f7ff f8f7 	bl	80019e4 <HAL_RCC_ClockConfig>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d001      	beq.n	8002800 <SystemClock_Config+0xb4>
	{
		/* Initialization Error */
		Error_Handler();
 80027fc:	f000 f808 	bl	8002810 <Error_Handler>
	}
}
 8002800:	bf00      	nop
 8002802:	3750      	adds	r7, #80	; 0x50
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}
 8002808:	40023800 	.word	0x40023800
 800280c:	40007000 	.word	0x40007000

08002810 <Error_Handler>:
 * @brief  This function is executed in case of error occurrence.
 * @param  None
 * @retval None
 */
static void Error_Handler(void)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	af00      	add	r7, sp, #0
	/* Turn LED2 on */
	BSP_LED_On(LED2);
 8002814:	2001      	movs	r0, #1
 8002816:	f7fe f8ef 	bl	80009f8 <BSP_LED_On>
	while (1)
 800281a:	e7fe      	b.n	800281a <Error_Handler+0xa>

0800281c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800281c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002854 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002820:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002822:	e003      	b.n	800282c <LoopCopyDataInit>

08002824 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002824:	4b0c      	ldr	r3, [pc, #48]	; (8002858 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002826:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002828:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800282a:	3104      	adds	r1, #4

0800282c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800282c:	480b      	ldr	r0, [pc, #44]	; (800285c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800282e:	4b0c      	ldr	r3, [pc, #48]	; (8002860 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002830:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002832:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002834:	d3f6      	bcc.n	8002824 <CopyDataInit>
  ldr  r2, =_sbss
 8002836:	4a0b      	ldr	r2, [pc, #44]	; (8002864 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002838:	e002      	b.n	8002840 <LoopFillZerobss>

0800283a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800283a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800283c:	f842 3b04 	str.w	r3, [r2], #4

08002840 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002840:	4b09      	ldr	r3, [pc, #36]	; (8002868 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002842:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002844:	d3f9      	bcc.n	800283a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002846:	f7fe f977 	bl	8000b38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800284a:	f000 f84b 	bl	80028e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800284e:	f7ff fec5 	bl	80025dc <main>
  bx  lr    
 8002852:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002854:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8002858:	080032b8 	.word	0x080032b8
  ldr  r0, =_sdata
 800285c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002860:	2000006c 	.word	0x2000006c
  ldr  r2, =_sbss
 8002864:	2000006c 	.word	0x2000006c
  ldr  r3, = _ebss
 8002868:	20000230 	.word	0x20000230

0800286c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800286c:	e7fe      	b.n	800286c <ADC_IRQHandler>
	...

08002870 <sniprintf>:
 8002870:	b40c      	push	{r2, r3}
 8002872:	b530      	push	{r4, r5, lr}
 8002874:	4b17      	ldr	r3, [pc, #92]	; (80028d4 <sniprintf+0x64>)
 8002876:	1e0c      	subs	r4, r1, #0
 8002878:	681d      	ldr	r5, [r3, #0]
 800287a:	b09d      	sub	sp, #116	; 0x74
 800287c:	da08      	bge.n	8002890 <sniprintf+0x20>
 800287e:	238b      	movs	r3, #139	; 0x8b
 8002880:	602b      	str	r3, [r5, #0]
 8002882:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002886:	b01d      	add	sp, #116	; 0x74
 8002888:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800288c:	b002      	add	sp, #8
 800288e:	4770      	bx	lr
 8002890:	f44f 7302 	mov.w	r3, #520	; 0x208
 8002894:	f8ad 3014 	strh.w	r3, [sp, #20]
 8002898:	bf14      	ite	ne
 800289a:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800289e:	4623      	moveq	r3, r4
 80028a0:	9304      	str	r3, [sp, #16]
 80028a2:	9307      	str	r3, [sp, #28]
 80028a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80028a8:	9002      	str	r0, [sp, #8]
 80028aa:	9006      	str	r0, [sp, #24]
 80028ac:	f8ad 3016 	strh.w	r3, [sp, #22]
 80028b0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80028b2:	ab21      	add	r3, sp, #132	; 0x84
 80028b4:	a902      	add	r1, sp, #8
 80028b6:	4628      	mov	r0, r5
 80028b8:	9301      	str	r3, [sp, #4]
 80028ba:	f000 f98b 	bl	8002bd4 <_svfiprintf_r>
 80028be:	1c43      	adds	r3, r0, #1
 80028c0:	bfbc      	itt	lt
 80028c2:	238b      	movlt	r3, #139	; 0x8b
 80028c4:	602b      	strlt	r3, [r5, #0]
 80028c6:	2c00      	cmp	r4, #0
 80028c8:	d0dd      	beq.n	8002886 <sniprintf+0x16>
 80028ca:	9b02      	ldr	r3, [sp, #8]
 80028cc:	2200      	movs	r2, #0
 80028ce:	701a      	strb	r2, [r3, #0]
 80028d0:	e7d9      	b.n	8002886 <sniprintf+0x16>
 80028d2:	bf00      	nop
 80028d4:	20000068 	.word	0x20000068

080028d8 <__errno>:
 80028d8:	4b01      	ldr	r3, [pc, #4]	; (80028e0 <__errno+0x8>)
 80028da:	6818      	ldr	r0, [r3, #0]
 80028dc:	4770      	bx	lr
 80028de:	bf00      	nop
 80028e0:	20000068 	.word	0x20000068

080028e4 <__libc_init_array>:
 80028e4:	b570      	push	{r4, r5, r6, lr}
 80028e6:	4d0d      	ldr	r5, [pc, #52]	; (800291c <__libc_init_array+0x38>)
 80028e8:	4c0d      	ldr	r4, [pc, #52]	; (8002920 <__libc_init_array+0x3c>)
 80028ea:	1b64      	subs	r4, r4, r5
 80028ec:	10a4      	asrs	r4, r4, #2
 80028ee:	2600      	movs	r6, #0
 80028f0:	42a6      	cmp	r6, r4
 80028f2:	d109      	bne.n	8002908 <__libc_init_array+0x24>
 80028f4:	4d0b      	ldr	r5, [pc, #44]	; (8002924 <__libc_init_array+0x40>)
 80028f6:	4c0c      	ldr	r4, [pc, #48]	; (8002928 <__libc_init_array+0x44>)
 80028f8:	f000 fc6a 	bl	80031d0 <_init>
 80028fc:	1b64      	subs	r4, r4, r5
 80028fe:	10a4      	asrs	r4, r4, #2
 8002900:	2600      	movs	r6, #0
 8002902:	42a6      	cmp	r6, r4
 8002904:	d105      	bne.n	8002912 <__libc_init_array+0x2e>
 8002906:	bd70      	pop	{r4, r5, r6, pc}
 8002908:	f855 3b04 	ldr.w	r3, [r5], #4
 800290c:	4798      	blx	r3
 800290e:	3601      	adds	r6, #1
 8002910:	e7ee      	b.n	80028f0 <__libc_init_array+0xc>
 8002912:	f855 3b04 	ldr.w	r3, [r5], #4
 8002916:	4798      	blx	r3
 8002918:	3601      	adds	r6, #1
 800291a:	e7f2      	b.n	8002902 <__libc_init_array+0x1e>
 800291c:	080032b0 	.word	0x080032b0
 8002920:	080032b0 	.word	0x080032b0
 8002924:	080032b0 	.word	0x080032b0
 8002928:	080032b4 	.word	0x080032b4

0800292c <__retarget_lock_acquire_recursive>:
 800292c:	4770      	bx	lr

0800292e <__retarget_lock_release_recursive>:
 800292e:	4770      	bx	lr

08002930 <_free_r>:
 8002930:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002932:	2900      	cmp	r1, #0
 8002934:	d044      	beq.n	80029c0 <_free_r+0x90>
 8002936:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800293a:	9001      	str	r0, [sp, #4]
 800293c:	2b00      	cmp	r3, #0
 800293e:	f1a1 0404 	sub.w	r4, r1, #4
 8002942:	bfb8      	it	lt
 8002944:	18e4      	addlt	r4, r4, r3
 8002946:	f000 f8df 	bl	8002b08 <__malloc_lock>
 800294a:	4a1e      	ldr	r2, [pc, #120]	; (80029c4 <_free_r+0x94>)
 800294c:	9801      	ldr	r0, [sp, #4]
 800294e:	6813      	ldr	r3, [r2, #0]
 8002950:	b933      	cbnz	r3, 8002960 <_free_r+0x30>
 8002952:	6063      	str	r3, [r4, #4]
 8002954:	6014      	str	r4, [r2, #0]
 8002956:	b003      	add	sp, #12
 8002958:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800295c:	f000 b8da 	b.w	8002b14 <__malloc_unlock>
 8002960:	42a3      	cmp	r3, r4
 8002962:	d908      	bls.n	8002976 <_free_r+0x46>
 8002964:	6825      	ldr	r5, [r4, #0]
 8002966:	1961      	adds	r1, r4, r5
 8002968:	428b      	cmp	r3, r1
 800296a:	bf01      	itttt	eq
 800296c:	6819      	ldreq	r1, [r3, #0]
 800296e:	685b      	ldreq	r3, [r3, #4]
 8002970:	1949      	addeq	r1, r1, r5
 8002972:	6021      	streq	r1, [r4, #0]
 8002974:	e7ed      	b.n	8002952 <_free_r+0x22>
 8002976:	461a      	mov	r2, r3
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	b10b      	cbz	r3, 8002980 <_free_r+0x50>
 800297c:	42a3      	cmp	r3, r4
 800297e:	d9fa      	bls.n	8002976 <_free_r+0x46>
 8002980:	6811      	ldr	r1, [r2, #0]
 8002982:	1855      	adds	r5, r2, r1
 8002984:	42a5      	cmp	r5, r4
 8002986:	d10b      	bne.n	80029a0 <_free_r+0x70>
 8002988:	6824      	ldr	r4, [r4, #0]
 800298a:	4421      	add	r1, r4
 800298c:	1854      	adds	r4, r2, r1
 800298e:	42a3      	cmp	r3, r4
 8002990:	6011      	str	r1, [r2, #0]
 8002992:	d1e0      	bne.n	8002956 <_free_r+0x26>
 8002994:	681c      	ldr	r4, [r3, #0]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	6053      	str	r3, [r2, #4]
 800299a:	440c      	add	r4, r1
 800299c:	6014      	str	r4, [r2, #0]
 800299e:	e7da      	b.n	8002956 <_free_r+0x26>
 80029a0:	d902      	bls.n	80029a8 <_free_r+0x78>
 80029a2:	230c      	movs	r3, #12
 80029a4:	6003      	str	r3, [r0, #0]
 80029a6:	e7d6      	b.n	8002956 <_free_r+0x26>
 80029a8:	6825      	ldr	r5, [r4, #0]
 80029aa:	1961      	adds	r1, r4, r5
 80029ac:	428b      	cmp	r3, r1
 80029ae:	bf04      	itt	eq
 80029b0:	6819      	ldreq	r1, [r3, #0]
 80029b2:	685b      	ldreq	r3, [r3, #4]
 80029b4:	6063      	str	r3, [r4, #4]
 80029b6:	bf04      	itt	eq
 80029b8:	1949      	addeq	r1, r1, r5
 80029ba:	6021      	streq	r1, [r4, #0]
 80029bc:	6054      	str	r4, [r2, #4]
 80029be:	e7ca      	b.n	8002956 <_free_r+0x26>
 80029c0:	b003      	add	sp, #12
 80029c2:	bd30      	pop	{r4, r5, pc}
 80029c4:	20000228 	.word	0x20000228

080029c8 <sbrk_aligned>:
 80029c8:	b570      	push	{r4, r5, r6, lr}
 80029ca:	4e0e      	ldr	r6, [pc, #56]	; (8002a04 <sbrk_aligned+0x3c>)
 80029cc:	460c      	mov	r4, r1
 80029ce:	6831      	ldr	r1, [r6, #0]
 80029d0:	4605      	mov	r5, r0
 80029d2:	b911      	cbnz	r1, 80029da <sbrk_aligned+0x12>
 80029d4:	f000 fba6 	bl	8003124 <_sbrk_r>
 80029d8:	6030      	str	r0, [r6, #0]
 80029da:	4621      	mov	r1, r4
 80029dc:	4628      	mov	r0, r5
 80029de:	f000 fba1 	bl	8003124 <_sbrk_r>
 80029e2:	1c43      	adds	r3, r0, #1
 80029e4:	d00a      	beq.n	80029fc <sbrk_aligned+0x34>
 80029e6:	1cc4      	adds	r4, r0, #3
 80029e8:	f024 0403 	bic.w	r4, r4, #3
 80029ec:	42a0      	cmp	r0, r4
 80029ee:	d007      	beq.n	8002a00 <sbrk_aligned+0x38>
 80029f0:	1a21      	subs	r1, r4, r0
 80029f2:	4628      	mov	r0, r5
 80029f4:	f000 fb96 	bl	8003124 <_sbrk_r>
 80029f8:	3001      	adds	r0, #1
 80029fa:	d101      	bne.n	8002a00 <sbrk_aligned+0x38>
 80029fc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002a00:	4620      	mov	r0, r4
 8002a02:	bd70      	pop	{r4, r5, r6, pc}
 8002a04:	2000022c 	.word	0x2000022c

08002a08 <_malloc_r>:
 8002a08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002a0c:	1ccd      	adds	r5, r1, #3
 8002a0e:	f025 0503 	bic.w	r5, r5, #3
 8002a12:	3508      	adds	r5, #8
 8002a14:	2d0c      	cmp	r5, #12
 8002a16:	bf38      	it	cc
 8002a18:	250c      	movcc	r5, #12
 8002a1a:	2d00      	cmp	r5, #0
 8002a1c:	4607      	mov	r7, r0
 8002a1e:	db01      	blt.n	8002a24 <_malloc_r+0x1c>
 8002a20:	42a9      	cmp	r1, r5
 8002a22:	d905      	bls.n	8002a30 <_malloc_r+0x28>
 8002a24:	230c      	movs	r3, #12
 8002a26:	603b      	str	r3, [r7, #0]
 8002a28:	2600      	movs	r6, #0
 8002a2a:	4630      	mov	r0, r6
 8002a2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002a30:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002b04 <_malloc_r+0xfc>
 8002a34:	f000 f868 	bl	8002b08 <__malloc_lock>
 8002a38:	f8d8 3000 	ldr.w	r3, [r8]
 8002a3c:	461c      	mov	r4, r3
 8002a3e:	bb5c      	cbnz	r4, 8002a98 <_malloc_r+0x90>
 8002a40:	4629      	mov	r1, r5
 8002a42:	4638      	mov	r0, r7
 8002a44:	f7ff ffc0 	bl	80029c8 <sbrk_aligned>
 8002a48:	1c43      	adds	r3, r0, #1
 8002a4a:	4604      	mov	r4, r0
 8002a4c:	d155      	bne.n	8002afa <_malloc_r+0xf2>
 8002a4e:	f8d8 4000 	ldr.w	r4, [r8]
 8002a52:	4626      	mov	r6, r4
 8002a54:	2e00      	cmp	r6, #0
 8002a56:	d145      	bne.n	8002ae4 <_malloc_r+0xdc>
 8002a58:	2c00      	cmp	r4, #0
 8002a5a:	d048      	beq.n	8002aee <_malloc_r+0xe6>
 8002a5c:	6823      	ldr	r3, [r4, #0]
 8002a5e:	4631      	mov	r1, r6
 8002a60:	4638      	mov	r0, r7
 8002a62:	eb04 0903 	add.w	r9, r4, r3
 8002a66:	f000 fb5d 	bl	8003124 <_sbrk_r>
 8002a6a:	4581      	cmp	r9, r0
 8002a6c:	d13f      	bne.n	8002aee <_malloc_r+0xe6>
 8002a6e:	6821      	ldr	r1, [r4, #0]
 8002a70:	1a6d      	subs	r5, r5, r1
 8002a72:	4629      	mov	r1, r5
 8002a74:	4638      	mov	r0, r7
 8002a76:	f7ff ffa7 	bl	80029c8 <sbrk_aligned>
 8002a7a:	3001      	adds	r0, #1
 8002a7c:	d037      	beq.n	8002aee <_malloc_r+0xe6>
 8002a7e:	6823      	ldr	r3, [r4, #0]
 8002a80:	442b      	add	r3, r5
 8002a82:	6023      	str	r3, [r4, #0]
 8002a84:	f8d8 3000 	ldr.w	r3, [r8]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d038      	beq.n	8002afe <_malloc_r+0xf6>
 8002a8c:	685a      	ldr	r2, [r3, #4]
 8002a8e:	42a2      	cmp	r2, r4
 8002a90:	d12b      	bne.n	8002aea <_malloc_r+0xe2>
 8002a92:	2200      	movs	r2, #0
 8002a94:	605a      	str	r2, [r3, #4]
 8002a96:	e00f      	b.n	8002ab8 <_malloc_r+0xb0>
 8002a98:	6822      	ldr	r2, [r4, #0]
 8002a9a:	1b52      	subs	r2, r2, r5
 8002a9c:	d41f      	bmi.n	8002ade <_malloc_r+0xd6>
 8002a9e:	2a0b      	cmp	r2, #11
 8002aa0:	d917      	bls.n	8002ad2 <_malloc_r+0xca>
 8002aa2:	1961      	adds	r1, r4, r5
 8002aa4:	42a3      	cmp	r3, r4
 8002aa6:	6025      	str	r5, [r4, #0]
 8002aa8:	bf18      	it	ne
 8002aaa:	6059      	strne	r1, [r3, #4]
 8002aac:	6863      	ldr	r3, [r4, #4]
 8002aae:	bf08      	it	eq
 8002ab0:	f8c8 1000 	streq.w	r1, [r8]
 8002ab4:	5162      	str	r2, [r4, r5]
 8002ab6:	604b      	str	r3, [r1, #4]
 8002ab8:	4638      	mov	r0, r7
 8002aba:	f104 060b 	add.w	r6, r4, #11
 8002abe:	f000 f829 	bl	8002b14 <__malloc_unlock>
 8002ac2:	f026 0607 	bic.w	r6, r6, #7
 8002ac6:	1d23      	adds	r3, r4, #4
 8002ac8:	1af2      	subs	r2, r6, r3
 8002aca:	d0ae      	beq.n	8002a2a <_malloc_r+0x22>
 8002acc:	1b9b      	subs	r3, r3, r6
 8002ace:	50a3      	str	r3, [r4, r2]
 8002ad0:	e7ab      	b.n	8002a2a <_malloc_r+0x22>
 8002ad2:	42a3      	cmp	r3, r4
 8002ad4:	6862      	ldr	r2, [r4, #4]
 8002ad6:	d1dd      	bne.n	8002a94 <_malloc_r+0x8c>
 8002ad8:	f8c8 2000 	str.w	r2, [r8]
 8002adc:	e7ec      	b.n	8002ab8 <_malloc_r+0xb0>
 8002ade:	4623      	mov	r3, r4
 8002ae0:	6864      	ldr	r4, [r4, #4]
 8002ae2:	e7ac      	b.n	8002a3e <_malloc_r+0x36>
 8002ae4:	4634      	mov	r4, r6
 8002ae6:	6876      	ldr	r6, [r6, #4]
 8002ae8:	e7b4      	b.n	8002a54 <_malloc_r+0x4c>
 8002aea:	4613      	mov	r3, r2
 8002aec:	e7cc      	b.n	8002a88 <_malloc_r+0x80>
 8002aee:	230c      	movs	r3, #12
 8002af0:	603b      	str	r3, [r7, #0]
 8002af2:	4638      	mov	r0, r7
 8002af4:	f000 f80e 	bl	8002b14 <__malloc_unlock>
 8002af8:	e797      	b.n	8002a2a <_malloc_r+0x22>
 8002afa:	6025      	str	r5, [r4, #0]
 8002afc:	e7dc      	b.n	8002ab8 <_malloc_r+0xb0>
 8002afe:	605b      	str	r3, [r3, #4]
 8002b00:	deff      	udf	#255	; 0xff
 8002b02:	bf00      	nop
 8002b04:	20000228 	.word	0x20000228

08002b08 <__malloc_lock>:
 8002b08:	4801      	ldr	r0, [pc, #4]	; (8002b10 <__malloc_lock+0x8>)
 8002b0a:	f7ff bf0f 	b.w	800292c <__retarget_lock_acquire_recursive>
 8002b0e:	bf00      	nop
 8002b10:	20000224 	.word	0x20000224

08002b14 <__malloc_unlock>:
 8002b14:	4801      	ldr	r0, [pc, #4]	; (8002b1c <__malloc_unlock+0x8>)
 8002b16:	f7ff bf0a 	b.w	800292e <__retarget_lock_release_recursive>
 8002b1a:	bf00      	nop
 8002b1c:	20000224 	.word	0x20000224

08002b20 <__ssputs_r>:
 8002b20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002b24:	688e      	ldr	r6, [r1, #8]
 8002b26:	461f      	mov	r7, r3
 8002b28:	42be      	cmp	r6, r7
 8002b2a:	680b      	ldr	r3, [r1, #0]
 8002b2c:	4682      	mov	sl, r0
 8002b2e:	460c      	mov	r4, r1
 8002b30:	4690      	mov	r8, r2
 8002b32:	d82c      	bhi.n	8002b8e <__ssputs_r+0x6e>
 8002b34:	898a      	ldrh	r2, [r1, #12]
 8002b36:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002b3a:	d026      	beq.n	8002b8a <__ssputs_r+0x6a>
 8002b3c:	6965      	ldr	r5, [r4, #20]
 8002b3e:	6909      	ldr	r1, [r1, #16]
 8002b40:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002b44:	eba3 0901 	sub.w	r9, r3, r1
 8002b48:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002b4c:	1c7b      	adds	r3, r7, #1
 8002b4e:	444b      	add	r3, r9
 8002b50:	106d      	asrs	r5, r5, #1
 8002b52:	429d      	cmp	r5, r3
 8002b54:	bf38      	it	cc
 8002b56:	461d      	movcc	r5, r3
 8002b58:	0553      	lsls	r3, r2, #21
 8002b5a:	d527      	bpl.n	8002bac <__ssputs_r+0x8c>
 8002b5c:	4629      	mov	r1, r5
 8002b5e:	f7ff ff53 	bl	8002a08 <_malloc_r>
 8002b62:	4606      	mov	r6, r0
 8002b64:	b360      	cbz	r0, 8002bc0 <__ssputs_r+0xa0>
 8002b66:	6921      	ldr	r1, [r4, #16]
 8002b68:	464a      	mov	r2, r9
 8002b6a:	f000 faeb 	bl	8003144 <memcpy>
 8002b6e:	89a3      	ldrh	r3, [r4, #12]
 8002b70:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002b74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b78:	81a3      	strh	r3, [r4, #12]
 8002b7a:	6126      	str	r6, [r4, #16]
 8002b7c:	6165      	str	r5, [r4, #20]
 8002b7e:	444e      	add	r6, r9
 8002b80:	eba5 0509 	sub.w	r5, r5, r9
 8002b84:	6026      	str	r6, [r4, #0]
 8002b86:	60a5      	str	r5, [r4, #8]
 8002b88:	463e      	mov	r6, r7
 8002b8a:	42be      	cmp	r6, r7
 8002b8c:	d900      	bls.n	8002b90 <__ssputs_r+0x70>
 8002b8e:	463e      	mov	r6, r7
 8002b90:	6820      	ldr	r0, [r4, #0]
 8002b92:	4632      	mov	r2, r6
 8002b94:	4641      	mov	r1, r8
 8002b96:	f000 faab 	bl	80030f0 <memmove>
 8002b9a:	68a3      	ldr	r3, [r4, #8]
 8002b9c:	1b9b      	subs	r3, r3, r6
 8002b9e:	60a3      	str	r3, [r4, #8]
 8002ba0:	6823      	ldr	r3, [r4, #0]
 8002ba2:	4433      	add	r3, r6
 8002ba4:	6023      	str	r3, [r4, #0]
 8002ba6:	2000      	movs	r0, #0
 8002ba8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002bac:	462a      	mov	r2, r5
 8002bae:	f000 fad7 	bl	8003160 <_realloc_r>
 8002bb2:	4606      	mov	r6, r0
 8002bb4:	2800      	cmp	r0, #0
 8002bb6:	d1e0      	bne.n	8002b7a <__ssputs_r+0x5a>
 8002bb8:	6921      	ldr	r1, [r4, #16]
 8002bba:	4650      	mov	r0, sl
 8002bbc:	f7ff feb8 	bl	8002930 <_free_r>
 8002bc0:	230c      	movs	r3, #12
 8002bc2:	f8ca 3000 	str.w	r3, [sl]
 8002bc6:	89a3      	ldrh	r3, [r4, #12]
 8002bc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002bcc:	81a3      	strh	r3, [r4, #12]
 8002bce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002bd2:	e7e9      	b.n	8002ba8 <__ssputs_r+0x88>

08002bd4 <_svfiprintf_r>:
 8002bd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002bd8:	4698      	mov	r8, r3
 8002bda:	898b      	ldrh	r3, [r1, #12]
 8002bdc:	061b      	lsls	r3, r3, #24
 8002bde:	b09d      	sub	sp, #116	; 0x74
 8002be0:	4607      	mov	r7, r0
 8002be2:	460d      	mov	r5, r1
 8002be4:	4614      	mov	r4, r2
 8002be6:	d50e      	bpl.n	8002c06 <_svfiprintf_r+0x32>
 8002be8:	690b      	ldr	r3, [r1, #16]
 8002bea:	b963      	cbnz	r3, 8002c06 <_svfiprintf_r+0x32>
 8002bec:	2140      	movs	r1, #64	; 0x40
 8002bee:	f7ff ff0b 	bl	8002a08 <_malloc_r>
 8002bf2:	6028      	str	r0, [r5, #0]
 8002bf4:	6128      	str	r0, [r5, #16]
 8002bf6:	b920      	cbnz	r0, 8002c02 <_svfiprintf_r+0x2e>
 8002bf8:	230c      	movs	r3, #12
 8002bfa:	603b      	str	r3, [r7, #0]
 8002bfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c00:	e0d0      	b.n	8002da4 <_svfiprintf_r+0x1d0>
 8002c02:	2340      	movs	r3, #64	; 0x40
 8002c04:	616b      	str	r3, [r5, #20]
 8002c06:	2300      	movs	r3, #0
 8002c08:	9309      	str	r3, [sp, #36]	; 0x24
 8002c0a:	2320      	movs	r3, #32
 8002c0c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002c10:	f8cd 800c 	str.w	r8, [sp, #12]
 8002c14:	2330      	movs	r3, #48	; 0x30
 8002c16:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002dbc <_svfiprintf_r+0x1e8>
 8002c1a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002c1e:	f04f 0901 	mov.w	r9, #1
 8002c22:	4623      	mov	r3, r4
 8002c24:	469a      	mov	sl, r3
 8002c26:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002c2a:	b10a      	cbz	r2, 8002c30 <_svfiprintf_r+0x5c>
 8002c2c:	2a25      	cmp	r2, #37	; 0x25
 8002c2e:	d1f9      	bne.n	8002c24 <_svfiprintf_r+0x50>
 8002c30:	ebba 0b04 	subs.w	fp, sl, r4
 8002c34:	d00b      	beq.n	8002c4e <_svfiprintf_r+0x7a>
 8002c36:	465b      	mov	r3, fp
 8002c38:	4622      	mov	r2, r4
 8002c3a:	4629      	mov	r1, r5
 8002c3c:	4638      	mov	r0, r7
 8002c3e:	f7ff ff6f 	bl	8002b20 <__ssputs_r>
 8002c42:	3001      	adds	r0, #1
 8002c44:	f000 80a9 	beq.w	8002d9a <_svfiprintf_r+0x1c6>
 8002c48:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002c4a:	445a      	add	r2, fp
 8002c4c:	9209      	str	r2, [sp, #36]	; 0x24
 8002c4e:	f89a 3000 	ldrb.w	r3, [sl]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	f000 80a1 	beq.w	8002d9a <_svfiprintf_r+0x1c6>
 8002c58:	2300      	movs	r3, #0
 8002c5a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002c5e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002c62:	f10a 0a01 	add.w	sl, sl, #1
 8002c66:	9304      	str	r3, [sp, #16]
 8002c68:	9307      	str	r3, [sp, #28]
 8002c6a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002c6e:	931a      	str	r3, [sp, #104]	; 0x68
 8002c70:	4654      	mov	r4, sl
 8002c72:	2205      	movs	r2, #5
 8002c74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002c78:	4850      	ldr	r0, [pc, #320]	; (8002dbc <_svfiprintf_r+0x1e8>)
 8002c7a:	f7fd fac1 	bl	8000200 <memchr>
 8002c7e:	9a04      	ldr	r2, [sp, #16]
 8002c80:	b9d8      	cbnz	r0, 8002cba <_svfiprintf_r+0xe6>
 8002c82:	06d0      	lsls	r0, r2, #27
 8002c84:	bf44      	itt	mi
 8002c86:	2320      	movmi	r3, #32
 8002c88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002c8c:	0711      	lsls	r1, r2, #28
 8002c8e:	bf44      	itt	mi
 8002c90:	232b      	movmi	r3, #43	; 0x2b
 8002c92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002c96:	f89a 3000 	ldrb.w	r3, [sl]
 8002c9a:	2b2a      	cmp	r3, #42	; 0x2a
 8002c9c:	d015      	beq.n	8002cca <_svfiprintf_r+0xf6>
 8002c9e:	9a07      	ldr	r2, [sp, #28]
 8002ca0:	4654      	mov	r4, sl
 8002ca2:	2000      	movs	r0, #0
 8002ca4:	f04f 0c0a 	mov.w	ip, #10
 8002ca8:	4621      	mov	r1, r4
 8002caa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002cae:	3b30      	subs	r3, #48	; 0x30
 8002cb0:	2b09      	cmp	r3, #9
 8002cb2:	d94d      	bls.n	8002d50 <_svfiprintf_r+0x17c>
 8002cb4:	b1b0      	cbz	r0, 8002ce4 <_svfiprintf_r+0x110>
 8002cb6:	9207      	str	r2, [sp, #28]
 8002cb8:	e014      	b.n	8002ce4 <_svfiprintf_r+0x110>
 8002cba:	eba0 0308 	sub.w	r3, r0, r8
 8002cbe:	fa09 f303 	lsl.w	r3, r9, r3
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	9304      	str	r3, [sp, #16]
 8002cc6:	46a2      	mov	sl, r4
 8002cc8:	e7d2      	b.n	8002c70 <_svfiprintf_r+0x9c>
 8002cca:	9b03      	ldr	r3, [sp, #12]
 8002ccc:	1d19      	adds	r1, r3, #4
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	9103      	str	r1, [sp, #12]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	bfbb      	ittet	lt
 8002cd6:	425b      	neglt	r3, r3
 8002cd8:	f042 0202 	orrlt.w	r2, r2, #2
 8002cdc:	9307      	strge	r3, [sp, #28]
 8002cde:	9307      	strlt	r3, [sp, #28]
 8002ce0:	bfb8      	it	lt
 8002ce2:	9204      	strlt	r2, [sp, #16]
 8002ce4:	7823      	ldrb	r3, [r4, #0]
 8002ce6:	2b2e      	cmp	r3, #46	; 0x2e
 8002ce8:	d10c      	bne.n	8002d04 <_svfiprintf_r+0x130>
 8002cea:	7863      	ldrb	r3, [r4, #1]
 8002cec:	2b2a      	cmp	r3, #42	; 0x2a
 8002cee:	d134      	bne.n	8002d5a <_svfiprintf_r+0x186>
 8002cf0:	9b03      	ldr	r3, [sp, #12]
 8002cf2:	1d1a      	adds	r2, r3, #4
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	9203      	str	r2, [sp, #12]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	bfb8      	it	lt
 8002cfc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002d00:	3402      	adds	r4, #2
 8002d02:	9305      	str	r3, [sp, #20]
 8002d04:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8002dcc <_svfiprintf_r+0x1f8>
 8002d08:	7821      	ldrb	r1, [r4, #0]
 8002d0a:	2203      	movs	r2, #3
 8002d0c:	4650      	mov	r0, sl
 8002d0e:	f7fd fa77 	bl	8000200 <memchr>
 8002d12:	b138      	cbz	r0, 8002d24 <_svfiprintf_r+0x150>
 8002d14:	9b04      	ldr	r3, [sp, #16]
 8002d16:	eba0 000a 	sub.w	r0, r0, sl
 8002d1a:	2240      	movs	r2, #64	; 0x40
 8002d1c:	4082      	lsls	r2, r0
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	3401      	adds	r4, #1
 8002d22:	9304      	str	r3, [sp, #16]
 8002d24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002d28:	4825      	ldr	r0, [pc, #148]	; (8002dc0 <_svfiprintf_r+0x1ec>)
 8002d2a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002d2e:	2206      	movs	r2, #6
 8002d30:	f7fd fa66 	bl	8000200 <memchr>
 8002d34:	2800      	cmp	r0, #0
 8002d36:	d038      	beq.n	8002daa <_svfiprintf_r+0x1d6>
 8002d38:	4b22      	ldr	r3, [pc, #136]	; (8002dc4 <_svfiprintf_r+0x1f0>)
 8002d3a:	bb1b      	cbnz	r3, 8002d84 <_svfiprintf_r+0x1b0>
 8002d3c:	9b03      	ldr	r3, [sp, #12]
 8002d3e:	3307      	adds	r3, #7
 8002d40:	f023 0307 	bic.w	r3, r3, #7
 8002d44:	3308      	adds	r3, #8
 8002d46:	9303      	str	r3, [sp, #12]
 8002d48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002d4a:	4433      	add	r3, r6
 8002d4c:	9309      	str	r3, [sp, #36]	; 0x24
 8002d4e:	e768      	b.n	8002c22 <_svfiprintf_r+0x4e>
 8002d50:	fb0c 3202 	mla	r2, ip, r2, r3
 8002d54:	460c      	mov	r4, r1
 8002d56:	2001      	movs	r0, #1
 8002d58:	e7a6      	b.n	8002ca8 <_svfiprintf_r+0xd4>
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	3401      	adds	r4, #1
 8002d5e:	9305      	str	r3, [sp, #20]
 8002d60:	4619      	mov	r1, r3
 8002d62:	f04f 0c0a 	mov.w	ip, #10
 8002d66:	4620      	mov	r0, r4
 8002d68:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002d6c:	3a30      	subs	r2, #48	; 0x30
 8002d6e:	2a09      	cmp	r2, #9
 8002d70:	d903      	bls.n	8002d7a <_svfiprintf_r+0x1a6>
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d0c6      	beq.n	8002d04 <_svfiprintf_r+0x130>
 8002d76:	9105      	str	r1, [sp, #20]
 8002d78:	e7c4      	b.n	8002d04 <_svfiprintf_r+0x130>
 8002d7a:	fb0c 2101 	mla	r1, ip, r1, r2
 8002d7e:	4604      	mov	r4, r0
 8002d80:	2301      	movs	r3, #1
 8002d82:	e7f0      	b.n	8002d66 <_svfiprintf_r+0x192>
 8002d84:	ab03      	add	r3, sp, #12
 8002d86:	9300      	str	r3, [sp, #0]
 8002d88:	462a      	mov	r2, r5
 8002d8a:	4b0f      	ldr	r3, [pc, #60]	; (8002dc8 <_svfiprintf_r+0x1f4>)
 8002d8c:	a904      	add	r1, sp, #16
 8002d8e:	4638      	mov	r0, r7
 8002d90:	f3af 8000 	nop.w
 8002d94:	1c42      	adds	r2, r0, #1
 8002d96:	4606      	mov	r6, r0
 8002d98:	d1d6      	bne.n	8002d48 <_svfiprintf_r+0x174>
 8002d9a:	89ab      	ldrh	r3, [r5, #12]
 8002d9c:	065b      	lsls	r3, r3, #25
 8002d9e:	f53f af2d 	bmi.w	8002bfc <_svfiprintf_r+0x28>
 8002da2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002da4:	b01d      	add	sp, #116	; 0x74
 8002da6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002daa:	ab03      	add	r3, sp, #12
 8002dac:	9300      	str	r3, [sp, #0]
 8002dae:	462a      	mov	r2, r5
 8002db0:	4b05      	ldr	r3, [pc, #20]	; (8002dc8 <_svfiprintf_r+0x1f4>)
 8002db2:	a904      	add	r1, sp, #16
 8002db4:	4638      	mov	r0, r7
 8002db6:	f000 f879 	bl	8002eac <_printf_i>
 8002dba:	e7eb      	b.n	8002d94 <_svfiprintf_r+0x1c0>
 8002dbc:	08003274 	.word	0x08003274
 8002dc0:	0800327e 	.word	0x0800327e
 8002dc4:	00000000 	.word	0x00000000
 8002dc8:	08002b21 	.word	0x08002b21
 8002dcc:	0800327a 	.word	0x0800327a

08002dd0 <_printf_common>:
 8002dd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002dd4:	4616      	mov	r6, r2
 8002dd6:	4699      	mov	r9, r3
 8002dd8:	688a      	ldr	r2, [r1, #8]
 8002dda:	690b      	ldr	r3, [r1, #16]
 8002ddc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002de0:	4293      	cmp	r3, r2
 8002de2:	bfb8      	it	lt
 8002de4:	4613      	movlt	r3, r2
 8002de6:	6033      	str	r3, [r6, #0]
 8002de8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002dec:	4607      	mov	r7, r0
 8002dee:	460c      	mov	r4, r1
 8002df0:	b10a      	cbz	r2, 8002df6 <_printf_common+0x26>
 8002df2:	3301      	adds	r3, #1
 8002df4:	6033      	str	r3, [r6, #0]
 8002df6:	6823      	ldr	r3, [r4, #0]
 8002df8:	0699      	lsls	r1, r3, #26
 8002dfa:	bf42      	ittt	mi
 8002dfc:	6833      	ldrmi	r3, [r6, #0]
 8002dfe:	3302      	addmi	r3, #2
 8002e00:	6033      	strmi	r3, [r6, #0]
 8002e02:	6825      	ldr	r5, [r4, #0]
 8002e04:	f015 0506 	ands.w	r5, r5, #6
 8002e08:	d106      	bne.n	8002e18 <_printf_common+0x48>
 8002e0a:	f104 0a19 	add.w	sl, r4, #25
 8002e0e:	68e3      	ldr	r3, [r4, #12]
 8002e10:	6832      	ldr	r2, [r6, #0]
 8002e12:	1a9b      	subs	r3, r3, r2
 8002e14:	42ab      	cmp	r3, r5
 8002e16:	dc26      	bgt.n	8002e66 <_printf_common+0x96>
 8002e18:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002e1c:	1e13      	subs	r3, r2, #0
 8002e1e:	6822      	ldr	r2, [r4, #0]
 8002e20:	bf18      	it	ne
 8002e22:	2301      	movne	r3, #1
 8002e24:	0692      	lsls	r2, r2, #26
 8002e26:	d42b      	bmi.n	8002e80 <_printf_common+0xb0>
 8002e28:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002e2c:	4649      	mov	r1, r9
 8002e2e:	4638      	mov	r0, r7
 8002e30:	47c0      	blx	r8
 8002e32:	3001      	adds	r0, #1
 8002e34:	d01e      	beq.n	8002e74 <_printf_common+0xa4>
 8002e36:	6823      	ldr	r3, [r4, #0]
 8002e38:	6922      	ldr	r2, [r4, #16]
 8002e3a:	f003 0306 	and.w	r3, r3, #6
 8002e3e:	2b04      	cmp	r3, #4
 8002e40:	bf02      	ittt	eq
 8002e42:	68e5      	ldreq	r5, [r4, #12]
 8002e44:	6833      	ldreq	r3, [r6, #0]
 8002e46:	1aed      	subeq	r5, r5, r3
 8002e48:	68a3      	ldr	r3, [r4, #8]
 8002e4a:	bf0c      	ite	eq
 8002e4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002e50:	2500      	movne	r5, #0
 8002e52:	4293      	cmp	r3, r2
 8002e54:	bfc4      	itt	gt
 8002e56:	1a9b      	subgt	r3, r3, r2
 8002e58:	18ed      	addgt	r5, r5, r3
 8002e5a:	2600      	movs	r6, #0
 8002e5c:	341a      	adds	r4, #26
 8002e5e:	42b5      	cmp	r5, r6
 8002e60:	d11a      	bne.n	8002e98 <_printf_common+0xc8>
 8002e62:	2000      	movs	r0, #0
 8002e64:	e008      	b.n	8002e78 <_printf_common+0xa8>
 8002e66:	2301      	movs	r3, #1
 8002e68:	4652      	mov	r2, sl
 8002e6a:	4649      	mov	r1, r9
 8002e6c:	4638      	mov	r0, r7
 8002e6e:	47c0      	blx	r8
 8002e70:	3001      	adds	r0, #1
 8002e72:	d103      	bne.n	8002e7c <_printf_common+0xac>
 8002e74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002e78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e7c:	3501      	adds	r5, #1
 8002e7e:	e7c6      	b.n	8002e0e <_printf_common+0x3e>
 8002e80:	18e1      	adds	r1, r4, r3
 8002e82:	1c5a      	adds	r2, r3, #1
 8002e84:	2030      	movs	r0, #48	; 0x30
 8002e86:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002e8a:	4422      	add	r2, r4
 8002e8c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002e90:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002e94:	3302      	adds	r3, #2
 8002e96:	e7c7      	b.n	8002e28 <_printf_common+0x58>
 8002e98:	2301      	movs	r3, #1
 8002e9a:	4622      	mov	r2, r4
 8002e9c:	4649      	mov	r1, r9
 8002e9e:	4638      	mov	r0, r7
 8002ea0:	47c0      	blx	r8
 8002ea2:	3001      	adds	r0, #1
 8002ea4:	d0e6      	beq.n	8002e74 <_printf_common+0xa4>
 8002ea6:	3601      	adds	r6, #1
 8002ea8:	e7d9      	b.n	8002e5e <_printf_common+0x8e>
	...

08002eac <_printf_i>:
 8002eac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002eb0:	7e0f      	ldrb	r7, [r1, #24]
 8002eb2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002eb4:	2f78      	cmp	r7, #120	; 0x78
 8002eb6:	4691      	mov	r9, r2
 8002eb8:	4680      	mov	r8, r0
 8002eba:	460c      	mov	r4, r1
 8002ebc:	469a      	mov	sl, r3
 8002ebe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002ec2:	d807      	bhi.n	8002ed4 <_printf_i+0x28>
 8002ec4:	2f62      	cmp	r7, #98	; 0x62
 8002ec6:	d80a      	bhi.n	8002ede <_printf_i+0x32>
 8002ec8:	2f00      	cmp	r7, #0
 8002eca:	f000 80d4 	beq.w	8003076 <_printf_i+0x1ca>
 8002ece:	2f58      	cmp	r7, #88	; 0x58
 8002ed0:	f000 80c0 	beq.w	8003054 <_printf_i+0x1a8>
 8002ed4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002ed8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002edc:	e03a      	b.n	8002f54 <_printf_i+0xa8>
 8002ede:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002ee2:	2b15      	cmp	r3, #21
 8002ee4:	d8f6      	bhi.n	8002ed4 <_printf_i+0x28>
 8002ee6:	a101      	add	r1, pc, #4	; (adr r1, 8002eec <_printf_i+0x40>)
 8002ee8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002eec:	08002f45 	.word	0x08002f45
 8002ef0:	08002f59 	.word	0x08002f59
 8002ef4:	08002ed5 	.word	0x08002ed5
 8002ef8:	08002ed5 	.word	0x08002ed5
 8002efc:	08002ed5 	.word	0x08002ed5
 8002f00:	08002ed5 	.word	0x08002ed5
 8002f04:	08002f59 	.word	0x08002f59
 8002f08:	08002ed5 	.word	0x08002ed5
 8002f0c:	08002ed5 	.word	0x08002ed5
 8002f10:	08002ed5 	.word	0x08002ed5
 8002f14:	08002ed5 	.word	0x08002ed5
 8002f18:	0800305d 	.word	0x0800305d
 8002f1c:	08002f85 	.word	0x08002f85
 8002f20:	08003017 	.word	0x08003017
 8002f24:	08002ed5 	.word	0x08002ed5
 8002f28:	08002ed5 	.word	0x08002ed5
 8002f2c:	0800307f 	.word	0x0800307f
 8002f30:	08002ed5 	.word	0x08002ed5
 8002f34:	08002f85 	.word	0x08002f85
 8002f38:	08002ed5 	.word	0x08002ed5
 8002f3c:	08002ed5 	.word	0x08002ed5
 8002f40:	0800301f 	.word	0x0800301f
 8002f44:	682b      	ldr	r3, [r5, #0]
 8002f46:	1d1a      	adds	r2, r3, #4
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	602a      	str	r2, [r5, #0]
 8002f4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002f50:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002f54:	2301      	movs	r3, #1
 8002f56:	e09f      	b.n	8003098 <_printf_i+0x1ec>
 8002f58:	6820      	ldr	r0, [r4, #0]
 8002f5a:	682b      	ldr	r3, [r5, #0]
 8002f5c:	0607      	lsls	r7, r0, #24
 8002f5e:	f103 0104 	add.w	r1, r3, #4
 8002f62:	6029      	str	r1, [r5, #0]
 8002f64:	d501      	bpl.n	8002f6a <_printf_i+0xbe>
 8002f66:	681e      	ldr	r6, [r3, #0]
 8002f68:	e003      	b.n	8002f72 <_printf_i+0xc6>
 8002f6a:	0646      	lsls	r6, r0, #25
 8002f6c:	d5fb      	bpl.n	8002f66 <_printf_i+0xba>
 8002f6e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8002f72:	2e00      	cmp	r6, #0
 8002f74:	da03      	bge.n	8002f7e <_printf_i+0xd2>
 8002f76:	232d      	movs	r3, #45	; 0x2d
 8002f78:	4276      	negs	r6, r6
 8002f7a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002f7e:	485a      	ldr	r0, [pc, #360]	; (80030e8 <_printf_i+0x23c>)
 8002f80:	230a      	movs	r3, #10
 8002f82:	e012      	b.n	8002faa <_printf_i+0xfe>
 8002f84:	682b      	ldr	r3, [r5, #0]
 8002f86:	6820      	ldr	r0, [r4, #0]
 8002f88:	1d19      	adds	r1, r3, #4
 8002f8a:	6029      	str	r1, [r5, #0]
 8002f8c:	0605      	lsls	r5, r0, #24
 8002f8e:	d501      	bpl.n	8002f94 <_printf_i+0xe8>
 8002f90:	681e      	ldr	r6, [r3, #0]
 8002f92:	e002      	b.n	8002f9a <_printf_i+0xee>
 8002f94:	0641      	lsls	r1, r0, #25
 8002f96:	d5fb      	bpl.n	8002f90 <_printf_i+0xe4>
 8002f98:	881e      	ldrh	r6, [r3, #0]
 8002f9a:	4853      	ldr	r0, [pc, #332]	; (80030e8 <_printf_i+0x23c>)
 8002f9c:	2f6f      	cmp	r7, #111	; 0x6f
 8002f9e:	bf0c      	ite	eq
 8002fa0:	2308      	moveq	r3, #8
 8002fa2:	230a      	movne	r3, #10
 8002fa4:	2100      	movs	r1, #0
 8002fa6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002faa:	6865      	ldr	r5, [r4, #4]
 8002fac:	60a5      	str	r5, [r4, #8]
 8002fae:	2d00      	cmp	r5, #0
 8002fb0:	bfa2      	ittt	ge
 8002fb2:	6821      	ldrge	r1, [r4, #0]
 8002fb4:	f021 0104 	bicge.w	r1, r1, #4
 8002fb8:	6021      	strge	r1, [r4, #0]
 8002fba:	b90e      	cbnz	r6, 8002fc0 <_printf_i+0x114>
 8002fbc:	2d00      	cmp	r5, #0
 8002fbe:	d04b      	beq.n	8003058 <_printf_i+0x1ac>
 8002fc0:	4615      	mov	r5, r2
 8002fc2:	fbb6 f1f3 	udiv	r1, r6, r3
 8002fc6:	fb03 6711 	mls	r7, r3, r1, r6
 8002fca:	5dc7      	ldrb	r7, [r0, r7]
 8002fcc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002fd0:	4637      	mov	r7, r6
 8002fd2:	42bb      	cmp	r3, r7
 8002fd4:	460e      	mov	r6, r1
 8002fd6:	d9f4      	bls.n	8002fc2 <_printf_i+0x116>
 8002fd8:	2b08      	cmp	r3, #8
 8002fda:	d10b      	bne.n	8002ff4 <_printf_i+0x148>
 8002fdc:	6823      	ldr	r3, [r4, #0]
 8002fde:	07de      	lsls	r6, r3, #31
 8002fe0:	d508      	bpl.n	8002ff4 <_printf_i+0x148>
 8002fe2:	6923      	ldr	r3, [r4, #16]
 8002fe4:	6861      	ldr	r1, [r4, #4]
 8002fe6:	4299      	cmp	r1, r3
 8002fe8:	bfde      	ittt	le
 8002fea:	2330      	movle	r3, #48	; 0x30
 8002fec:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002ff0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8002ff4:	1b52      	subs	r2, r2, r5
 8002ff6:	6122      	str	r2, [r4, #16]
 8002ff8:	f8cd a000 	str.w	sl, [sp]
 8002ffc:	464b      	mov	r3, r9
 8002ffe:	aa03      	add	r2, sp, #12
 8003000:	4621      	mov	r1, r4
 8003002:	4640      	mov	r0, r8
 8003004:	f7ff fee4 	bl	8002dd0 <_printf_common>
 8003008:	3001      	adds	r0, #1
 800300a:	d14a      	bne.n	80030a2 <_printf_i+0x1f6>
 800300c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003010:	b004      	add	sp, #16
 8003012:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003016:	6823      	ldr	r3, [r4, #0]
 8003018:	f043 0320 	orr.w	r3, r3, #32
 800301c:	6023      	str	r3, [r4, #0]
 800301e:	4833      	ldr	r0, [pc, #204]	; (80030ec <_printf_i+0x240>)
 8003020:	2778      	movs	r7, #120	; 0x78
 8003022:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003026:	6823      	ldr	r3, [r4, #0]
 8003028:	6829      	ldr	r1, [r5, #0]
 800302a:	061f      	lsls	r7, r3, #24
 800302c:	f851 6b04 	ldr.w	r6, [r1], #4
 8003030:	d402      	bmi.n	8003038 <_printf_i+0x18c>
 8003032:	065f      	lsls	r7, r3, #25
 8003034:	bf48      	it	mi
 8003036:	b2b6      	uxthmi	r6, r6
 8003038:	07df      	lsls	r7, r3, #31
 800303a:	bf48      	it	mi
 800303c:	f043 0320 	orrmi.w	r3, r3, #32
 8003040:	6029      	str	r1, [r5, #0]
 8003042:	bf48      	it	mi
 8003044:	6023      	strmi	r3, [r4, #0]
 8003046:	b91e      	cbnz	r6, 8003050 <_printf_i+0x1a4>
 8003048:	6823      	ldr	r3, [r4, #0]
 800304a:	f023 0320 	bic.w	r3, r3, #32
 800304e:	6023      	str	r3, [r4, #0]
 8003050:	2310      	movs	r3, #16
 8003052:	e7a7      	b.n	8002fa4 <_printf_i+0xf8>
 8003054:	4824      	ldr	r0, [pc, #144]	; (80030e8 <_printf_i+0x23c>)
 8003056:	e7e4      	b.n	8003022 <_printf_i+0x176>
 8003058:	4615      	mov	r5, r2
 800305a:	e7bd      	b.n	8002fd8 <_printf_i+0x12c>
 800305c:	682b      	ldr	r3, [r5, #0]
 800305e:	6826      	ldr	r6, [r4, #0]
 8003060:	6961      	ldr	r1, [r4, #20]
 8003062:	1d18      	adds	r0, r3, #4
 8003064:	6028      	str	r0, [r5, #0]
 8003066:	0635      	lsls	r5, r6, #24
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	d501      	bpl.n	8003070 <_printf_i+0x1c4>
 800306c:	6019      	str	r1, [r3, #0]
 800306e:	e002      	b.n	8003076 <_printf_i+0x1ca>
 8003070:	0670      	lsls	r0, r6, #25
 8003072:	d5fb      	bpl.n	800306c <_printf_i+0x1c0>
 8003074:	8019      	strh	r1, [r3, #0]
 8003076:	2300      	movs	r3, #0
 8003078:	6123      	str	r3, [r4, #16]
 800307a:	4615      	mov	r5, r2
 800307c:	e7bc      	b.n	8002ff8 <_printf_i+0x14c>
 800307e:	682b      	ldr	r3, [r5, #0]
 8003080:	1d1a      	adds	r2, r3, #4
 8003082:	602a      	str	r2, [r5, #0]
 8003084:	681d      	ldr	r5, [r3, #0]
 8003086:	6862      	ldr	r2, [r4, #4]
 8003088:	2100      	movs	r1, #0
 800308a:	4628      	mov	r0, r5
 800308c:	f7fd f8b8 	bl	8000200 <memchr>
 8003090:	b108      	cbz	r0, 8003096 <_printf_i+0x1ea>
 8003092:	1b40      	subs	r0, r0, r5
 8003094:	6060      	str	r0, [r4, #4]
 8003096:	6863      	ldr	r3, [r4, #4]
 8003098:	6123      	str	r3, [r4, #16]
 800309a:	2300      	movs	r3, #0
 800309c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80030a0:	e7aa      	b.n	8002ff8 <_printf_i+0x14c>
 80030a2:	6923      	ldr	r3, [r4, #16]
 80030a4:	462a      	mov	r2, r5
 80030a6:	4649      	mov	r1, r9
 80030a8:	4640      	mov	r0, r8
 80030aa:	47d0      	blx	sl
 80030ac:	3001      	adds	r0, #1
 80030ae:	d0ad      	beq.n	800300c <_printf_i+0x160>
 80030b0:	6823      	ldr	r3, [r4, #0]
 80030b2:	079b      	lsls	r3, r3, #30
 80030b4:	d413      	bmi.n	80030de <_printf_i+0x232>
 80030b6:	68e0      	ldr	r0, [r4, #12]
 80030b8:	9b03      	ldr	r3, [sp, #12]
 80030ba:	4298      	cmp	r0, r3
 80030bc:	bfb8      	it	lt
 80030be:	4618      	movlt	r0, r3
 80030c0:	e7a6      	b.n	8003010 <_printf_i+0x164>
 80030c2:	2301      	movs	r3, #1
 80030c4:	4632      	mov	r2, r6
 80030c6:	4649      	mov	r1, r9
 80030c8:	4640      	mov	r0, r8
 80030ca:	47d0      	blx	sl
 80030cc:	3001      	adds	r0, #1
 80030ce:	d09d      	beq.n	800300c <_printf_i+0x160>
 80030d0:	3501      	adds	r5, #1
 80030d2:	68e3      	ldr	r3, [r4, #12]
 80030d4:	9903      	ldr	r1, [sp, #12]
 80030d6:	1a5b      	subs	r3, r3, r1
 80030d8:	42ab      	cmp	r3, r5
 80030da:	dcf2      	bgt.n	80030c2 <_printf_i+0x216>
 80030dc:	e7eb      	b.n	80030b6 <_printf_i+0x20a>
 80030de:	2500      	movs	r5, #0
 80030e0:	f104 0619 	add.w	r6, r4, #25
 80030e4:	e7f5      	b.n	80030d2 <_printf_i+0x226>
 80030e6:	bf00      	nop
 80030e8:	08003285 	.word	0x08003285
 80030ec:	08003296 	.word	0x08003296

080030f0 <memmove>:
 80030f0:	4288      	cmp	r0, r1
 80030f2:	b510      	push	{r4, lr}
 80030f4:	eb01 0402 	add.w	r4, r1, r2
 80030f8:	d902      	bls.n	8003100 <memmove+0x10>
 80030fa:	4284      	cmp	r4, r0
 80030fc:	4623      	mov	r3, r4
 80030fe:	d807      	bhi.n	8003110 <memmove+0x20>
 8003100:	1e43      	subs	r3, r0, #1
 8003102:	42a1      	cmp	r1, r4
 8003104:	d008      	beq.n	8003118 <memmove+0x28>
 8003106:	f811 2b01 	ldrb.w	r2, [r1], #1
 800310a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800310e:	e7f8      	b.n	8003102 <memmove+0x12>
 8003110:	4402      	add	r2, r0
 8003112:	4601      	mov	r1, r0
 8003114:	428a      	cmp	r2, r1
 8003116:	d100      	bne.n	800311a <memmove+0x2a>
 8003118:	bd10      	pop	{r4, pc}
 800311a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800311e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003122:	e7f7      	b.n	8003114 <memmove+0x24>

08003124 <_sbrk_r>:
 8003124:	b538      	push	{r3, r4, r5, lr}
 8003126:	4d06      	ldr	r5, [pc, #24]	; (8003140 <_sbrk_r+0x1c>)
 8003128:	2300      	movs	r3, #0
 800312a:	4604      	mov	r4, r0
 800312c:	4608      	mov	r0, r1
 800312e:	602b      	str	r3, [r5, #0]
 8003130:	f7fd fd66 	bl	8000c00 <_sbrk>
 8003134:	1c43      	adds	r3, r0, #1
 8003136:	d102      	bne.n	800313e <_sbrk_r+0x1a>
 8003138:	682b      	ldr	r3, [r5, #0]
 800313a:	b103      	cbz	r3, 800313e <_sbrk_r+0x1a>
 800313c:	6023      	str	r3, [r4, #0]
 800313e:	bd38      	pop	{r3, r4, r5, pc}
 8003140:	20000220 	.word	0x20000220

08003144 <memcpy>:
 8003144:	440a      	add	r2, r1
 8003146:	4291      	cmp	r1, r2
 8003148:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800314c:	d100      	bne.n	8003150 <memcpy+0xc>
 800314e:	4770      	bx	lr
 8003150:	b510      	push	{r4, lr}
 8003152:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003156:	f803 4f01 	strb.w	r4, [r3, #1]!
 800315a:	4291      	cmp	r1, r2
 800315c:	d1f9      	bne.n	8003152 <memcpy+0xe>
 800315e:	bd10      	pop	{r4, pc}

08003160 <_realloc_r>:
 8003160:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003164:	4680      	mov	r8, r0
 8003166:	4614      	mov	r4, r2
 8003168:	460e      	mov	r6, r1
 800316a:	b921      	cbnz	r1, 8003176 <_realloc_r+0x16>
 800316c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003170:	4611      	mov	r1, r2
 8003172:	f7ff bc49 	b.w	8002a08 <_malloc_r>
 8003176:	b92a      	cbnz	r2, 8003184 <_realloc_r+0x24>
 8003178:	f7ff fbda 	bl	8002930 <_free_r>
 800317c:	4625      	mov	r5, r4
 800317e:	4628      	mov	r0, r5
 8003180:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003184:	f000 f81b 	bl	80031be <_malloc_usable_size_r>
 8003188:	4284      	cmp	r4, r0
 800318a:	4607      	mov	r7, r0
 800318c:	d802      	bhi.n	8003194 <_realloc_r+0x34>
 800318e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003192:	d812      	bhi.n	80031ba <_realloc_r+0x5a>
 8003194:	4621      	mov	r1, r4
 8003196:	4640      	mov	r0, r8
 8003198:	f7ff fc36 	bl	8002a08 <_malloc_r>
 800319c:	4605      	mov	r5, r0
 800319e:	2800      	cmp	r0, #0
 80031a0:	d0ed      	beq.n	800317e <_realloc_r+0x1e>
 80031a2:	42bc      	cmp	r4, r7
 80031a4:	4622      	mov	r2, r4
 80031a6:	4631      	mov	r1, r6
 80031a8:	bf28      	it	cs
 80031aa:	463a      	movcs	r2, r7
 80031ac:	f7ff ffca 	bl	8003144 <memcpy>
 80031b0:	4631      	mov	r1, r6
 80031b2:	4640      	mov	r0, r8
 80031b4:	f7ff fbbc 	bl	8002930 <_free_r>
 80031b8:	e7e1      	b.n	800317e <_realloc_r+0x1e>
 80031ba:	4635      	mov	r5, r6
 80031bc:	e7df      	b.n	800317e <_realloc_r+0x1e>

080031be <_malloc_usable_size_r>:
 80031be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80031c2:	1f18      	subs	r0, r3, #4
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	bfbc      	itt	lt
 80031c8:	580b      	ldrlt	r3, [r1, r0]
 80031ca:	18c0      	addlt	r0, r0, r3
 80031cc:	4770      	bx	lr
	...

080031d0 <_init>:
 80031d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031d2:	bf00      	nop
 80031d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031d6:	bc08      	pop	{r3}
 80031d8:	469e      	mov	lr, r3
 80031da:	4770      	bx	lr

080031dc <_fini>:
 80031dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031de:	bf00      	nop
 80031e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031e2:	bc08      	pop	{r3}
 80031e4:	469e      	mov	lr, r3
 80031e6:	4770      	bx	lr
