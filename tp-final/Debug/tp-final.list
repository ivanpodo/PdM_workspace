
tp-final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ec0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b4  08005070  08005070  00015070  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005324  08005324  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  08005324  08005324  00015324  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800532c  0800532c  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800532c  0800532c  0001532c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005330  08005330  00015330  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08005334  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020084  2**0
                  CONTENTS
 10 .bss          00000294  20000084  20000084  00020084  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000318  20000318  00020084  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000d081  00000000  00000000  000200f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002928  00000000  00000000  0002d178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000c30  00000000  00000000  0002faa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000094f  00000000  00000000  000306d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000278d6  00000000  00000000  0003101f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001537b  00000000  00000000  000588f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e3832  00000000  00000000  0006dc70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000346c  00000000  00000000  001514a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006d  00000000  00000000  00154910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000084 	.word	0x20000084
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08005058 	.word	0x08005058

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000088 	.word	0x20000088
 80001ec:	08005058 	.word	0x08005058

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <AMB_MON_Init>:
 * Both must be connected to PB8 I2C_A_SCL & PB9 I2C_A_SDA
 * 
 * @return bool_t 
 */
bool_t AMB_MON_Init()
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b082      	sub	sp, #8
 8000590:	af00      	add	r7, sp, #0
    bool_t _ret = true;
 8000592:	2301      	movs	r3, #1
 8000594:	71fb      	strb	r3, [r7, #7]
    FSM.state_ = INITIALIZATION;
 8000596:	4b0e      	ldr	r3, [pc, #56]	; (80005d0 <AMB_MON_Init+0x44>)
 8000598:	2201      	movs	r2, #1
 800059a:	701a      	strb	r2, [r3, #0]

    delayInit(&dataDelay, UPDATE_DATA_INTERVAL);
 800059c:	f242 7110 	movw	r1, #10000	; 0x2710
 80005a0:	480c      	ldr	r0, [pc, #48]	; (80005d4 <AMB_MON_Init+0x48>)
 80005a2:	f000 fcc3 	bl	8000f2c <delayInit>

    if (LCD_Init() != LCD_OK)
 80005a6:	f000 ff17 	bl	80013d8 <LCD_Init>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <AMB_MON_Init+0x28>
    {
        Error_Handler();
 80005b0:	f000 fbfa 	bl	8000da8 <Error_Handler>
    }

    LCD_Clear();
 80005b4:	f000 ff7a 	bl	80014ac <LCD_Clear>
    
    if (SCD_Init() != SCD_OK)
 80005b8:	f001 f803 	bl	80015c2 <SCD_Init>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d001      	beq.n	80005c6 <AMB_MON_Init+0x3a>
    {
        Error_Handler();
 80005c2:	f000 fbf1 	bl	8000da8 <Error_Handler>
    }
    
    return _ret;
 80005c6:	79fb      	ldrb	r3, [r7, #7]
}
 80005c8:	4618      	mov	r0, r3
 80005ca:	3708      	adds	r7, #8
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	200000a0 	.word	0x200000a0
 80005d4:	200000b0 	.word	0x200000b0

080005d8 <AMB_MON_Update>:
 * 
 * @param dir 
 * @param swPressed 
 */
void AMB_MON_Update(eMovingDir dir, bool_t swPressed)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
 80005de:	4603      	mov	r3, r0
 80005e0:	460a      	mov	r2, r1
 80005e2:	71fb      	strb	r3, [r7, #7]
 80005e4:	4613      	mov	r3, r2
 80005e6:	71bb      	strb	r3, [r7, #6]
    switch (FSM.state_)
 80005e8:	4baf      	ldr	r3, [pc, #700]	; (80008a8 <AMB_MON_Update+0x2d0>)
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	3b01      	subs	r3, #1
 80005ee:	2b0a      	cmp	r3, #10
 80005f0:	f200 82b7 	bhi.w	8000b62 <AMB_MON_Update+0x58a>
 80005f4:	a201      	add	r2, pc, #4	; (adr r2, 80005fc <AMB_MON_Update+0x24>)
 80005f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005fa:	bf00      	nop
 80005fc:	08000629 	.word	0x08000629
 8000600:	08000655 	.word	0x08000655
 8000604:	080006ad 	.word	0x080006ad
 8000608:	080006fb 	.word	0x080006fb
 800060c:	08000749 	.word	0x08000749
 8000610:	080007ab 	.word	0x080007ab
 8000614:	0800080d 	.word	0x0800080d
 8000618:	0800086f 	.word	0x0800086f
 800061c:	08000923 	.word	0x08000923
 8000620:	080009e3 	.word	0x080009e3
 8000624:	08000aa3 	.word	0x08000aa3
    {
        case INITIALIZATION:
            uartSendString(INITIALIZATION_STR);
 8000628:	48a0      	ldr	r0, [pc, #640]	; (80008ac <AMB_MON_Update+0x2d4>)
 800062a:	f001 f937 	bl	800189c <uartSendString>
            LCD_PosCharacH(0);
 800062e:	2000      	movs	r0, #0
 8000630:	f000 ff46 	bl	80014c0 <LCD_PosCharacH>
            LCD_SendText(LCD_INITIALIZATION_STR);
 8000634:	489e      	ldr	r0, [pc, #632]	; (80008b0 <AMB_MON_Update+0x2d8>)
 8000636:	f000 ff21 	bl	800147c <LCD_SendText>

            SCD_CleanSensor(&Sensor);
 800063a:	489e      	ldr	r0, [pc, #632]	; (80008b4 <AMB_MON_Update+0x2dc>)
 800063c:	f000 ffe1 	bl	8001602 <SCD_CleanSensor>
            SCD_PollData(&Sensor);
 8000640:	489c      	ldr	r0, [pc, #624]	; (80008b4 <AMB_MON_Update+0x2dc>)
 8000642:	f001 f801 	bl	8001648 <SCD_PollData>

            FSM.state_ = DISPLAY_DATA_TOP;
 8000646:	4b98      	ldr	r3, [pc, #608]	; (80008a8 <AMB_MON_Update+0x2d0>)
 8000648:	2202      	movs	r2, #2
 800064a:	701a      	strb	r2, [r3, #0]
            entry = true;
 800064c:	4b9a      	ldr	r3, [pc, #616]	; (80008b8 <AMB_MON_Update+0x2e0>)
 800064e:	2201      	movs	r2, #1
 8000650:	701a      	strb	r2, [r3, #0]
            break;
 8000652:	e29d      	b.n	8000b90 <AMB_MON_Update+0x5b8>

        case DISPLAY_DATA_TOP:
            if (entry)
 8000654:	4b98      	ldr	r3, [pc, #608]	; (80008b8 <AMB_MON_Update+0x2e0>)
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	2b00      	cmp	r3, #0
 800065a:	d00d      	beq.n	8000678 <AMB_MON_Update+0xa0>
            {
                LCD_Clear();
 800065c:	f000 ff26 	bl	80014ac <LCD_Clear>
                LCD_PosCharacH(0);
 8000660:	2000      	movs	r0, #0
 8000662:	f000 ff2d 	bl	80014c0 <LCD_PosCharacH>
                uartSendString(DISPLAY_DATA_TOP_STR);
 8000666:	4895      	ldr	r0, [pc, #596]	; (80008bc <AMB_MON_Update+0x2e4>)
 8000668:	f001 f918 	bl	800189c <uartSendString>
                updateDisplayData(&Sensor);
 800066c:	4891      	ldr	r0, [pc, #580]	; (80008b4 <AMB_MON_Update+0x2dc>)
 800066e:	f000 faab 	bl	8000bc8 <updateDisplayData>
                entry = false;
 8000672:	4b91      	ldr	r3, [pc, #580]	; (80008b8 <AMB_MON_Update+0x2e0>)
 8000674:	2200      	movs	r2, #0
 8000676:	701a      	strb	r2, [r3, #0]
            }

            if (delayRead(&dataDelay))
 8000678:	4891      	ldr	r0, [pc, #580]	; (80008c0 <AMB_MON_Update+0x2e8>)
 800067a:	f000 fc6e 	bl	8000f5a <delayRead>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d008      	beq.n	8000696 <AMB_MON_Update+0xbe>
            {
                uartSendString(POLLING_SENSOR_DATA);
 8000684:	488f      	ldr	r0, [pc, #572]	; (80008c4 <AMB_MON_Update+0x2ec>)
 8000686:	f001 f909 	bl	800189c <uartSendString>
                SCD_PollData(&Sensor);
 800068a:	488a      	ldr	r0, [pc, #552]	; (80008b4 <AMB_MON_Update+0x2dc>)
 800068c:	f000 ffdc 	bl	8001648 <SCD_PollData>
                updateDisplayData(&Sensor);
 8000690:	4888      	ldr	r0, [pc, #544]	; (80008b4 <AMB_MON_Update+0x2dc>)
 8000692:	f000 fa99 	bl	8000bc8 <updateDisplayData>
            }
            
            if (swPressed)
 8000696:	79bb      	ldrb	r3, [r7, #6]
 8000698:	2b00      	cmp	r3, #0
 800069a:	f000 8266 	beq.w	8000b6a <AMB_MON_Update+0x592>
            {
                FSM.state_ = DISPLAY_DATA;
 800069e:	4b82      	ldr	r3, [pc, #520]	; (80008a8 <AMB_MON_Update+0x2d0>)
 80006a0:	2203      	movs	r2, #3
 80006a2:	701a      	strb	r2, [r3, #0]
                entry = true;
 80006a4:	4b84      	ldr	r3, [pc, #528]	; (80008b8 <AMB_MON_Update+0x2e0>)
 80006a6:	2201      	movs	r2, #1
 80006a8:	701a      	strb	r2, [r3, #0]
            }
            
            break;
 80006aa:	e25e      	b.n	8000b6a <AMB_MON_Update+0x592>

        case DISPLAY_DATA:
            if (entry)
 80006ac:	4b82      	ldr	r3, [pc, #520]	; (80008b8 <AMB_MON_Update+0x2e0>)
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d00d      	beq.n	80006d0 <AMB_MON_Update+0xf8>
            {
                LCD_Clear();
 80006b4:	f000 fefa 	bl	80014ac <LCD_Clear>
                LCD_PosCharacH(0);
 80006b8:	2000      	movs	r0, #0
 80006ba:	f000 ff01 	bl	80014c0 <LCD_PosCharacH>
                LCD_SendText(LCD_DISPLAY_DATA_STR);
 80006be:	4882      	ldr	r0, [pc, #520]	; (80008c8 <AMB_MON_Update+0x2f0>)
 80006c0:	f000 fedc 	bl	800147c <LCD_SendText>
                uartSendString(DISPLAY_DATA_STR);
 80006c4:	4881      	ldr	r0, [pc, #516]	; (80008cc <AMB_MON_Update+0x2f4>)
 80006c6:	f001 f8e9 	bl	800189c <uartSendString>
                entry = false;
 80006ca:	4b7b      	ldr	r3, [pc, #492]	; (80008b8 <AMB_MON_Update+0x2e0>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	701a      	strb	r2, [r3, #0]
            }

            if (swPressed)
 80006d0:	79bb      	ldrb	r3, [r7, #6]
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d006      	beq.n	80006e4 <AMB_MON_Update+0x10c>
            {
                FSM.state_ = DISPLAY_DATA_TOP;
 80006d6:	4b74      	ldr	r3, [pc, #464]	; (80008a8 <AMB_MON_Update+0x2d0>)
 80006d8:	2202      	movs	r2, #2
 80006da:	701a      	strb	r2, [r3, #0]
                entry = true;
 80006dc:	4b76      	ldr	r3, [pc, #472]	; (80008b8 <AMB_MON_Update+0x2e0>)
 80006de:	2201      	movs	r2, #1
 80006e0:	701a      	strb	r2, [r3, #0]
            {
                FSM.state_ = CALIBRATION;
                entry = true;
            }
            
            break;
 80006e2:	e244      	b.n	8000b6e <AMB_MON_Update+0x596>
            else if (dir != INVALID)
 80006e4:	79fb      	ldrb	r3, [r7, #7]
 80006e6:	2b02      	cmp	r3, #2
 80006e8:	f000 8241 	beq.w	8000b6e <AMB_MON_Update+0x596>
                FSM.state_ = CALIBRATION;
 80006ec:	4b6e      	ldr	r3, [pc, #440]	; (80008a8 <AMB_MON_Update+0x2d0>)
 80006ee:	2204      	movs	r2, #4
 80006f0:	701a      	strb	r2, [r3, #0]
                entry = true;
 80006f2:	4b71      	ldr	r3, [pc, #452]	; (80008b8 <AMB_MON_Update+0x2e0>)
 80006f4:	2201      	movs	r2, #1
 80006f6:	701a      	strb	r2, [r3, #0]
            break;
 80006f8:	e239      	b.n	8000b6e <AMB_MON_Update+0x596>

        case CALIBRATION:
            if (entry)
 80006fa:	4b6f      	ldr	r3, [pc, #444]	; (80008b8 <AMB_MON_Update+0x2e0>)
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d00d      	beq.n	800071e <AMB_MON_Update+0x146>
            {
                LCD_Clear();
 8000702:	f000 fed3 	bl	80014ac <LCD_Clear>
                LCD_PosCharacH(0);
 8000706:	2000      	movs	r0, #0
 8000708:	f000 feda 	bl	80014c0 <LCD_PosCharacH>
                LCD_SendText(LCD_CALIBRATION_STR);
 800070c:	4870      	ldr	r0, [pc, #448]	; (80008d0 <AMB_MON_Update+0x2f8>)
 800070e:	f000 feb5 	bl	800147c <LCD_SendText>
                uartSendString(CALIBRATION_STR);
 8000712:	4870      	ldr	r0, [pc, #448]	; (80008d4 <AMB_MON_Update+0x2fc>)
 8000714:	f001 f8c2 	bl	800189c <uartSendString>
                entry = false;
 8000718:	4b67      	ldr	r3, [pc, #412]	; (80008b8 <AMB_MON_Update+0x2e0>)
 800071a:	2200      	movs	r2, #0
 800071c:	701a      	strb	r2, [r3, #0]
            }

            if (swPressed)
 800071e:	79bb      	ldrb	r3, [r7, #6]
 8000720:	2b00      	cmp	r3, #0
 8000722:	d006      	beq.n	8000732 <AMB_MON_Update+0x15a>
            {
                FSM.state_ = SELECT_TEMPERATURE;
 8000724:	4b60      	ldr	r3, [pc, #384]	; (80008a8 <AMB_MON_Update+0x2d0>)
 8000726:	2205      	movs	r2, #5
 8000728:	701a      	strb	r2, [r3, #0]
                entry = true;
 800072a:	4b63      	ldr	r3, [pc, #396]	; (80008b8 <AMB_MON_Update+0x2e0>)
 800072c:	2201      	movs	r2, #1
 800072e:	701a      	strb	r2, [r3, #0]
            {
                FSM.state_ = DISPLAY_DATA;
                entry = true;
            }
            
            break;
 8000730:	e21f      	b.n	8000b72 <AMB_MON_Update+0x59a>
            else if (dir != INVALID)
 8000732:	79fb      	ldrb	r3, [r7, #7]
 8000734:	2b02      	cmp	r3, #2
 8000736:	f000 821c 	beq.w	8000b72 <AMB_MON_Update+0x59a>
                FSM.state_ = DISPLAY_DATA;
 800073a:	4b5b      	ldr	r3, [pc, #364]	; (80008a8 <AMB_MON_Update+0x2d0>)
 800073c:	2203      	movs	r2, #3
 800073e:	701a      	strb	r2, [r3, #0]
                entry = true;
 8000740:	4b5d      	ldr	r3, [pc, #372]	; (80008b8 <AMB_MON_Update+0x2e0>)
 8000742:	2201      	movs	r2, #1
 8000744:	701a      	strb	r2, [r3, #0]
            break;
 8000746:	e214      	b.n	8000b72 <AMB_MON_Update+0x59a>

        case SELECT_TEMPERATURE:
            if (entry)
 8000748:	4b5b      	ldr	r3, [pc, #364]	; (80008b8 <AMB_MON_Update+0x2e0>)
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	2b00      	cmp	r3, #0
 800074e:	d00d      	beq.n	800076c <AMB_MON_Update+0x194>
            {
                LCD_Clear();
 8000750:	f000 feac 	bl	80014ac <LCD_Clear>
                LCD_PosCharacH(0);
 8000754:	2000      	movs	r0, #0
 8000756:	f000 feb3 	bl	80014c0 <LCD_PosCharacH>
                LCD_SendText(LCD_SELECT_TEMPERATURE_STR);
 800075a:	485f      	ldr	r0, [pc, #380]	; (80008d8 <AMB_MON_Update+0x300>)
 800075c:	f000 fe8e 	bl	800147c <LCD_SendText>
                uartSendString(SELECT_TEMPERATURE_STR);
 8000760:	485e      	ldr	r0, [pc, #376]	; (80008dc <AMB_MON_Update+0x304>)
 8000762:	f001 f89b 	bl	800189c <uartSendString>
                entry = false;
 8000766:	4b54      	ldr	r3, [pc, #336]	; (80008b8 <AMB_MON_Update+0x2e0>)
 8000768:	2200      	movs	r2, #0
 800076a:	701a      	strb	r2, [r3, #0]
            }

            if (swPressed)
 800076c:	79bb      	ldrb	r3, [r7, #6]
 800076e:	2b00      	cmp	r3, #0
 8000770:	d006      	beq.n	8000780 <AMB_MON_Update+0x1a8>
            {
                FSM.state_ = OFFSET_TEMPERATURE;
 8000772:	4b4d      	ldr	r3, [pc, #308]	; (80008a8 <AMB_MON_Update+0x2d0>)
 8000774:	2209      	movs	r2, #9
 8000776:	701a      	strb	r2, [r3, #0]
                entry = true;
 8000778:	4b4f      	ldr	r3, [pc, #316]	; (80008b8 <AMB_MON_Update+0x2e0>)
 800077a:	2201      	movs	r2, #1
 800077c:	701a      	strb	r2, [r3, #0]
            else if (dir == CounterCW)
            {
                FSM.state_ = EXIT;
                entry = true;
            }
            break;
 800077e:	e1fa      	b.n	8000b76 <AMB_MON_Update+0x59e>
            else if (dir == CW)
 8000780:	79fb      	ldrb	r3, [r7, #7]
 8000782:	2b01      	cmp	r3, #1
 8000784:	d106      	bne.n	8000794 <AMB_MON_Update+0x1bc>
                FSM.state_ = SELECT_HUMIDITY;
 8000786:	4b48      	ldr	r3, [pc, #288]	; (80008a8 <AMB_MON_Update+0x2d0>)
 8000788:	2206      	movs	r2, #6
 800078a:	701a      	strb	r2, [r3, #0]
                entry = true;
 800078c:	4b4a      	ldr	r3, [pc, #296]	; (80008b8 <AMB_MON_Update+0x2e0>)
 800078e:	2201      	movs	r2, #1
 8000790:	701a      	strb	r2, [r3, #0]
            break;
 8000792:	e1f0      	b.n	8000b76 <AMB_MON_Update+0x59e>
            else if (dir == CounterCW)
 8000794:	79fb      	ldrb	r3, [r7, #7]
 8000796:	2b00      	cmp	r3, #0
 8000798:	f040 81ed 	bne.w	8000b76 <AMB_MON_Update+0x59e>
                FSM.state_ = EXIT;
 800079c:	4b42      	ldr	r3, [pc, #264]	; (80008a8 <AMB_MON_Update+0x2d0>)
 800079e:	2208      	movs	r2, #8
 80007a0:	701a      	strb	r2, [r3, #0]
                entry = true;
 80007a2:	4b45      	ldr	r3, [pc, #276]	; (80008b8 <AMB_MON_Update+0x2e0>)
 80007a4:	2201      	movs	r2, #1
 80007a6:	701a      	strb	r2, [r3, #0]
            break;
 80007a8:	e1e5      	b.n	8000b76 <AMB_MON_Update+0x59e>

        case SELECT_HUMIDITY:
            if (entry)
 80007aa:	4b43      	ldr	r3, [pc, #268]	; (80008b8 <AMB_MON_Update+0x2e0>)
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d00d      	beq.n	80007ce <AMB_MON_Update+0x1f6>
            {
                LCD_Clear();
 80007b2:	f000 fe7b 	bl	80014ac <LCD_Clear>
                LCD_PosCharacH(0);
 80007b6:	2000      	movs	r0, #0
 80007b8:	f000 fe82 	bl	80014c0 <LCD_PosCharacH>
                LCD_SendText(LCD_SELECT_HUMIDITY_STR);
 80007bc:	4848      	ldr	r0, [pc, #288]	; (80008e0 <AMB_MON_Update+0x308>)
 80007be:	f000 fe5d 	bl	800147c <LCD_SendText>
                uartSendString(SELECT_HUMIDITY_STR);
 80007c2:	4848      	ldr	r0, [pc, #288]	; (80008e4 <AMB_MON_Update+0x30c>)
 80007c4:	f001 f86a 	bl	800189c <uartSendString>
                entry = false;
 80007c8:	4b3b      	ldr	r3, [pc, #236]	; (80008b8 <AMB_MON_Update+0x2e0>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	701a      	strb	r2, [r3, #0]
            }

            if (swPressed)
 80007ce:	79bb      	ldrb	r3, [r7, #6]
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d006      	beq.n	80007e2 <AMB_MON_Update+0x20a>
            {
                FSM.state_ = OFFSET_HUMIDITY;
 80007d4:	4b34      	ldr	r3, [pc, #208]	; (80008a8 <AMB_MON_Update+0x2d0>)
 80007d6:	220a      	movs	r2, #10
 80007d8:	701a      	strb	r2, [r3, #0]
                entry = true;
 80007da:	4b37      	ldr	r3, [pc, #220]	; (80008b8 <AMB_MON_Update+0x2e0>)
 80007dc:	2201      	movs	r2, #1
 80007de:	701a      	strb	r2, [r3, #0]
            else if (dir == CounterCW)
            {
                FSM.state_ = SELECT_TEMPERATURE;
                entry = true;
            }
            break;
 80007e0:	e1cb      	b.n	8000b7a <AMB_MON_Update+0x5a2>
            else if (dir == CW)
 80007e2:	79fb      	ldrb	r3, [r7, #7]
 80007e4:	2b01      	cmp	r3, #1
 80007e6:	d106      	bne.n	80007f6 <AMB_MON_Update+0x21e>
                FSM.state_ = SELECT_CO2;
 80007e8:	4b2f      	ldr	r3, [pc, #188]	; (80008a8 <AMB_MON_Update+0x2d0>)
 80007ea:	2207      	movs	r2, #7
 80007ec:	701a      	strb	r2, [r3, #0]
                entry = true;
 80007ee:	4b32      	ldr	r3, [pc, #200]	; (80008b8 <AMB_MON_Update+0x2e0>)
 80007f0:	2201      	movs	r2, #1
 80007f2:	701a      	strb	r2, [r3, #0]
            break;
 80007f4:	e1c1      	b.n	8000b7a <AMB_MON_Update+0x5a2>
            else if (dir == CounterCW)
 80007f6:	79fb      	ldrb	r3, [r7, #7]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	f040 81be 	bne.w	8000b7a <AMB_MON_Update+0x5a2>
                FSM.state_ = SELECT_TEMPERATURE;
 80007fe:	4b2a      	ldr	r3, [pc, #168]	; (80008a8 <AMB_MON_Update+0x2d0>)
 8000800:	2205      	movs	r2, #5
 8000802:	701a      	strb	r2, [r3, #0]
                entry = true;
 8000804:	4b2c      	ldr	r3, [pc, #176]	; (80008b8 <AMB_MON_Update+0x2e0>)
 8000806:	2201      	movs	r2, #1
 8000808:	701a      	strb	r2, [r3, #0]
            break;
 800080a:	e1b6      	b.n	8000b7a <AMB_MON_Update+0x5a2>

        case SELECT_CO2:
            if (entry)
 800080c:	4b2a      	ldr	r3, [pc, #168]	; (80008b8 <AMB_MON_Update+0x2e0>)
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	2b00      	cmp	r3, #0
 8000812:	d00d      	beq.n	8000830 <AMB_MON_Update+0x258>
            {
                LCD_Clear();
 8000814:	f000 fe4a 	bl	80014ac <LCD_Clear>
                LCD_PosCharacH(0);
 8000818:	2000      	movs	r0, #0
 800081a:	f000 fe51 	bl	80014c0 <LCD_PosCharacH>
                LCD_SendText(LCD_SELECT_CO2_STR);
 800081e:	4832      	ldr	r0, [pc, #200]	; (80008e8 <AMB_MON_Update+0x310>)
 8000820:	f000 fe2c 	bl	800147c <LCD_SendText>
                uartSendString(SELECT_CO2_STR);
 8000824:	4831      	ldr	r0, [pc, #196]	; (80008ec <AMB_MON_Update+0x314>)
 8000826:	f001 f839 	bl	800189c <uartSendString>
                entry = false;
 800082a:	4b23      	ldr	r3, [pc, #140]	; (80008b8 <AMB_MON_Update+0x2e0>)
 800082c:	2200      	movs	r2, #0
 800082e:	701a      	strb	r2, [r3, #0]
            }

            if (swPressed)
 8000830:	79bb      	ldrb	r3, [r7, #6]
 8000832:	2b00      	cmp	r3, #0
 8000834:	d006      	beq.n	8000844 <AMB_MON_Update+0x26c>
            {
                FSM.state_ = OFFSET_CO2;
 8000836:	4b1c      	ldr	r3, [pc, #112]	; (80008a8 <AMB_MON_Update+0x2d0>)
 8000838:	220b      	movs	r2, #11
 800083a:	701a      	strb	r2, [r3, #0]
                entry = true;
 800083c:	4b1e      	ldr	r3, [pc, #120]	; (80008b8 <AMB_MON_Update+0x2e0>)
 800083e:	2201      	movs	r2, #1
 8000840:	701a      	strb	r2, [r3, #0]
            else if (dir == CounterCW)
            {
                FSM.state_ = SELECT_HUMIDITY;
                entry = true;
            }
            break;
 8000842:	e19c      	b.n	8000b7e <AMB_MON_Update+0x5a6>
            else if (dir == CW)
 8000844:	79fb      	ldrb	r3, [r7, #7]
 8000846:	2b01      	cmp	r3, #1
 8000848:	d106      	bne.n	8000858 <AMB_MON_Update+0x280>
                FSM.state_ = EXIT;
 800084a:	4b17      	ldr	r3, [pc, #92]	; (80008a8 <AMB_MON_Update+0x2d0>)
 800084c:	2208      	movs	r2, #8
 800084e:	701a      	strb	r2, [r3, #0]
                entry = true;
 8000850:	4b19      	ldr	r3, [pc, #100]	; (80008b8 <AMB_MON_Update+0x2e0>)
 8000852:	2201      	movs	r2, #1
 8000854:	701a      	strb	r2, [r3, #0]
            break;
 8000856:	e192      	b.n	8000b7e <AMB_MON_Update+0x5a6>
            else if (dir == CounterCW)
 8000858:	79fb      	ldrb	r3, [r7, #7]
 800085a:	2b00      	cmp	r3, #0
 800085c:	f040 818f 	bne.w	8000b7e <AMB_MON_Update+0x5a6>
                FSM.state_ = SELECT_HUMIDITY;
 8000860:	4b11      	ldr	r3, [pc, #68]	; (80008a8 <AMB_MON_Update+0x2d0>)
 8000862:	2206      	movs	r2, #6
 8000864:	701a      	strb	r2, [r3, #0]
                entry = true;
 8000866:	4b14      	ldr	r3, [pc, #80]	; (80008b8 <AMB_MON_Update+0x2e0>)
 8000868:	2201      	movs	r2, #1
 800086a:	701a      	strb	r2, [r3, #0]
            break;
 800086c:	e187      	b.n	8000b7e <AMB_MON_Update+0x5a6>

        case EXIT:
            if (entry)
 800086e:	4b12      	ldr	r3, [pc, #72]	; (80008b8 <AMB_MON_Update+0x2e0>)
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	2b00      	cmp	r3, #0
 8000874:	d00d      	beq.n	8000892 <AMB_MON_Update+0x2ba>
            {
                LCD_Clear();
 8000876:	f000 fe19 	bl	80014ac <LCD_Clear>
                LCD_PosCharacH(0);
 800087a:	2000      	movs	r0, #0
 800087c:	f000 fe20 	bl	80014c0 <LCD_PosCharacH>
                LCD_SendText(LCD_EXIT_STR);
 8000880:	481b      	ldr	r0, [pc, #108]	; (80008f0 <AMB_MON_Update+0x318>)
 8000882:	f000 fdfb 	bl	800147c <LCD_SendText>
                uartSendString(EXIT_STR);
 8000886:	481b      	ldr	r0, [pc, #108]	; (80008f4 <AMB_MON_Update+0x31c>)
 8000888:	f001 f808 	bl	800189c <uartSendString>
                entry = false;
 800088c:	4b0a      	ldr	r3, [pc, #40]	; (80008b8 <AMB_MON_Update+0x2e0>)
 800088e:	2200      	movs	r2, #0
 8000890:	701a      	strb	r2, [r3, #0]
            }

            if (swPressed)
 8000892:	79bb      	ldrb	r3, [r7, #6]
 8000894:	2b00      	cmp	r3, #0
 8000896:	d02f      	beq.n	80008f8 <AMB_MON_Update+0x320>
            {
                FSM.state_ = DISPLAY_DATA_TOP;
 8000898:	4b03      	ldr	r3, [pc, #12]	; (80008a8 <AMB_MON_Update+0x2d0>)
 800089a:	2202      	movs	r2, #2
 800089c:	701a      	strb	r2, [r3, #0]
                entry = true;
 800089e:	4b06      	ldr	r3, [pc, #24]	; (80008b8 <AMB_MON_Update+0x2e0>)
 80008a0:	2201      	movs	r2, #1
 80008a2:	701a      	strb	r2, [r3, #0]
            else if (dir == CounterCW)
            {
                FSM.state_ = SELECT_CO2;
                entry = true;
            }
            break;
 80008a4:	e16d      	b.n	8000b82 <AMB_MON_Update+0x5aa>
 80008a6:	bf00      	nop
 80008a8:	200000a0 	.word	0x200000a0
 80008ac:	08005070 	.word	0x08005070
 80008b0:	0800508c 	.word	0x0800508c
 80008b4:	200000a4 	.word	0x200000a4
 80008b8:	20000000 	.word	0x20000000
 80008bc:	08005094 	.word	0x08005094
 80008c0:	200000b0 	.word	0x200000b0
 80008c4:	080050b0 	.word	0x080050b0
 80008c8:	080050cc 	.word	0x080050cc
 80008cc:	080050dc 	.word	0x080050dc
 80008d0:	080050f4 	.word	0x080050f4
 80008d4:	08005104 	.word	0x08005104
 80008d8:	0800511c 	.word	0x0800511c
 80008dc:	0800512c 	.word	0x0800512c
 80008e0:	0800514c 	.word	0x0800514c
 80008e4:	0800515c 	.word	0x0800515c
 80008e8:	08005178 	.word	0x08005178
 80008ec:	08005188 	.word	0x08005188
 80008f0:	080051a0 	.word	0x080051a0
 80008f4:	080051ac 	.word	0x080051ac
            else if (dir == CW)
 80008f8:	79fb      	ldrb	r3, [r7, #7]
 80008fa:	2b01      	cmp	r3, #1
 80008fc:	d106      	bne.n	800090c <AMB_MON_Update+0x334>
                FSM.state_ = SELECT_TEMPERATURE;
 80008fe:	4ba6      	ldr	r3, [pc, #664]	; (8000b98 <AMB_MON_Update+0x5c0>)
 8000900:	2205      	movs	r2, #5
 8000902:	701a      	strb	r2, [r3, #0]
                entry = true;
 8000904:	4ba5      	ldr	r3, [pc, #660]	; (8000b9c <AMB_MON_Update+0x5c4>)
 8000906:	2201      	movs	r2, #1
 8000908:	701a      	strb	r2, [r3, #0]
            break;
 800090a:	e13a      	b.n	8000b82 <AMB_MON_Update+0x5aa>
            else if (dir == CounterCW)
 800090c:	79fb      	ldrb	r3, [r7, #7]
 800090e:	2b00      	cmp	r3, #0
 8000910:	f040 8137 	bne.w	8000b82 <AMB_MON_Update+0x5aa>
                FSM.state_ = SELECT_CO2;
 8000914:	4ba0      	ldr	r3, [pc, #640]	; (8000b98 <AMB_MON_Update+0x5c0>)
 8000916:	2207      	movs	r2, #7
 8000918:	701a      	strb	r2, [r3, #0]
                entry = true;
 800091a:	4ba0      	ldr	r3, [pc, #640]	; (8000b9c <AMB_MON_Update+0x5c4>)
 800091c:	2201      	movs	r2, #1
 800091e:	701a      	strb	r2, [r3, #0]
            break;
 8000920:	e12f      	b.n	8000b82 <AMB_MON_Update+0x5aa>

        case OFFSET_TEMPERATURE:
            if (entry)
 8000922:	4b9e      	ldr	r3, [pc, #632]	; (8000b9c <AMB_MON_Update+0x5c4>)
 8000924:	781b      	ldrb	r3, [r3, #0]
 8000926:	2b00      	cmp	r3, #0
 8000928:	d01b      	beq.n	8000962 <AMB_MON_Update+0x38a>
            {
                LCD_Clear();
 800092a:	f000 fdbf 	bl	80014ac <LCD_Clear>
                LCD_PosCharacH(0);
 800092e:	2000      	movs	r0, #0
 8000930:	f000 fdc6 	bl	80014c0 <LCD_PosCharacH>
                LCD_SendText(LCD_OFFSET_TEMPERATURE_STR);
 8000934:	489a      	ldr	r0, [pc, #616]	; (8000ba0 <AMB_MON_Update+0x5c8>)
 8000936:	f000 fda1 	bl	800147c <LCD_SendText>
                uartSendString(OFFSET_TEMPERATURE_STR);
 800093a:	489a      	ldr	r0, [pc, #616]	; (8000ba4 <AMB_MON_Update+0x5cc>)
 800093c:	f000 ffae 	bl	800189c <uartSendString>
                offsetCounter = Sensor.config.tempOffset;
 8000940:	4b99      	ldr	r3, [pc, #612]	; (8000ba8 <AMB_MON_Update+0x5d0>)
 8000942:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8000946:	4b99      	ldr	r3, [pc, #612]	; (8000bac <AMB_MON_Update+0x5d4>)
 8000948:	801a      	strh	r2, [r3, #0]
                updateDisplayOffset(offsetCounter, FSM.state_);
 800094a:	4b98      	ldr	r3, [pc, #608]	; (8000bac <AMB_MON_Update+0x5d4>)
 800094c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000950:	4a91      	ldr	r2, [pc, #580]	; (8000b98 <AMB_MON_Update+0x5c0>)
 8000952:	7812      	ldrb	r2, [r2, #0]
 8000954:	4611      	mov	r1, r2
 8000956:	4618      	mov	r0, r3
 8000958:	f000 f9ba 	bl	8000cd0 <updateDisplayOffset>
                entry = false;
 800095c:	4b8f      	ldr	r3, [pc, #572]	; (8000b9c <AMB_MON_Update+0x5c4>)
 800095e:	2200      	movs	r2, #0
 8000960:	701a      	strb	r2, [r3, #0]
            }

            if (dir != INVALID)
 8000962:	79fb      	ldrb	r3, [r7, #7]
 8000964:	2b02      	cmp	r3, #2
 8000966:	d01e      	beq.n	80009a6 <AMB_MON_Update+0x3ce>
            {
                if (dir == CW)
 8000968:	79fb      	ldrb	r3, [r7, #7]
 800096a:	2b01      	cmp	r3, #1
 800096c:	d109      	bne.n	8000982 <AMB_MON_Update+0x3aa>
                {
                    offsetCounter++;
 800096e:	4b8f      	ldr	r3, [pc, #572]	; (8000bac <AMB_MON_Update+0x5d4>)
 8000970:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000974:	b29b      	uxth	r3, r3
 8000976:	3301      	adds	r3, #1
 8000978:	b29b      	uxth	r3, r3
 800097a:	b21a      	sxth	r2, r3
 800097c:	4b8b      	ldr	r3, [pc, #556]	; (8000bac <AMB_MON_Update+0x5d4>)
 800097e:	801a      	strh	r2, [r3, #0]
 8000980:	e008      	b.n	8000994 <AMB_MON_Update+0x3bc>
                }
                else
                {
                    offsetCounter--;
 8000982:	4b8a      	ldr	r3, [pc, #552]	; (8000bac <AMB_MON_Update+0x5d4>)
 8000984:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000988:	b29b      	uxth	r3, r3
 800098a:	3b01      	subs	r3, #1
 800098c:	b29b      	uxth	r3, r3
 800098e:	b21a      	sxth	r2, r3
 8000990:	4b86      	ldr	r3, [pc, #536]	; (8000bac <AMB_MON_Update+0x5d4>)
 8000992:	801a      	strh	r2, [r3, #0]
                }
                updateDisplayOffset(offsetCounter, FSM.state_);
 8000994:	4b85      	ldr	r3, [pc, #532]	; (8000bac <AMB_MON_Update+0x5d4>)
 8000996:	f9b3 3000 	ldrsh.w	r3, [r3]
 800099a:	4a7f      	ldr	r2, [pc, #508]	; (8000b98 <AMB_MON_Update+0x5c0>)
 800099c:	7812      	ldrb	r2, [r2, #0]
 800099e:	4611      	mov	r1, r2
 80009a0:	4618      	mov	r0, r3
 80009a2:	f000 f995 	bl	8000cd0 <updateDisplayOffset>
            }            
            
            if (swPressed)
 80009a6:	79bb      	ldrb	r3, [r7, #6]
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	f000 80ec 	beq.w	8000b86 <AMB_MON_Update+0x5ae>
            {
                FSM.state_ = DISPLAY_DATA;
 80009ae:	4b7a      	ldr	r3, [pc, #488]	; (8000b98 <AMB_MON_Update+0x5c0>)
 80009b0:	2203      	movs	r2, #3
 80009b2:	701a      	strb	r2, [r3, #0]
                if ((offsetCounter < TEMP_OFFSET_MAX_LIMIT) || (offsetCounter > TEMP_OFFSET_MIN_LIMIT))
 80009b4:	4b7d      	ldr	r3, [pc, #500]	; (8000bac <AMB_MON_Update+0x5d4>)
 80009b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009ba:	2b63      	cmp	r3, #99	; 0x63
 80009bc:	dd05      	ble.n	80009ca <AMB_MON_Update+0x3f2>
 80009be:	4b7b      	ldr	r3, [pc, #492]	; (8000bac <AMB_MON_Update+0x5d4>)
 80009c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009c4:	f113 0f63 	cmn.w	r3, #99	; 0x63
 80009c8:	db07      	blt.n	80009da <AMB_MON_Update+0x402>
                {
                    Sensor.config.tempOffset = offsetCounter;
 80009ca:	4b78      	ldr	r3, [pc, #480]	; (8000bac <AMB_MON_Update+0x5d4>)
 80009cc:	f9b3 2000 	ldrsh.w	r2, [r3]
 80009d0:	4b75      	ldr	r3, [pc, #468]	; (8000ba8 <AMB_MON_Update+0x5d0>)
 80009d2:	80da      	strh	r2, [r3, #6]
                    uartSendString(OFFSET_UPDATED);
 80009d4:	4876      	ldr	r0, [pc, #472]	; (8000bb0 <AMB_MON_Update+0x5d8>)
 80009d6:	f000 ff61 	bl	800189c <uartSendString>
                }
                
                entry = true;
 80009da:	4b70      	ldr	r3, [pc, #448]	; (8000b9c <AMB_MON_Update+0x5c4>)
 80009dc:	2201      	movs	r2, #1
 80009de:	701a      	strb	r2, [r3, #0]
            }
            break;
 80009e0:	e0d1      	b.n	8000b86 <AMB_MON_Update+0x5ae>

        case OFFSET_HUMIDITY:
            if (entry)
 80009e2:	4b6e      	ldr	r3, [pc, #440]	; (8000b9c <AMB_MON_Update+0x5c4>)
 80009e4:	781b      	ldrb	r3, [r3, #0]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d01b      	beq.n	8000a22 <AMB_MON_Update+0x44a>
            {
                LCD_Clear();
 80009ea:	f000 fd5f 	bl	80014ac <LCD_Clear>
                LCD_PosCharacH(0);
 80009ee:	2000      	movs	r0, #0
 80009f0:	f000 fd66 	bl	80014c0 <LCD_PosCharacH>
                LCD_SendText(LCD_OFFSET_HUMIDITY_STR);
 80009f4:	486f      	ldr	r0, [pc, #444]	; (8000bb4 <AMB_MON_Update+0x5dc>)
 80009f6:	f000 fd41 	bl	800147c <LCD_SendText>
                uartSendString(OFFSET_HUMIDITY_STR);
 80009fa:	486f      	ldr	r0, [pc, #444]	; (8000bb8 <AMB_MON_Update+0x5e0>)
 80009fc:	f000 ff4e 	bl	800189c <uartSendString>
                offsetCounter = Sensor.config.humOffset;
 8000a00:	4b69      	ldr	r3, [pc, #420]	; (8000ba8 <AMB_MON_Update+0x5d0>)
 8000a02:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8000a06:	4b69      	ldr	r3, [pc, #420]	; (8000bac <AMB_MON_Update+0x5d4>)
 8000a08:	801a      	strh	r2, [r3, #0]
                updateDisplayOffset(offsetCounter, FSM.state_);
 8000a0a:	4b68      	ldr	r3, [pc, #416]	; (8000bac <AMB_MON_Update+0x5d4>)
 8000a0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a10:	4a61      	ldr	r2, [pc, #388]	; (8000b98 <AMB_MON_Update+0x5c0>)
 8000a12:	7812      	ldrb	r2, [r2, #0]
 8000a14:	4611      	mov	r1, r2
 8000a16:	4618      	mov	r0, r3
 8000a18:	f000 f95a 	bl	8000cd0 <updateDisplayOffset>
                entry = false;
 8000a1c:	4b5f      	ldr	r3, [pc, #380]	; (8000b9c <AMB_MON_Update+0x5c4>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	701a      	strb	r2, [r3, #0]
            }

            if (dir != INVALID)
 8000a22:	79fb      	ldrb	r3, [r7, #7]
 8000a24:	2b02      	cmp	r3, #2
 8000a26:	d01e      	beq.n	8000a66 <AMB_MON_Update+0x48e>
            {
                if (dir == CW)
 8000a28:	79fb      	ldrb	r3, [r7, #7]
 8000a2a:	2b01      	cmp	r3, #1
 8000a2c:	d109      	bne.n	8000a42 <AMB_MON_Update+0x46a>
                {
                    offsetCounter++;
 8000a2e:	4b5f      	ldr	r3, [pc, #380]	; (8000bac <AMB_MON_Update+0x5d4>)
 8000a30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a34:	b29b      	uxth	r3, r3
 8000a36:	3301      	adds	r3, #1
 8000a38:	b29b      	uxth	r3, r3
 8000a3a:	b21a      	sxth	r2, r3
 8000a3c:	4b5b      	ldr	r3, [pc, #364]	; (8000bac <AMB_MON_Update+0x5d4>)
 8000a3e:	801a      	strh	r2, [r3, #0]
 8000a40:	e008      	b.n	8000a54 <AMB_MON_Update+0x47c>
                }
                else
                {
                    offsetCounter--;
 8000a42:	4b5a      	ldr	r3, [pc, #360]	; (8000bac <AMB_MON_Update+0x5d4>)
 8000a44:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a48:	b29b      	uxth	r3, r3
 8000a4a:	3b01      	subs	r3, #1
 8000a4c:	b29b      	uxth	r3, r3
 8000a4e:	b21a      	sxth	r2, r3
 8000a50:	4b56      	ldr	r3, [pc, #344]	; (8000bac <AMB_MON_Update+0x5d4>)
 8000a52:	801a      	strh	r2, [r3, #0]
                }
                updateDisplayOffset(offsetCounter, FSM.state_);
 8000a54:	4b55      	ldr	r3, [pc, #340]	; (8000bac <AMB_MON_Update+0x5d4>)
 8000a56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a5a:	4a4f      	ldr	r2, [pc, #316]	; (8000b98 <AMB_MON_Update+0x5c0>)
 8000a5c:	7812      	ldrb	r2, [r2, #0]
 8000a5e:	4611      	mov	r1, r2
 8000a60:	4618      	mov	r0, r3
 8000a62:	f000 f935 	bl	8000cd0 <updateDisplayOffset>
            }          
            if (swPressed)
 8000a66:	79bb      	ldrb	r3, [r7, #6]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	f000 808e 	beq.w	8000b8a <AMB_MON_Update+0x5b2>
            {
                FSM.state_ = DISPLAY_DATA;
 8000a6e:	4b4a      	ldr	r3, [pc, #296]	; (8000b98 <AMB_MON_Update+0x5c0>)
 8000a70:	2203      	movs	r2, #3
 8000a72:	701a      	strb	r2, [r3, #0]
                if ((offsetCounter < HUM_OFFSET_MAX_LIMIT) || (offsetCounter > HUM_OFFSET_MIN_LIMIT))
 8000a74:	4b4d      	ldr	r3, [pc, #308]	; (8000bac <AMB_MON_Update+0x5d4>)
 8000a76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a7a:	2bf9      	cmp	r3, #249	; 0xf9
 8000a7c:	dd05      	ble.n	8000a8a <AMB_MON_Update+0x4b2>
 8000a7e:	4b4b      	ldr	r3, [pc, #300]	; (8000bac <AMB_MON_Update+0x5d4>)
 8000a80:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a84:	f113 0ff9 	cmn.w	r3, #249	; 0xf9
 8000a88:	db07      	blt.n	8000a9a <AMB_MON_Update+0x4c2>
                {
                    Sensor.config.humOffset = offsetCounter;
 8000a8a:	4b48      	ldr	r3, [pc, #288]	; (8000bac <AMB_MON_Update+0x5d4>)
 8000a8c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000a90:	4b45      	ldr	r3, [pc, #276]	; (8000ba8 <AMB_MON_Update+0x5d0>)
 8000a92:	811a      	strh	r2, [r3, #8]
                    uartSendString(OFFSET_UPDATED);
 8000a94:	4846      	ldr	r0, [pc, #280]	; (8000bb0 <AMB_MON_Update+0x5d8>)
 8000a96:	f000 ff01 	bl	800189c <uartSendString>
                }
                entry = true;
 8000a9a:	4b40      	ldr	r3, [pc, #256]	; (8000b9c <AMB_MON_Update+0x5c4>)
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	701a      	strb	r2, [r3, #0]
            }
            break;
 8000aa0:	e073      	b.n	8000b8a <AMB_MON_Update+0x5b2>

        case OFFSET_CO2:
            if (entry)
 8000aa2:	4b3e      	ldr	r3, [pc, #248]	; (8000b9c <AMB_MON_Update+0x5c4>)
 8000aa4:	781b      	ldrb	r3, [r3, #0]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d01b      	beq.n	8000ae2 <AMB_MON_Update+0x50a>
            {
                LCD_Clear();
 8000aaa:	f000 fcff 	bl	80014ac <LCD_Clear>
                LCD_PosCharacH(0);
 8000aae:	2000      	movs	r0, #0
 8000ab0:	f000 fd06 	bl	80014c0 <LCD_PosCharacH>
                LCD_SendText(LCD_OFFSET_CO2_STR);               
 8000ab4:	4841      	ldr	r0, [pc, #260]	; (8000bbc <AMB_MON_Update+0x5e4>)
 8000ab6:	f000 fce1 	bl	800147c <LCD_SendText>
                uartSendString(OFFSET_CO2_STR);
 8000aba:	4841      	ldr	r0, [pc, #260]	; (8000bc0 <AMB_MON_Update+0x5e8>)
 8000abc:	f000 feee 	bl	800189c <uartSendString>
                offsetCounter = Sensor.config.co2Offset;
 8000ac0:	4b39      	ldr	r3, [pc, #228]	; (8000ba8 <AMB_MON_Update+0x5d0>)
 8000ac2:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8000ac6:	4b39      	ldr	r3, [pc, #228]	; (8000bac <AMB_MON_Update+0x5d4>)
 8000ac8:	801a      	strh	r2, [r3, #0]
                updateDisplayOffset(offsetCounter, FSM.state_);
 8000aca:	4b38      	ldr	r3, [pc, #224]	; (8000bac <AMB_MON_Update+0x5d4>)
 8000acc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ad0:	4a31      	ldr	r2, [pc, #196]	; (8000b98 <AMB_MON_Update+0x5c0>)
 8000ad2:	7812      	ldrb	r2, [r2, #0]
 8000ad4:	4611      	mov	r1, r2
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f000 f8fa 	bl	8000cd0 <updateDisplayOffset>
                entry = false;
 8000adc:	4b2f      	ldr	r3, [pc, #188]	; (8000b9c <AMB_MON_Update+0x5c4>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	701a      	strb	r2, [r3, #0]
            }

            if (dir != INVALID)
 8000ae2:	79fb      	ldrb	r3, [r7, #7]
 8000ae4:	2b02      	cmp	r3, #2
 8000ae6:	d01e      	beq.n	8000b26 <AMB_MON_Update+0x54e>
            {
                if (dir == CW)
 8000ae8:	79fb      	ldrb	r3, [r7, #7]
 8000aea:	2b01      	cmp	r3, #1
 8000aec:	d109      	bne.n	8000b02 <AMB_MON_Update+0x52a>
                {
                    offsetCounter++;
 8000aee:	4b2f      	ldr	r3, [pc, #188]	; (8000bac <AMB_MON_Update+0x5d4>)
 8000af0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000af4:	b29b      	uxth	r3, r3
 8000af6:	3301      	adds	r3, #1
 8000af8:	b29b      	uxth	r3, r3
 8000afa:	b21a      	sxth	r2, r3
 8000afc:	4b2b      	ldr	r3, [pc, #172]	; (8000bac <AMB_MON_Update+0x5d4>)
 8000afe:	801a      	strh	r2, [r3, #0]
 8000b00:	e008      	b.n	8000b14 <AMB_MON_Update+0x53c>
                }
                else
                {
                    offsetCounter--;
 8000b02:	4b2a      	ldr	r3, [pc, #168]	; (8000bac <AMB_MON_Update+0x5d4>)
 8000b04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b08:	b29b      	uxth	r3, r3
 8000b0a:	3b01      	subs	r3, #1
 8000b0c:	b29b      	uxth	r3, r3
 8000b0e:	b21a      	sxth	r2, r3
 8000b10:	4b26      	ldr	r3, [pc, #152]	; (8000bac <AMB_MON_Update+0x5d4>)
 8000b12:	801a      	strh	r2, [r3, #0]
                }
                updateDisplayOffset(offsetCounter, FSM.state_);
 8000b14:	4b25      	ldr	r3, [pc, #148]	; (8000bac <AMB_MON_Update+0x5d4>)
 8000b16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b1a:	4a1f      	ldr	r2, [pc, #124]	; (8000b98 <AMB_MON_Update+0x5c0>)
 8000b1c:	7812      	ldrb	r2, [r2, #0]
 8000b1e:	4611      	mov	r1, r2
 8000b20:	4618      	mov	r0, r3
 8000b22:	f000 f8d5 	bl	8000cd0 <updateDisplayOffset>
            }

            if (swPressed)
 8000b26:	79bb      	ldrb	r3, [r7, #6]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d030      	beq.n	8000b8e <AMB_MON_Update+0x5b6>
            {
                FSM.state_ = DISPLAY_DATA;
 8000b2c:	4b1a      	ldr	r3, [pc, #104]	; (8000b98 <AMB_MON_Update+0x5c0>)
 8000b2e:	2203      	movs	r2, #3
 8000b30:	701a      	strb	r2, [r3, #0]
                if ((offsetCounter < CO2_OFFSET_MAX_LIMIT) || (offsetCounter > CO2_OFFSET_MIN_LIMIT))
 8000b32:	4b1e      	ldr	r3, [pc, #120]	; (8000bac <AMB_MON_Update+0x5d4>)
 8000b34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b38:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000b3c:	db05      	blt.n	8000b4a <AMB_MON_Update+0x572>
 8000b3e:	4b1b      	ldr	r3, [pc, #108]	; (8000bac <AMB_MON_Update+0x5d4>)
 8000b40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b44:	f513 7ffa 	cmn.w	r3, #500	; 0x1f4
 8000b48:	dd07      	ble.n	8000b5a <AMB_MON_Update+0x582>
                {
                    Sensor.config.co2Offset = offsetCounter;
 8000b4a:	4b18      	ldr	r3, [pc, #96]	; (8000bac <AMB_MON_Update+0x5d4>)
 8000b4c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000b50:	4b15      	ldr	r3, [pc, #84]	; (8000ba8 <AMB_MON_Update+0x5d0>)
 8000b52:	815a      	strh	r2, [r3, #10]
                    uartSendString(OFFSET_UPDATED);
 8000b54:	4816      	ldr	r0, [pc, #88]	; (8000bb0 <AMB_MON_Update+0x5d8>)
 8000b56:	f000 fea1 	bl	800189c <uartSendString>
                }
                entry = true;
 8000b5a:	4b10      	ldr	r3, [pc, #64]	; (8000b9c <AMB_MON_Update+0x5c4>)
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	701a      	strb	r2, [r3, #0]
            }
            break;
 8000b60:	e015      	b.n	8000b8e <AMB_MON_Update+0x5b6>

        default:
            uartSendString(ERROR_STR);
 8000b62:	4818      	ldr	r0, [pc, #96]	; (8000bc4 <AMB_MON_Update+0x5ec>)
 8000b64:	f000 fe9a 	bl	800189c <uartSendString>
            break;
 8000b68:	e012      	b.n	8000b90 <AMB_MON_Update+0x5b8>
            break;
 8000b6a:	bf00      	nop
 8000b6c:	e010      	b.n	8000b90 <AMB_MON_Update+0x5b8>
            break;
 8000b6e:	bf00      	nop
 8000b70:	e00e      	b.n	8000b90 <AMB_MON_Update+0x5b8>
            break;
 8000b72:	bf00      	nop
 8000b74:	e00c      	b.n	8000b90 <AMB_MON_Update+0x5b8>
            break;
 8000b76:	bf00      	nop
 8000b78:	e00a      	b.n	8000b90 <AMB_MON_Update+0x5b8>
            break;
 8000b7a:	bf00      	nop
 8000b7c:	e008      	b.n	8000b90 <AMB_MON_Update+0x5b8>
            break;
 8000b7e:	bf00      	nop
 8000b80:	e006      	b.n	8000b90 <AMB_MON_Update+0x5b8>
            break;
 8000b82:	bf00      	nop
 8000b84:	e004      	b.n	8000b90 <AMB_MON_Update+0x5b8>
            break;
 8000b86:	bf00      	nop
 8000b88:	e002      	b.n	8000b90 <AMB_MON_Update+0x5b8>
            break;
 8000b8a:	bf00      	nop
 8000b8c:	e000      	b.n	8000b90 <AMB_MON_Update+0x5b8>
            break;
 8000b8e:	bf00      	nop
    }
}
 8000b90:	bf00      	nop
 8000b92:	3708      	adds	r7, #8
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	200000a0 	.word	0x200000a0
 8000b9c:	20000000 	.word	0x20000000
 8000ba0:	080051bc 	.word	0x080051bc
 8000ba4:	080051c8 	.word	0x080051c8
 8000ba8:	200000a4 	.word	0x200000a4
 8000bac:	200000bc 	.word	0x200000bc
 8000bb0:	080051e8 	.word	0x080051e8
 8000bb4:	080051fc 	.word	0x080051fc
 8000bb8:	0800520c 	.word	0x0800520c
 8000bbc:	08005228 	.word	0x08005228
 8000bc0:	08005234 	.word	0x08005234
 8000bc4:	0800524c 	.word	0x0800524c

08000bc8 <updateDisplayData>:
 * @brief Update display with data stored in sensor structure
 * 
 * @param sensor 
 */
static void updateDisplayData(strSCD *sensor)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b086      	sub	sp, #24
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
    LCD_Clear();
 8000bd0:	f000 fc6c 	bl	80014ac <LCD_Clear>
    LCD_PosCharacH(LCD_TEMP_POS);
 8000bd4:	2000      	movs	r0, #0
 8000bd6:	f000 fc73 	bl	80014c0 <LCD_PosCharacH>
    LCD_SendText((uint8_t *)LCD_TEMP_STR);
 8000bda:	4835      	ldr	r0, [pc, #212]	; (8000cb0 <updateDisplayData+0xe8>)
 8000bdc:	f000 fc4e 	bl	800147c <LCD_SendText>

    char _buffer[STR_BUFF_TEXT_LENGTH];
    int16_t _temp = sensor->data.temp + sensor->config.tempOffset;
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000be6:	b29a      	uxth	r2, r3
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000bee:	b29b      	uxth	r3, r3
 8000bf0:	4413      	add	r3, r2
 8000bf2:	b29b      	uxth	r3, r3
 8000bf4:	82fb      	strh	r3, [r7, #22]
    int16_t _integer = _temp / 10;
 8000bf6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000bfa:	4a2e      	ldr	r2, [pc, #184]	; (8000cb4 <updateDisplayData+0xec>)
 8000bfc:	fb82 1203 	smull	r1, r2, r2, r3
 8000c00:	1092      	asrs	r2, r2, #2
 8000c02:	17db      	asrs	r3, r3, #31
 8000c04:	1ad3      	subs	r3, r2, r3
 8000c06:	82bb      	strh	r3, [r7, #20]
    int16_t _decimal = _temp % 10; 
 8000c08:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8000c0c:	4b29      	ldr	r3, [pc, #164]	; (8000cb4 <updateDisplayData+0xec>)
 8000c0e:	fb83 1302 	smull	r1, r3, r3, r2
 8000c12:	1099      	asrs	r1, r3, #2
 8000c14:	17d3      	asrs	r3, r2, #31
 8000c16:	1ac9      	subs	r1, r1, r3
 8000c18:	460b      	mov	r3, r1
 8000c1a:	009b      	lsls	r3, r3, #2
 8000c1c:	440b      	add	r3, r1
 8000c1e:	005b      	lsls	r3, r3, #1
 8000c20:	1ad3      	subs	r3, r2, r3
 8000c22:	827b      	strh	r3, [r7, #18]

    sprintf(_buffer, "%d,%d\xDF""C", _integer, _decimal); /** \xDF non-standart ascii for (°)*/
 8000c24:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8000c28:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000c2c:	f107 0008 	add.w	r0, r7, #8
 8000c30:	4921      	ldr	r1, [pc, #132]	; (8000cb8 <updateDisplayData+0xf0>)
 8000c32:	f003 fd75 	bl	8004720 <siprintf>
    LCD_SendText((uint8_t *)_buffer);
 8000c36:	f107 0308 	add.w	r3, r7, #8
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f000 fc1e 	bl	800147c <LCD_SendText>

    LCD_PosCharacH(LCD_HUM_POS);
 8000c40:	2009      	movs	r0, #9
 8000c42:	f000 fc3d 	bl	80014c0 <LCD_PosCharacH>
    LCD_SendText((uint8_t *)LCD_HUM_STR);
 8000c46:	481d      	ldr	r0, [pc, #116]	; (8000cbc <updateDisplayData+0xf4>)
 8000c48:	f000 fc18 	bl	800147c <LCD_SendText>
    sprintf(_buffer, "%d%%", (sensor->data.hum + sensor->config.humOffset));
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	885b      	ldrh	r3, [r3, #2]
 8000c50:	461a      	mov	r2, r3
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000c58:	441a      	add	r2, r3
 8000c5a:	f107 0308 	add.w	r3, r7, #8
 8000c5e:	4918      	ldr	r1, [pc, #96]	; (8000cc0 <updateDisplayData+0xf8>)
 8000c60:	4618      	mov	r0, r3
 8000c62:	f003 fd5d 	bl	8004720 <siprintf>
    LCD_SendText((uint8_t *)_buffer);
 8000c66:	f107 0308 	add.w	r3, r7, #8
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f000 fc06 	bl	800147c <LCD_SendText>

    LCD_PosCharacL(LCD_CO2_POS);
 8000c70:	2000      	movs	r0, #0
 8000c72:	f000 fc39 	bl	80014e8 <LCD_PosCharacL>
    LCD_SendText((uint8_t *)LCD_CO2_STR);
 8000c76:	4813      	ldr	r0, [pc, #76]	; (8000cc4 <updateDisplayData+0xfc>)
 8000c78:	f000 fc00 	bl	800147c <LCD_SendText>
    sprintf(_buffer, "%d", (sensor->data.co2 + sensor->config.co2Offset));
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	889b      	ldrh	r3, [r3, #4]
 8000c80:	461a      	mov	r2, r3
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000c88:	441a      	add	r2, r3
 8000c8a:	f107 0308 	add.w	r3, r7, #8
 8000c8e:	490e      	ldr	r1, [pc, #56]	; (8000cc8 <updateDisplayData+0x100>)
 8000c90:	4618      	mov	r0, r3
 8000c92:	f003 fd45 	bl	8004720 <siprintf>
    LCD_SendText((uint8_t *)_buffer);
 8000c96:	f107 0308 	add.w	r3, r7, #8
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f000 fbee 	bl	800147c <LCD_SendText>
    LCD_SendText((uint8_t *)LCD_CO2_UNIT);
 8000ca0:	480a      	ldr	r0, [pc, #40]	; (8000ccc <updateDisplayData+0x104>)
 8000ca2:	f000 fbeb 	bl	800147c <LCD_SendText>
}
 8000ca6:	bf00      	nop
 8000ca8:	3718      	adds	r7, #24
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	0800525c 	.word	0x0800525c
 8000cb4:	66666667 	.word	0x66666667
 8000cb8:	08005260 	.word	0x08005260
 8000cbc:	08005268 	.word	0x08005268
 8000cc0:	0800526c 	.word	0x0800526c
 8000cc4:	08005274 	.word	0x08005274
 8000cc8:	0800527c 	.word	0x0800527c
 8000ccc:	08005280 	.word	0x08005280

08000cd0 <updateDisplayOffset>:
 * 
 * @param counter 
 * @param state 
 */
static void updateDisplayOffset(int16_t counter, eState state)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b086      	sub	sp, #24
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	460a      	mov	r2, r1
 8000cda:	80fb      	strh	r3, [r7, #6]
 8000cdc:	4613      	mov	r3, r2
 8000cde:	717b      	strb	r3, [r7, #5]
    char _buffer[STR_BUFF_TEXT_LENGTH];
    LCD_PosCharacL(LCD_OFFSETS_POS);
 8000ce0:	2009      	movs	r0, #9
 8000ce2:	f000 fc01 	bl	80014e8 <LCD_PosCharacL>

    switch (state)
 8000ce6:	797b      	ldrb	r3, [r7, #5]
 8000ce8:	2b0b      	cmp	r3, #11
 8000cea:	d03a      	beq.n	8000d62 <updateDisplayOffset+0x92>
 8000cec:	2b0b      	cmp	r3, #11
 8000cee:	dc49      	bgt.n	8000d84 <updateDisplayOffset+0xb4>
 8000cf0:	2b09      	cmp	r3, #9
 8000cf2:	d002      	beq.n	8000cfa <updateDisplayOffset+0x2a>
 8000cf4:	2b0a      	cmp	r3, #10
 8000cf6:	d026      	beq.n	8000d46 <updateDisplayOffset+0x76>
 8000cf8:	e044      	b.n	8000d84 <updateDisplayOffset+0xb4>
    {
    case OFFSET_TEMPERATURE:
        {
            int16_t _integer = counter / 10;
 8000cfa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000cfe:	4a25      	ldr	r2, [pc, #148]	; (8000d94 <updateDisplayOffset+0xc4>)
 8000d00:	fb82 1203 	smull	r1, r2, r2, r3
 8000d04:	1092      	asrs	r2, r2, #2
 8000d06:	17db      	asrs	r3, r3, #31
 8000d08:	1ad3      	subs	r3, r2, r3
 8000d0a:	82fb      	strh	r3, [r7, #22]
            int16_t _decimal = counter % 10;
 8000d0c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000d10:	4b20      	ldr	r3, [pc, #128]	; (8000d94 <updateDisplayOffset+0xc4>)
 8000d12:	fb83 1302 	smull	r1, r3, r3, r2
 8000d16:	1099      	asrs	r1, r3, #2
 8000d18:	17d3      	asrs	r3, r2, #31
 8000d1a:	1ac9      	subs	r1, r1, r3
 8000d1c:	460b      	mov	r3, r1
 8000d1e:	009b      	lsls	r3, r3, #2
 8000d20:	440b      	add	r3, r1
 8000d22:	005b      	lsls	r3, r3, #1
 8000d24:	1ad3      	subs	r3, r2, r3
 8000d26:	82bb      	strh	r3, [r7, #20]
            sprintf(_buffer, "%d,%d \xDF""C", _integer, _decimal); /** \xDF non-standart ascii for (°)*/
 8000d28:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8000d2c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000d30:	f107 000c 	add.w	r0, r7, #12
 8000d34:	4918      	ldr	r1, [pc, #96]	; (8000d98 <updateDisplayOffset+0xc8>)
 8000d36:	f003 fcf3 	bl	8004720 <siprintf>
            LCD_SendText((uint8_t *)_buffer);
 8000d3a:	f107 030c 	add.w	r3, r7, #12
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f000 fb9c 	bl	800147c <LCD_SendText>
        }
        break;
 8000d44:	e021      	b.n	8000d8a <updateDisplayOffset+0xba>

    case OFFSET_HUMIDITY:
        sprintf(_buffer, "%d%%", counter);
 8000d46:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000d4a:	f107 030c 	add.w	r3, r7, #12
 8000d4e:	4913      	ldr	r1, [pc, #76]	; (8000d9c <updateDisplayOffset+0xcc>)
 8000d50:	4618      	mov	r0, r3
 8000d52:	f003 fce5 	bl	8004720 <siprintf>
        LCD_SendText((uint8_t *)_buffer);
 8000d56:	f107 030c 	add.w	r3, r7, #12
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f000 fb8e 	bl	800147c <LCD_SendText>
        break;
 8000d60:	e013      	b.n	8000d8a <updateDisplayOffset+0xba>

    case OFFSET_CO2:
        sprintf(_buffer, "%d", counter);
 8000d62:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000d66:	f107 030c 	add.w	r3, r7, #12
 8000d6a:	490d      	ldr	r1, [pc, #52]	; (8000da0 <updateDisplayOffset+0xd0>)
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f003 fcd7 	bl	8004720 <siprintf>
        LCD_SendText((uint8_t *)_buffer);
 8000d72:	f107 030c 	add.w	r3, r7, #12
 8000d76:	4618      	mov	r0, r3
 8000d78:	f000 fb80 	bl	800147c <LCD_SendText>
        LCD_SendText((uint8_t *)LCD_CO2_UNIT);
 8000d7c:	4809      	ldr	r0, [pc, #36]	; (8000da4 <updateDisplayOffset+0xd4>)
 8000d7e:	f000 fb7d 	bl	800147c <LCD_SendText>
        break;
 8000d82:	e002      	b.n	8000d8a <updateDisplayOffset+0xba>
    
    default:
        Error_Handler();
 8000d84:	f000 f810 	bl	8000da8 <Error_Handler>
        break;
 8000d88:	bf00      	nop
    }
}
 8000d8a:	bf00      	nop
 8000d8c:	3718      	adds	r7, #24
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	66666667 	.word	0x66666667
 8000d98:	08005284 	.word	0x08005284
 8000d9c:	0800526c 	.word	0x0800526c
 8000da0:	0800527c 	.word	0x0800527c
 8000da4:	08005280 	.word	0x08005280

08000da8 <Error_Handler>:
/**
 * @brief Error handler function that is called when an invalid operation occurs
 * 
 */
static void Error_Handler()
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
    while (1) { }
 8000dac:	e7fe      	b.n	8000dac <Error_Handler+0x4>

08000dae <DBN_FSMinit>:
 * @param pin Pointer to gpio_t structure representing the GPIO pin configuration.
 * @param delay Pointer to delay_t structure used for timing operations.
 * @note This function must be called before any other debouncing functions are used.
 */
void DBN_FSMinit(stDebounce *button, gpio_t *pin, delay_t *delay)
{
 8000dae:	b580      	push	{r7, lr}
 8000db0:	b084      	sub	sp, #16
 8000db2:	af00      	add	r7, sp, #0
 8000db4:	60f8      	str	r0, [r7, #12]
 8000db6:	60b9      	str	r1, [r7, #8]
 8000db8:	607a      	str	r2, [r7, #4]
	if(NULL == button || NULL == delay)
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d002      	beq.n	8000dc6 <DBN_FSMinit+0x18>
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d101      	bne.n	8000dca <DBN_FSMinit+0x1c>
	{
		Error_Handler();
 8000dc6:	f000 f8ae 	bl	8000f26 <Error_Handler>
	}

	button->gpio_ 			 = pin;
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	68ba      	ldr	r2, [r7, #8]
 8000dce:	601a      	str	r2, [r3, #0]
	button->delay_			 = delay;
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	687a      	ldr	r2, [r7, #4]
 8000dd4:	605a      	str	r2, [r3, #4]
	button->state_ 			 = BUTTON_UP;
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	2200      	movs	r2, #0
 8000dda:	721a      	strb	r2, [r3, #8]
	button->isButtonPressed_ = false;
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	2200      	movs	r2, #0
 8000de0:	729a      	strb	r2, [r3, #10]

	delayInit(button->delay_, DEBOUNCE_TIME);
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	210a      	movs	r1, #10
 8000de8:	4618      	mov	r0, r3
 8000dea:	f000 f89f 	bl	8000f2c <delayInit>

	button->isInit			 = true;
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	2201      	movs	r2, #1
 8000df2:	72da      	strb	r2, [r3, #11]
}
 8000df4:	bf00      	nop
 8000df6:	3710      	adds	r7, #16
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}

08000dfc <DBN_FSMupdate>:
 *
 * @param button Pointer to stDebounce structure managing the debounce state.
 * @note The FSM must be initialized with DBN_FSMinit before calling this function.
 */
void DBN_FSMupdate(stDebounce *button)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b084      	sub	sp, #16
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
    if (!button->isInit)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	7adb      	ldrb	r3, [r3, #11]
 8000e08:	f083 0301 	eor.w	r3, r3, #1
 8000e0c:	b2db      	uxtb	r3, r3
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <DBN_FSMupdate+0x1a>
    {
        Error_Handler();
 8000e12:	f000 f888 	bl	8000f26 <Error_Handler>
    }
    
	GPIO_PinState buttonState = Port_ReadPin(button->gpio_->port, button->gpio_->pin);
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	681a      	ldr	r2, [r3, #0]
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	889b      	ldrh	r3, [r3, #4]
 8000e22:	4619      	mov	r1, r3
 8000e24:	4610      	mov	r0, r2
 8000e26:	f000 fdb1 	bl	800198c <Port_ReadPin>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	73fb      	strb	r3, [r7, #15]

	switch (button->state_)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	7a1b      	ldrb	r3, [r3, #8]
 8000e32:	2b03      	cmp	r3, #3
 8000e34:	d845      	bhi.n	8000ec2 <DBN_FSMupdate+0xc6>
 8000e36:	a201      	add	r2, pc, #4	; (adr r2, 8000e3c <DBN_FSMupdate+0x40>)
 8000e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e3c:	08000e4d 	.word	0x08000e4d
 8000e40:	08000e67 	.word	0x08000e67
 8000e44:	08000e8b 	.word	0x08000e8b
 8000e48:	08000ea5 	.word	0x08000ea5
	{
	case BUTTON_UP:
		if(buttonState == GPIO_PIN_RESET)
 8000e4c:	7bfb      	ldrb	r3, [r7, #15]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d140      	bne.n	8000ed4 <DBN_FSMupdate+0xd8>
		{
			delayInit(button->delay_, DEBOUNCE_TIME);
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	210a      	movs	r1, #10
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f000 f867 	bl	8000f2c <delayInit>
			button->state_ = BUTTON_FALLING;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	2201      	movs	r2, #1
 8000e62:	721a      	strb	r2, [r3, #8]
		}
		break;
 8000e64:	e036      	b.n	8000ed4 <DBN_FSMupdate+0xd8>

	case BUTTON_FALLING:
		if (delayRead(button->delay_))
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f000 f875 	bl	8000f5a <delayRead>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d030      	beq.n	8000ed8 <DBN_FSMupdate+0xdc>
		{
			if (buttonState == GPIO_PIN_RESET)
 8000e76:	7bfb      	ldrb	r3, [r7, #15]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d12d      	bne.n	8000ed8 <DBN_FSMupdate+0xdc>
			{
				button->isButtonPressed_ = true;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	2201      	movs	r2, #1
 8000e80:	729a      	strb	r2, [r3, #10]
				button->state_ = BUTTON_DOWN;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	2202      	movs	r2, #2
 8000e86:	721a      	strb	r2, [r3, #8]
			}
		}
		break;
 8000e88:	e026      	b.n	8000ed8 <DBN_FSMupdate+0xdc>

	case BUTTON_DOWN:
		if(buttonState == GPIO_PIN_SET)
 8000e8a:	7bfb      	ldrb	r3, [r7, #15]
 8000e8c:	2b01      	cmp	r3, #1
 8000e8e:	d125      	bne.n	8000edc <DBN_FSMupdate+0xe0>
		{
			delayInit(button->delay_, DEBOUNCE_TIME);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	210a      	movs	r1, #10
 8000e96:	4618      	mov	r0, r3
 8000e98:	f000 f848 	bl	8000f2c <delayInit>
			button->state_ = BUTTON_RAISING;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	2203      	movs	r2, #3
 8000ea0:	721a      	strb	r2, [r3, #8]
		}
		break;
 8000ea2:	e01b      	b.n	8000edc <DBN_FSMupdate+0xe0>

	case BUTTON_RAISING:
		if (delayRead(button->delay_))
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f000 f856 	bl	8000f5a <delayRead>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d015      	beq.n	8000ee0 <DBN_FSMupdate+0xe4>
		{
			if (buttonState == GPIO_PIN_SET)
 8000eb4:	7bfb      	ldrb	r3, [r7, #15]
 8000eb6:	2b01      	cmp	r3, #1
 8000eb8:	d112      	bne.n	8000ee0 <DBN_FSMupdate+0xe4>
			{
				button->state_ = BUTTON_UP;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	721a      	strb	r2, [r3, #8]
			}
		}
		break;
 8000ec0:	e00e      	b.n	8000ee0 <DBN_FSMupdate+0xe4>

	default:
	    DBN_FSMinit(button, button->gpio_, button->delay_);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	6819      	ldr	r1, [r3, #0]
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	461a      	mov	r2, r3
 8000ecc:	6878      	ldr	r0, [r7, #4]
 8000ece:	f7ff ff6e 	bl	8000dae <DBN_FSMinit>
		break;
 8000ed2:	e006      	b.n	8000ee2 <DBN_FSMupdate+0xe6>
		break;
 8000ed4:	bf00      	nop
 8000ed6:	e004      	b.n	8000ee2 <DBN_FSMupdate+0xe6>
		break;
 8000ed8:	bf00      	nop
 8000eda:	e002      	b.n	8000ee2 <DBN_FSMupdate+0xe6>
		break;
 8000edc:	bf00      	nop
 8000ede:	e000      	b.n	8000ee2 <DBN_FSMupdate+0xe6>
		break;
 8000ee0:	bf00      	nop
	}
}
 8000ee2:	bf00      	nop
 8000ee4:	3710      	adds	r7, #16
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop

08000eec <DBN_readKey>:
 * @param button Pointer to stDebounce structure managing the debounce state.
 * @return bool_t True if the button was pressed since the last check, false 
 * 		   otherwise.
 */
bool DBN_readKey(stDebounce *button)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b085      	sub	sp, #20
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
    bool _ret = button->isButtonPressed_;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	7a9b      	ldrb	r3, [r3, #10]
 8000ef8:	73fb      	strb	r3, [r7, #15]
    button->isButtonPressed_ = false;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	2200      	movs	r2, #0
 8000efe:	729a      	strb	r2, [r3, #10]
    return _ret;
 8000f00:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	3714      	adds	r7, #20
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr

08000f0e <DBN_getState>:
 *
 * @param button Pointer to stDebounce structure managing the debounce state.
 * @return debounceState_t The current state of the debounce FSM.
 */
debounceState_t DBN_getState(stDebounce *button)
{
 8000f0e:	b480      	push	{r7}
 8000f10:	b083      	sub	sp, #12
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	6078      	str	r0, [r7, #4]
	return button->state_;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	7a1b      	ldrb	r3, [r3, #8]
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	370c      	adds	r7, #12
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr

08000f26 <Error_Handler>:
/**
 * @brief Error handler function that is called when an invalid operation occurs
 * 
 */
static void Error_Handler(void)
{
 8000f26:	b480      	push	{r7}
 8000f28:	af00      	add	r7, sp, #0
	while (1)
 8000f2a:	e7fe      	b.n	8000f2a <Error_Handler+0x4>

08000f2c <delayInit>:
 * @param duration Delay duration in ticks. This duration determines the time 
 * that must elapse before the Delay instance is considered
 * complete or expired, once it has been started.
 */
void delayInit(delay_t *delay, tick_t duration)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
 8000f34:	6039      	str	r1, [r7, #0]
   if (delay == NULL || duration == 0U) // Fault check
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d002      	beq.n	8000f42 <delayInit+0x16>
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d101      	bne.n	8000f46 <delayInit+0x1a>
   {
      Error_Handler();
 8000f42:	f000 f835 	bl	8000fb0 <Error_Handler>
   }

   delay->duration = duration;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	683a      	ldr	r2, [r7, #0]
 8000f4a:	605a      	str	r2, [r3, #4]
   delay->running  = false;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2200      	movs	r2, #0
 8000f50:	721a      	strb	r2, [r3, #8]
}
 8000f52:	bf00      	nop
 8000f54:	3708      	adds	r7, #8
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}

08000f5a <delayRead>:
 * @return Returns true if the delay duration has elapsed (time is up), 
 * indicating that the delay period is complete. Returns false if the delay is 
 * still running (time has not yet fully elapsed).
 */
bool_t delayRead(delay_t *delay)
{
 8000f5a:	b580      	push	{r7, lr}
 8000f5c:	b084      	sub	sp, #16
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	6078      	str	r0, [r7, #4]
   bool_t _ret = false;
 8000f62:	2300      	movs	r3, #0
 8000f64:	73fb      	strb	r3, [r7, #15]

   if (delay == NULL) // Fault check
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d101      	bne.n	8000f70 <delayRead+0x16>
   {
      Error_Handler();
 8000f6c:	f000 f820 	bl	8000fb0 <Error_Handler>
   }

   tick_t currentTime = HAL_GetTick();
 8000f70:	f000 feb4 	bl	8001cdc <HAL_GetTick>
 8000f74:	60b8      	str	r0, [r7, #8]

   if (delay->running)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	7a1b      	ldrb	r3, [r3, #8]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d00d      	beq.n	8000f9a <delayRead+0x40>
   {
      if (currentTime - delay->startTime >= delay->duration)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	68ba      	ldr	r2, [r7, #8]
 8000f84:	1ad2      	subs	r2, r2, r3
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	429a      	cmp	r2, r3
 8000f8c:	d30b      	bcc.n	8000fa6 <delayRead+0x4c>
      {
         delay->running = false;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2200      	movs	r2, #0
 8000f92:	721a      	strb	r2, [r3, #8]
         _ret = true;
 8000f94:	2301      	movs	r3, #1
 8000f96:	73fb      	strb	r3, [r7, #15]
 8000f98:	e005      	b.n	8000fa6 <delayRead+0x4c>
      }      
   }
   else
   {
      delay->startTime = currentTime;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	68ba      	ldr	r2, [r7, #8]
 8000f9e:	601a      	str	r2, [r3, #0]
      delay->running   = true;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	721a      	strb	r2, [r3, #8]
   }

   return _ret;         
 8000fa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	3710      	adds	r7, #16
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}

08000fb0 <Error_Handler>:
 * @brief Error handler function.
 *
 * This function is called when an unrecoverable error occurs.
 */
static void Error_Handler(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
	while (1)
 8000fb4:	e7fe      	b.n	8000fb4 <Error_Handler+0x4>
	...

08000fb8 <ENC_encoderInit>:
/**
 * @brief Perform encoder FSM initialization.
 * 
 */
void ENC_encoderInit()
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
    DBN_FSMinit(&clkButton, &Encoder.clk_, &clkDelay);
 8000fbc:	4a25      	ldr	r2, [pc, #148]	; (8001054 <ENC_encoderInit+0x9c>)
 8000fbe:	4926      	ldr	r1, [pc, #152]	; (8001058 <ENC_encoderInit+0xa0>)
 8000fc0:	4826      	ldr	r0, [pc, #152]	; (800105c <ENC_encoderInit+0xa4>)
 8000fc2:	f7ff fef4 	bl	8000dae <DBN_FSMinit>
    DBN_FSMinit(&dtButton,  &Encoder.dt_,  &dtDelay);
 8000fc6:	4a26      	ldr	r2, [pc, #152]	; (8001060 <ENC_encoderInit+0xa8>)
 8000fc8:	4926      	ldr	r1, [pc, #152]	; (8001064 <ENC_encoderInit+0xac>)
 8000fca:	4827      	ldr	r0, [pc, #156]	; (8001068 <ENC_encoderInit+0xb0>)
 8000fcc:	f7ff feef 	bl	8000dae <DBN_FSMinit>

    Encoder.lastValidState_ = State_11;
 8000fd0:	4b24      	ldr	r3, [pc, #144]	; (8001064 <ENC_encoderInit+0xac>)
 8000fd2:	2202      	movs	r2, #2
 8000fd4:	741a      	strb	r2, [r3, #16]
    if(Port_ReadPin(Encoder.clk_.port, Encoder.clk_.pin) == GPIO_PIN_SET)
 8000fd6:	4b23      	ldr	r3, [pc, #140]	; (8001064 <ENC_encoderInit+0xac>)
 8000fd8:	689b      	ldr	r3, [r3, #8]
 8000fda:	4a22      	ldr	r2, [pc, #136]	; (8001064 <ENC_encoderInit+0xac>)
 8000fdc:	8992      	ldrh	r2, [r2, #12]
 8000fde:	4611      	mov	r1, r2
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f000 fcd3 	bl	800198c <Port_ReadPin>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b01      	cmp	r3, #1
 8000fea:	d112      	bne.n	8001012 <ENC_encoderInit+0x5a>
    {
        if(Port_ReadPin(Encoder.dt_.port, Encoder.dt_.pin) == GPIO_PIN_SET)
 8000fec:	4b1d      	ldr	r3, [pc, #116]	; (8001064 <ENC_encoderInit+0xac>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a1c      	ldr	r2, [pc, #112]	; (8001064 <ENC_encoderInit+0xac>)
 8000ff2:	8892      	ldrh	r2, [r2, #4]
 8000ff4:	4611      	mov	r1, r2
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f000 fcc8 	bl	800198c <Port_ReadPin>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b01      	cmp	r3, #1
 8001000:	d103      	bne.n	800100a <ENC_encoderInit+0x52>
        {
            Encoder.state_    = State_11;
 8001002:	4b18      	ldr	r3, [pc, #96]	; (8001064 <ENC_encoderInit+0xac>)
 8001004:	2202      	movs	r2, #2
 8001006:	745a      	strb	r2, [r3, #17]
 8001008:	e018      	b.n	800103c <ENC_encoderInit+0x84>
        }
        else
        {
            Encoder.state_ = State_01;
 800100a:	4b16      	ldr	r3, [pc, #88]	; (8001064 <ENC_encoderInit+0xac>)
 800100c:	2201      	movs	r2, #1
 800100e:	745a      	strb	r2, [r3, #17]
 8001010:	e014      	b.n	800103c <ENC_encoderInit+0x84>
        }
    }
    else
    {
        if(Port_ReadPin(Encoder.dt_.port, Encoder.dt_.pin) == GPIO_PIN_SET)
 8001012:	4b14      	ldr	r3, [pc, #80]	; (8001064 <ENC_encoderInit+0xac>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4a13      	ldr	r2, [pc, #76]	; (8001064 <ENC_encoderInit+0xac>)
 8001018:	8892      	ldrh	r2, [r2, #4]
 800101a:	4611      	mov	r1, r2
 800101c:	4618      	mov	r0, r3
 800101e:	f000 fcb5 	bl	800198c <Port_ReadPin>
 8001022:	4603      	mov	r3, r0
 8001024:	2b01      	cmp	r3, #1
 8001026:	d103      	bne.n	8001030 <ENC_encoderInit+0x78>
        {
            Encoder.state_ = State_10;
 8001028:	4b0e      	ldr	r3, [pc, #56]	; (8001064 <ENC_encoderInit+0xac>)
 800102a:	2203      	movs	r2, #3
 800102c:	745a      	strb	r2, [r3, #17]
 800102e:	e005      	b.n	800103c <ENC_encoderInit+0x84>
        }
        else
        {
            Encoder.state_ = State_00;
 8001030:	4b0c      	ldr	r3, [pc, #48]	; (8001064 <ENC_encoderInit+0xac>)
 8001032:	2200      	movs	r2, #0
 8001034:	745a      	strb	r2, [r3, #17]
            Encoder.lastValidState_ = State_00;
 8001036:	4b0b      	ldr	r3, [pc, #44]	; (8001064 <ENC_encoderInit+0xac>)
 8001038:	2200      	movs	r2, #0
 800103a:	741a      	strb	r2, [r3, #16]
        }
    }

    Encoder.dir_   = CW;
 800103c:	4b09      	ldr	r3, [pc, #36]	; (8001064 <ENC_encoderInit+0xac>)
 800103e:	2201      	movs	r2, #1
 8001040:	749a      	strb	r2, [r3, #18]
    Encoder.taken_ = true;
 8001042:	4b08      	ldr	r3, [pc, #32]	; (8001064 <ENC_encoderInit+0xac>)
 8001044:	2201      	movs	r2, #1
 8001046:	74da      	strb	r2, [r3, #19]
    isInit         = true;
 8001048:	4b08      	ldr	r3, [pc, #32]	; (800106c <ENC_encoderInit+0xb4>)
 800104a:	2201      	movs	r2, #1
 800104c:	701a      	strb	r2, [r3, #0]
}
 800104e:	bf00      	nop
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	200000ec 	.word	0x200000ec
 8001058:	200000c8 	.word	0x200000c8
 800105c:	200000d4 	.word	0x200000d4
 8001060:	200000f8 	.word	0x200000f8
 8001064:	200000c0 	.word	0x200000c0
 8001068:	200000e0 	.word	0x200000e0
 800106c:	200000be 	.word	0x200000be

08001070 <ENC_encoderUpdate>:
/**
 * @brief Updates encoder FSM. Must be called pediodically
 * 
 */
void ENC_encoderUpdate()
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
    if (!isInit)
 8001076:	4b51      	ldr	r3, [pc, #324]	; (80011bc <ENC_encoderUpdate+0x14c>)
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	f083 0301 	eor.w	r3, r3, #1
 800107e:	b2db      	uxtb	r3, r3
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <ENC_encoderUpdate+0x18>
    {
        Error_Handler();
 8001084:	f000 f8e4 	bl	8001250 <Error_Handler>
    }
    
    DBN_FSMupdate(&clkButton);
 8001088:	484d      	ldr	r0, [pc, #308]	; (80011c0 <ENC_encoderUpdate+0x150>)
 800108a:	f7ff feb7 	bl	8000dfc <DBN_FSMupdate>
    DBN_FSMupdate(&dtButton);
 800108e:	484d      	ldr	r0, [pc, #308]	; (80011c4 <ENC_encoderUpdate+0x154>)
 8001090:	f7ff feb4 	bl	8000dfc <DBN_FSMupdate>

    debounceState_t clkState = DBN_getState(&clkButton);
 8001094:	484a      	ldr	r0, [pc, #296]	; (80011c0 <ENC_encoderUpdate+0x150>)
 8001096:	f7ff ff3a 	bl	8000f0e <DBN_getState>
 800109a:	4603      	mov	r3, r0
 800109c:	71fb      	strb	r3, [r7, #7]
    debounceState_t dtState  = DBN_getState(&dtButton);
 800109e:	4849      	ldr	r0, [pc, #292]	; (80011c4 <ENC_encoderUpdate+0x154>)
 80010a0:	f7ff ff35 	bl	8000f0e <DBN_getState>
 80010a4:	4603      	mov	r3, r0
 80010a6:	71bb      	strb	r3, [r7, #6]
    
    switch (Encoder.state_)
 80010a8:	4b47      	ldr	r3, [pc, #284]	; (80011c8 <ENC_encoderUpdate+0x158>)
 80010aa:	7c5b      	ldrb	r3, [r3, #17]
 80010ac:	2b03      	cmp	r3, #3
 80010ae:	d877      	bhi.n	80011a0 <ENC_encoderUpdate+0x130>
 80010b0:	a201      	add	r2, pc, #4	; (adr r2, 80010b8 <ENC_encoderUpdate+0x48>)
 80010b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010b6:	bf00      	nop
 80010b8:	080010c9 	.word	0x080010c9
 80010bc:	080010e5 	.word	0x080010e5
 80010c0:	08001135 	.word	0x08001135
 80010c4:	08001151 	.word	0x08001151
    {
    case State_00:

        if (dtState == BUTTON_UP)
 80010c8:	79bb      	ldrb	r3, [r7, #6]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d103      	bne.n	80010d6 <ENC_encoderUpdate+0x66>
        {
            Encoder.state_ = State_10;
 80010ce:	4b3e      	ldr	r3, [pc, #248]	; (80011c8 <ENC_encoderUpdate+0x158>)
 80010d0:	2203      	movs	r2, #3
 80010d2:	745a      	strb	r2, [r3, #17]
        }
        else if (clkState == BUTTON_UP)
        {
            Encoder.state_ = State_01;
        }
        break;
 80010d4:	e067      	b.n	80011a6 <ENC_encoderUpdate+0x136>
        else if (clkState == BUTTON_UP)
 80010d6:	79fb      	ldrb	r3, [r7, #7]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d164      	bne.n	80011a6 <ENC_encoderUpdate+0x136>
            Encoder.state_ = State_01;
 80010dc:	4b3a      	ldr	r3, [pc, #232]	; (80011c8 <ENC_encoderUpdate+0x158>)
 80010de:	2201      	movs	r2, #1
 80010e0:	745a      	strb	r2, [r3, #17]
        break;
 80010e2:	e060      	b.n	80011a6 <ENC_encoderUpdate+0x136>

    case State_01:
        if (dtState == BUTTON_UP)
 80010e4:	79bb      	ldrb	r3, [r7, #6]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d110      	bne.n	800110c <ENC_encoderUpdate+0x9c>
        {
            Encoder.state_ = State_11;
 80010ea:	4b37      	ldr	r3, [pc, #220]	; (80011c8 <ENC_encoderUpdate+0x158>)
 80010ec:	2202      	movs	r2, #2
 80010ee:	745a      	strb	r2, [r3, #17]
            if (Encoder.lastValidState_ == State_00)
 80010f0:	4b35      	ldr	r3, [pc, #212]	; (80011c8 <ENC_encoderUpdate+0x158>)
 80010f2:	7c1b      	ldrb	r3, [r3, #16]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d158      	bne.n	80011aa <ENC_encoderUpdate+0x13a>
            {
                Encoder.lastValidState_ = State_11;
 80010f8:	4b33      	ldr	r3, [pc, #204]	; (80011c8 <ENC_encoderUpdate+0x158>)
 80010fa:	2202      	movs	r2, #2
 80010fc:	741a      	strb	r2, [r3, #16]
                Encoder.dir_   = CW;
 80010fe:	4b32      	ldr	r3, [pc, #200]	; (80011c8 <ENC_encoderUpdate+0x158>)
 8001100:	2201      	movs	r2, #1
 8001102:	749a      	strb	r2, [r3, #18]
                Encoder.taken_ = false;
 8001104:	4b30      	ldr	r3, [pc, #192]	; (80011c8 <ENC_encoderUpdate+0x158>)
 8001106:	2200      	movs	r2, #0
 8001108:	74da      	strb	r2, [r3, #19]
                Encoder.lastValidState_ = State_00;
                Encoder.dir_   = CounterCW;
                Encoder.taken_ = false;
            }
        }        
        break;
 800110a:	e04e      	b.n	80011aa <ENC_encoderUpdate+0x13a>
        else if (clkState == BUTTON_DOWN)
 800110c:	79fb      	ldrb	r3, [r7, #7]
 800110e:	2b02      	cmp	r3, #2
 8001110:	d14b      	bne.n	80011aa <ENC_encoderUpdate+0x13a>
            Encoder.state_ = State_00;
 8001112:	4b2d      	ldr	r3, [pc, #180]	; (80011c8 <ENC_encoderUpdate+0x158>)
 8001114:	2200      	movs	r2, #0
 8001116:	745a      	strb	r2, [r3, #17]
            if (Encoder.lastValidState_ == State_11)
 8001118:	4b2b      	ldr	r3, [pc, #172]	; (80011c8 <ENC_encoderUpdate+0x158>)
 800111a:	7c1b      	ldrb	r3, [r3, #16]
 800111c:	2b02      	cmp	r3, #2
 800111e:	d144      	bne.n	80011aa <ENC_encoderUpdate+0x13a>
                Encoder.lastValidState_ = State_00;
 8001120:	4b29      	ldr	r3, [pc, #164]	; (80011c8 <ENC_encoderUpdate+0x158>)
 8001122:	2200      	movs	r2, #0
 8001124:	741a      	strb	r2, [r3, #16]
                Encoder.dir_   = CounterCW;
 8001126:	4b28      	ldr	r3, [pc, #160]	; (80011c8 <ENC_encoderUpdate+0x158>)
 8001128:	2200      	movs	r2, #0
 800112a:	749a      	strb	r2, [r3, #18]
                Encoder.taken_ = false;
 800112c:	4b26      	ldr	r3, [pc, #152]	; (80011c8 <ENC_encoderUpdate+0x158>)
 800112e:	2200      	movs	r2, #0
 8001130:	74da      	strb	r2, [r3, #19]
        break;
 8001132:	e03a      	b.n	80011aa <ENC_encoderUpdate+0x13a>

    case State_11:
        if (dtState == BUTTON_DOWN)
 8001134:	79bb      	ldrb	r3, [r7, #6]
 8001136:	2b02      	cmp	r3, #2
 8001138:	d103      	bne.n	8001142 <ENC_encoderUpdate+0xd2>
        {
            Encoder.state_ = State_01;
 800113a:	4b23      	ldr	r3, [pc, #140]	; (80011c8 <ENC_encoderUpdate+0x158>)
 800113c:	2201      	movs	r2, #1
 800113e:	745a      	strb	r2, [r3, #17]
        }
        else if (clkState == BUTTON_DOWN)
        {
            Encoder.state_ = State_10;
        }
        break;
 8001140:	e035      	b.n	80011ae <ENC_encoderUpdate+0x13e>
        else if (clkState == BUTTON_DOWN)
 8001142:	79fb      	ldrb	r3, [r7, #7]
 8001144:	2b02      	cmp	r3, #2
 8001146:	d132      	bne.n	80011ae <ENC_encoderUpdate+0x13e>
            Encoder.state_ = State_10;
 8001148:	4b1f      	ldr	r3, [pc, #124]	; (80011c8 <ENC_encoderUpdate+0x158>)
 800114a:	2203      	movs	r2, #3
 800114c:	745a      	strb	r2, [r3, #17]
        break;
 800114e:	e02e      	b.n	80011ae <ENC_encoderUpdate+0x13e>
   
    case State_10:
        if (dtState == BUTTON_DOWN)
 8001150:	79bb      	ldrb	r3, [r7, #6]
 8001152:	2b02      	cmp	r3, #2
 8001154:	d110      	bne.n	8001178 <ENC_encoderUpdate+0x108>
        {
            Encoder.state_ = State_00;
 8001156:	4b1c      	ldr	r3, [pc, #112]	; (80011c8 <ENC_encoderUpdate+0x158>)
 8001158:	2200      	movs	r2, #0
 800115a:	745a      	strb	r2, [r3, #17]
            if (Encoder.lastValidState_ == State_11)
 800115c:	4b1a      	ldr	r3, [pc, #104]	; (80011c8 <ENC_encoderUpdate+0x158>)
 800115e:	7c1b      	ldrb	r3, [r3, #16]
 8001160:	2b02      	cmp	r3, #2
 8001162:	d126      	bne.n	80011b2 <ENC_encoderUpdate+0x142>
            {
                Encoder.lastValidState_ = State_00;
 8001164:	4b18      	ldr	r3, [pc, #96]	; (80011c8 <ENC_encoderUpdate+0x158>)
 8001166:	2200      	movs	r2, #0
 8001168:	741a      	strb	r2, [r3, #16]
                Encoder.dir_   = CW;
 800116a:	4b17      	ldr	r3, [pc, #92]	; (80011c8 <ENC_encoderUpdate+0x158>)
 800116c:	2201      	movs	r2, #1
 800116e:	749a      	strb	r2, [r3, #18]
                Encoder.taken_ = false;
 8001170:	4b15      	ldr	r3, [pc, #84]	; (80011c8 <ENC_encoderUpdate+0x158>)
 8001172:	2200      	movs	r2, #0
 8001174:	74da      	strb	r2, [r3, #19]
                Encoder.lastValidState_ = State_11;
                Encoder.dir_   = CounterCW;
                Encoder.taken_ = false;
            }
        }
        break;
 8001176:	e01c      	b.n	80011b2 <ENC_encoderUpdate+0x142>
        else if (clkState == BUTTON_UP)
 8001178:	79fb      	ldrb	r3, [r7, #7]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d119      	bne.n	80011b2 <ENC_encoderUpdate+0x142>
            Encoder.state_ = State_11;
 800117e:	4b12      	ldr	r3, [pc, #72]	; (80011c8 <ENC_encoderUpdate+0x158>)
 8001180:	2202      	movs	r2, #2
 8001182:	745a      	strb	r2, [r3, #17]
            if (Encoder.lastValidState_ == State_00)
 8001184:	4b10      	ldr	r3, [pc, #64]	; (80011c8 <ENC_encoderUpdate+0x158>)
 8001186:	7c1b      	ldrb	r3, [r3, #16]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d112      	bne.n	80011b2 <ENC_encoderUpdate+0x142>
                Encoder.lastValidState_ = State_11;
 800118c:	4b0e      	ldr	r3, [pc, #56]	; (80011c8 <ENC_encoderUpdate+0x158>)
 800118e:	2202      	movs	r2, #2
 8001190:	741a      	strb	r2, [r3, #16]
                Encoder.dir_   = CounterCW;
 8001192:	4b0d      	ldr	r3, [pc, #52]	; (80011c8 <ENC_encoderUpdate+0x158>)
 8001194:	2200      	movs	r2, #0
 8001196:	749a      	strb	r2, [r3, #18]
                Encoder.taken_ = false;
 8001198:	4b0b      	ldr	r3, [pc, #44]	; (80011c8 <ENC_encoderUpdate+0x158>)
 800119a:	2200      	movs	r2, #0
 800119c:	74da      	strb	r2, [r3, #19]
        break;
 800119e:	e008      	b.n	80011b2 <ENC_encoderUpdate+0x142>
    
    default:
        ENC_encoderInit();
 80011a0:	f7ff ff0a 	bl	8000fb8 <ENC_encoderInit>
        break;
 80011a4:	e006      	b.n	80011b4 <ENC_encoderUpdate+0x144>
        break;
 80011a6:	bf00      	nop
 80011a8:	e004      	b.n	80011b4 <ENC_encoderUpdate+0x144>
        break;
 80011aa:	bf00      	nop
 80011ac:	e002      	b.n	80011b4 <ENC_encoderUpdate+0x144>
        break;
 80011ae:	bf00      	nop
 80011b0:	e000      	b.n	80011b4 <ENC_encoderUpdate+0x144>
        break;
 80011b2:	bf00      	nop
    }
}
 80011b4:	bf00      	nop
 80011b6:	3708      	adds	r7, #8
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	200000be 	.word	0x200000be
 80011c0:	200000d4 	.word	0x200000d4
 80011c4:	200000e0 	.word	0x200000e0
 80011c8:	200000c0 	.word	0x200000c0

080011cc <ENC_getDirection>:
 * @brief Return last valid direction just one time.
 * 
 * @return eMovingDir 
 */
eMovingDir ENC_getDirection()
{
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
    eMovingDir _ret = INVALID;
 80011d2:	2302      	movs	r3, #2
 80011d4:	71fb      	strb	r3, [r7, #7]

    if (!Encoder.taken_)
 80011d6:	4b0a      	ldr	r3, [pc, #40]	; (8001200 <ENC_getDirection+0x34>)
 80011d8:	7cdb      	ldrb	r3, [r3, #19]
 80011da:	f083 0301 	eor.w	r3, r3, #1
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d005      	beq.n	80011f0 <ENC_getDirection+0x24>
    {
        Encoder.taken_ = true;
 80011e4:	4b06      	ldr	r3, [pc, #24]	; (8001200 <ENC_getDirection+0x34>)
 80011e6:	2201      	movs	r2, #1
 80011e8:	74da      	strb	r2, [r3, #19]
        _ret = Encoder.dir_;
 80011ea:	4b05      	ldr	r3, [pc, #20]	; (8001200 <ENC_getDirection+0x34>)
 80011ec:	7c9b      	ldrb	r3, [r3, #18]
 80011ee:	71fb      	strb	r3, [r7, #7]
    }
    return _ret;
 80011f0:	79fb      	ldrb	r3, [r7, #7]
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	370c      	adds	r7, #12
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	200000c0 	.word	0x200000c0

08001204 <ENC_setGPIOs>:
 * @param dt 
 * @param clk 
 * @return bool_t 
 */
bool_t ENC_setGPIOs(gpio_t *dt, gpio_t *clk)
{
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
 800120c:	6039      	str	r1, [r7, #0]
    if ((NULL == dt) || (NULL == clk))
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d002      	beq.n	800121a <ENC_setGPIOs+0x16>
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d101      	bne.n	800121e <ENC_setGPIOs+0x1a>
    {
        return false;
 800121a:	2300      	movs	r3, #0
 800121c:	e010      	b.n	8001240 <ENC_setGPIOs+0x3c>
    }
    
    Encoder.dt_.pin   = dt->pin;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	889a      	ldrh	r2, [r3, #4]
 8001222:	4b0a      	ldr	r3, [pc, #40]	; (800124c <ENC_setGPIOs+0x48>)
 8001224:	809a      	strh	r2, [r3, #4]
    Encoder.dt_.port  = dt->port;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4a08      	ldr	r2, [pc, #32]	; (800124c <ENC_setGPIOs+0x48>)
 800122c:	6013      	str	r3, [r2, #0]
    Encoder.clk_.pin  = clk->pin;
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	889a      	ldrh	r2, [r3, #4]
 8001232:	4b06      	ldr	r3, [pc, #24]	; (800124c <ENC_setGPIOs+0x48>)
 8001234:	819a      	strh	r2, [r3, #12]
    Encoder.clk_.port = clk->port;
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4a04      	ldr	r2, [pc, #16]	; (800124c <ENC_setGPIOs+0x48>)
 800123c:	6093      	str	r3, [r2, #8]

    return true;
 800123e:	2301      	movs	r3, #1
}
 8001240:	4618      	mov	r0, r3
 8001242:	370c      	adds	r7, #12
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr
 800124c:	200000c0 	.word	0x200000c0

08001250 <Error_Handler>:
/**
 * @brief Error handler function that is called when an invalid operation occurs
 * 
 */
static void Error_Handler(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
	while (1)
 8001254:	e7fe      	b.n	8001254 <Error_Handler+0x4>
	...

08001258 <I2C_HW_init>:
/**
 * @brief Initializes the I2C hardware with predefined settings.
 * @return Returns HAL_OK if successful, HAL_ERROR otherwise.
 */
bool_t I2C_HW_init(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
	if (isInit_)
 800125c:	4b19      	ldr	r3, [pc, #100]	; (80012c4 <I2C_HW_init+0x6c>)
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <I2C_HW_init+0x10>
	{
		return HAL_OK;
 8001264:	2300      	movs	r3, #0
 8001266:	e02a      	b.n	80012be <I2C_HW_init+0x66>
	}
	
	hi2c1.Instance 			   = I2C1;
 8001268:	4b17      	ldr	r3, [pc, #92]	; (80012c8 <I2C_HW_init+0x70>)
 800126a:	4a18      	ldr	r2, [pc, #96]	; (80012cc <I2C_HW_init+0x74>)
 800126c:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed 	   = I2C_CLOCK_RATE;
 800126e:	4b16      	ldr	r3, [pc, #88]	; (80012c8 <I2C_HW_init+0x70>)
 8001270:	4a17      	ldr	r2, [pc, #92]	; (80012d0 <I2C_HW_init+0x78>)
 8001272:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle 	   = I2C_DUTYCYCLE_2;
 8001274:	4b14      	ldr	r3, [pc, #80]	; (80012c8 <I2C_HW_init+0x70>)
 8001276:	2200      	movs	r2, #0
 8001278:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 	   = 0;
 800127a:	4b13      	ldr	r3, [pc, #76]	; (80012c8 <I2C_HW_init+0x70>)
 800127c:	2200      	movs	r2, #0
 800127e:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode  = I2C_ADDRESSINGMODE_7BIT;
 8001280:	4b11      	ldr	r3, [pc, #68]	; (80012c8 <I2C_HW_init+0x70>)
 8001282:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001286:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001288:	4b0f      	ldr	r3, [pc, #60]	; (80012c8 <I2C_HW_init+0x70>)
 800128a:	2200      	movs	r2, #0
 800128c:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 	   = 0;
 800128e:	4b0e      	ldr	r3, [pc, #56]	; (80012c8 <I2C_HW_init+0x70>)
 8001290:	2200      	movs	r2, #0
 8001292:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001294:	4b0c      	ldr	r3, [pc, #48]	; (80012c8 <I2C_HW_init+0x70>)
 8001296:	2200      	movs	r2, #0
 8001298:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode   = I2C_NOSTRETCH_DISABLE;
 800129a:	4b0b      	ldr	r3, [pc, #44]	; (80012c8 <I2C_HW_init+0x70>)
 800129c:	2200      	movs	r2, #0
 800129e:	621a      	str	r2, [r3, #32]
	GPIO_I2C(&hi2c1);
 80012a0:	4809      	ldr	r0, [pc, #36]	; (80012c8 <I2C_HW_init+0x70>)
 80012a2:	f000 f85f 	bl	8001364 <GPIO_I2C>

	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012a6:	4808      	ldr	r0, [pc, #32]	; (80012c8 <I2C_HW_init+0x70>)
 80012a8:	f001 f826 	bl	80022f8 <HAL_I2C_Init>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <I2C_HW_init+0x5e>
	{
		return HAL_ERROR;
 80012b2:	2301      	movs	r3, #1
 80012b4:	e003      	b.n	80012be <I2C_HW_init+0x66>
	}

	isInit_ = true;
 80012b6:	4b03      	ldr	r3, [pc, #12]	; (80012c4 <I2C_HW_init+0x6c>)
 80012b8:	2201      	movs	r2, #1
 80012ba:	701a      	strb	r2, [r3, #0]
	return HAL_OK;
 80012bc:	2300      	movs	r3, #0
}
 80012be:	4618      	mov	r0, r3
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	20000158 	.word	0x20000158
 80012c8:	20000104 	.word	0x20000104
 80012cc:	40005400 	.word	0x40005400
 80012d0:	000186a0 	.word	0x000186a0

080012d4 <I2C_Send>:
 * @param ptrData Pointer to the data buffer to transmit.
 * @param size Number of bytes to transmit.
 * @return true if successful, false otherwise.
 */
bool_t I2C_Send(uint16_t address, uint8_t *ptrData, uint16_t size)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b084      	sub	sp, #16
 80012d8:	af02      	add	r7, sp, #8
 80012da:	4603      	mov	r3, r0
 80012dc:	6039      	str	r1, [r7, #0]
 80012de:	80fb      	strh	r3, [r7, #6]
 80012e0:	4613      	mov	r3, r2
 80012e2:	80bb      	strh	r3, [r7, #4]
	if(HAL_I2C_Master_Transmit(&hi2c1, address, ptrData, size, I2C_TIMEOUT) != HAL_OK)
 80012e4:	88bb      	ldrh	r3, [r7, #4]
 80012e6:	88f9      	ldrh	r1, [r7, #6]
 80012e8:	f242 7210 	movw	r2, #10000	; 0x2710
 80012ec:	9200      	str	r2, [sp, #0]
 80012ee:	683a      	ldr	r2, [r7, #0]
 80012f0:	4806      	ldr	r0, [pc, #24]	; (800130c <I2C_Send+0x38>)
 80012f2:	f001 f94f 	bl	8002594 <HAL_I2C_Master_Transmit>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <I2C_Send+0x2c>
	{
		return false;
 80012fc:	2300      	movs	r3, #0
 80012fe:	e000      	b.n	8001302 <I2C_Send+0x2e>
	}
	return true;
 8001300:	2301      	movs	r3, #1
}
 8001302:	4618      	mov	r0, r3
 8001304:	3708      	adds	r7, #8
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	20000104 	.word	0x20000104

08001310 <I2C_Receive>:
 * @param ptrData Pointer to the buffer to store received data.
 * @param size Number of bytes to receive.
 * @return true if successful, false otherwise.
 */
bool_t I2C_Receive(uint16_t address, uint8_t *ptrData, uint16_t size)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b084      	sub	sp, #16
 8001314:	af02      	add	r7, sp, #8
 8001316:	4603      	mov	r3, r0
 8001318:	6039      	str	r1, [r7, #0]
 800131a:	80fb      	strh	r3, [r7, #6]
 800131c:	4613      	mov	r3, r2
 800131e:	80bb      	strh	r3, [r7, #4]
	if (HAL_I2C_Master_Receive(&hi2c1, address, ptrData, sizeof(ptrData), I2C_TIMEOUT) != HAL_OK)
 8001320:	88f9      	ldrh	r1, [r7, #6]
 8001322:	f242 7310 	movw	r3, #10000	; 0x2710
 8001326:	9300      	str	r3, [sp, #0]
 8001328:	2304      	movs	r3, #4
 800132a:	683a      	ldr	r2, [r7, #0]
 800132c:	4806      	ldr	r0, [pc, #24]	; (8001348 <I2C_Receive+0x38>)
 800132e:	f001 fa2f 	bl	8002790 <HAL_I2C_Master_Receive>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <I2C_Receive+0x2c>
	{
		return false;
 8001338:	2300      	movs	r3, #0
 800133a:	e000      	b.n	800133e <I2C_Receive+0x2e>
	}
	return true;
 800133c:	2301      	movs	r3, #1
}
 800133e:	4618      	mov	r0, r3
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	20000104 	.word	0x20000104

0800134c <I2C_isInit>:
/**
 * @brief Checks if the I2C interface has been initialized.
 * @return true if I2C is initialized, false otherwise.
 */
bool_t I2C_isInit()
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
	return isInit_;
 8001350:	4b03      	ldr	r3, [pc, #12]	; (8001360 <I2C_isInit+0x14>)
 8001352:	781b      	ldrb	r3, [r3, #0]
}
 8001354:	4618      	mov	r0, r3
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	20000158 	.word	0x20000158

08001364 <GPIO_I2C>:
/**
 * @brief Configures GPIO for I2C communication.
 * @param hi2c Pointer to the I2C_HandleTypeDef structure that contains the configuration information for I2C module.
 */
static void GPIO_I2C(I2C_HandleTypeDef *hi2c)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b08a      	sub	sp, #40	; 0x28
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
	 GPIO_InitTypeDef GPIO_InitStruct;

	  /* GPIO Ports Clock Enable */
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 800136c:	2300      	movs	r3, #0
 800136e:	613b      	str	r3, [r7, #16]
 8001370:	4b17      	ldr	r3, [pc, #92]	; (80013d0 <GPIO_I2C+0x6c>)
 8001372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001374:	4a16      	ldr	r2, [pc, #88]	; (80013d0 <GPIO_I2C+0x6c>)
 8001376:	f043 0302 	orr.w	r3, r3, #2
 800137a:	6313      	str	r3, [r2, #48]	; 0x30
 800137c:	4b14      	ldr	r3, [pc, #80]	; (80013d0 <GPIO_I2C+0x6c>)
 800137e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001380:	f003 0302 	and.w	r3, r3, #2
 8001384:	613b      	str	r3, [r7, #16]
 8001386:	693b      	ldr	r3, [r7, #16]

	  GPIO_InitStruct.Pin 		= GPIO_PIN_8|GPIO_PIN_9;
 8001388:	f44f 7340 	mov.w	r3, #768	; 0x300
 800138c:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Mode 		= GPIO_MODE_AF_OD;
 800138e:	2312      	movs	r3, #18
 8001390:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull 		= GPIO_NOPULL;
 8001392:	2300      	movs	r3, #0
 8001394:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Speed 	= GPIO_SPEED_FREQ_LOW;
 8001396:	2300      	movs	r3, #0
 8001398:	623b      	str	r3, [r7, #32]
	  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800139a:	2304      	movs	r3, #4
 800139c:	627b      	str	r3, [r7, #36]	; 0x24

	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800139e:	f107 0314 	add.w	r3, r7, #20
 80013a2:	4619      	mov	r1, r3
 80013a4:	480b      	ldr	r0, [pc, #44]	; (80013d4 <GPIO_I2C+0x70>)
 80013a6:	f000 fdaf 	bl	8001f08 <HAL_GPIO_Init>

	     /* Peripheral clock enable */
	  __HAL_RCC_I2C1_CLK_ENABLE();
 80013aa:	2300      	movs	r3, #0
 80013ac:	60fb      	str	r3, [r7, #12]
 80013ae:	4b08      	ldr	r3, [pc, #32]	; (80013d0 <GPIO_I2C+0x6c>)
 80013b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b2:	4a07      	ldr	r2, [pc, #28]	; (80013d0 <GPIO_I2C+0x6c>)
 80013b4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013b8:	6413      	str	r3, [r2, #64]	; 0x40
 80013ba:	4b05      	ldr	r3, [pc, #20]	; (80013d0 <GPIO_I2C+0x6c>)
 80013bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013c2:	60fb      	str	r3, [r7, #12]
 80013c4:	68fb      	ldr	r3, [r7, #12]
}
 80013c6:	bf00      	nop
 80013c8:	3728      	adds	r7, #40	; 0x28
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	40023800 	.word	0x40023800
 80013d4:	40020400 	.word	0x40020400

080013d8 <LCD_Init>:
/**
 * @brief Initializes the LCD display.
 * @return bool_t LCD_OK on success, LCD_ERROR on failure.
 */                                                                                                                                                                                                                                                                                                                         
bool_t LCD_Init(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
	if(!I2C_isInit())
 80013de:	f7ff ffb5 	bl	800134c <I2C_isInit>
 80013e2:	4603      	mov	r3, r0
 80013e4:	f083 0301 	eor.w	r3, r3, #1
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d006      	beq.n	80013fc <LCD_Init+0x24>
	{
		if(I2C_HW_init() == LCD_ERROR)
 80013ee:	f7ff ff33 	bl	8001258 <I2C_HW_init>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <LCD_Init+0x24>
		{
			return LCD_ERROR;
 80013f8:	2301      	movs	r3, #1
 80013fa:	e02b      	b.n	8001454 <LCD_Init+0x7c>
		}
	}

    Port_Delay(DELAY_20MS);
 80013fc:	2014      	movs	r0, #20
 80013fe:	f000 faba 	bl	8001976 <Port_Delay>

    send4bits(CMD_INIT1, CONTROL);
 8001402:	2100      	movs	r1, #0
 8001404:	2030      	movs	r0, #48	; 0x30
 8001406:	f000 f8ae 	bl	8001566 <send4bits>
    Port_Delay(DELAY_10MS);
 800140a:	200a      	movs	r0, #10
 800140c:	f000 fab3 	bl	8001976 <Port_Delay>

    send4bits(CMD_INIT1, CONTROL);
 8001410:	2100      	movs	r1, #0
 8001412:	2030      	movs	r0, #48	; 0x30
 8001414:	f000 f8a7 	bl	8001566 <send4bits>
    Port_Delay(DELAY_1MS);
 8001418:	2001      	movs	r0, #1
 800141a:	f000 faac 	bl	8001976 <Port_Delay>

    send4bits(CMD_INIT1,CONTROL);
 800141e:	2100      	movs	r1, #0
 8001420:	2030      	movs	r0, #48	; 0x30
 8001422:	f000 f8a0 	bl	8001566 <send4bits>
    send4bits(CMD_INIT2,CONTROL);
 8001426:	2100      	movs	r1, #0
 8001428:	2020      	movs	r0, #32
 800142a:	f000 f89c 	bl	8001566 <send4bits>

    for(uint8_t i = 0U; i < sizeof(LCD_INIT_CMD); i++)
 800142e:	2300      	movs	r3, #0
 8001430:	71fb      	strb	r3, [r7, #7]
 8001432:	e008      	b.n	8001446 <LCD_Init+0x6e>
    {
        controlLcd(LCD_INIT_CMD[i]);
 8001434:	79fb      	ldrb	r3, [r7, #7]
 8001436:	4a09      	ldr	r2, [pc, #36]	; (800145c <LCD_Init+0x84>)
 8001438:	5cd3      	ldrb	r3, [r2, r3]
 800143a:	4618      	mov	r0, r3
 800143c:	f000 f868 	bl	8001510 <controlLcd>
    for(uint8_t i = 0U; i < sizeof(LCD_INIT_CMD); i++)
 8001440:	79fb      	ldrb	r3, [r7, #7]
 8001442:	3301      	adds	r3, #1
 8001444:	71fb      	strb	r3, [r7, #7]
 8001446:	79fb      	ldrb	r3, [r7, #7]
 8001448:	2b05      	cmp	r3, #5
 800144a:	d9f3      	bls.n	8001434 <LCD_Init+0x5c>
    }

    Port_Delay(DELAY_2MS);
 800144c:	2002      	movs	r0, #2
 800144e:	f000 fa92 	bl	8001976 <Port_Delay>
    return LCD_OK;
 8001452:	2300      	movs	r3, #0
}
 8001454:	4618      	mov	r0, r3
 8001456:	3708      	adds	r7, #8
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	080052c8 	.word	0x080052c8

08001460 <LCD_Data>:
/**
 * @brief Sends 8-bit data to the LCD.
 * @param data Data to send.
 */
void LCD_Data(uint8_t data)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	4603      	mov	r3, r0
 8001468:	71fb      	strb	r3, [r7, #7]
	send8bits(data, DATA);
 800146a:	79fb      	ldrb	r3, [r7, #7]
 800146c:	2101      	movs	r1, #1
 800146e:	4618      	mov	r0, r3
 8001470:	f000 f85c 	bl	800152c <send8bits>
}
 8001474:	bf00      	nop
 8001476:	3708      	adds	r7, #8
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}

0800147c <LCD_SendText>:
/**
 * @brief Sends a null-terminated string to the LCD.
 * @param text Pointer to the string to be displayed.
 */
void LCD_SendText(uint8_t *text)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
    if (NULL == text)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d00c      	beq.n	80014a4 <LCD_SendText+0x28>
    {
        return;
    }
    
	while(*text)
 800148a:	e006      	b.n	800149a <LCD_SendText+0x1e>
    {
        LCD_Data(*text++);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	1c5a      	adds	r2, r3, #1
 8001490:	607a      	str	r2, [r7, #4]
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	4618      	mov	r0, r3
 8001496:	f7ff ffe3 	bl	8001460 <LCD_Data>
	while(*text)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d1f4      	bne.n	800148c <LCD_SendText+0x10>
 80014a2:	e000      	b.n	80014a6 <LCD_SendText+0x2a>
        return;
 80014a4:	bf00      	nop
    }
}
 80014a6:	3708      	adds	r7, #8
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}

080014ac <LCD_Clear>:

/**
 * @brief Clears the LCD display.
 */
void LCD_Clear(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
   controlLcd(CLR_LCD);
 80014b0:	2001      	movs	r0, #1
 80014b2:	f000 f82d 	bl	8001510 <controlLcd>
   Port_Delay(DELAY_2MS);
 80014b6:	2002      	movs	r0, #2
 80014b8:	f000 fa5d 	bl	8001976 <Port_Delay>
}
 80014bc:	bf00      	nop
 80014be:	bd80      	pop	{r7, pc}

080014c0 <LCD_PosCharacH>:
/**
 * @brief Sets the cursor position on the first line of the LCD.
 * @param posH Horizontal position on the first line.
 */
void LCD_PosCharacH(uint8_t posH)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	4603      	mov	r3, r0
 80014c8:	71fb      	strb	r3, [r7, #7]
    if (posH > 15)
 80014ca:	79fb      	ldrb	r3, [r7, #7]
 80014cc:	2b0f      	cmp	r3, #15
 80014ce:	d807      	bhi.n	80014e0 <LCD_PosCharacH+0x20>
    {
        return;
    }
	controlLcd(posH | LINE1);
 80014d0:	79fb      	ldrb	r3, [r7, #7]
 80014d2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80014d6:	b2db      	uxtb	r3, r3
 80014d8:	4618      	mov	r0, r3
 80014da:	f000 f819 	bl	8001510 <controlLcd>
 80014de:	e000      	b.n	80014e2 <LCD_PosCharacH+0x22>
        return;
 80014e0:	bf00      	nop
}
 80014e2:	3708      	adds	r7, #8
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}

080014e8 <LCD_PosCharacL>:
/**
 * @brief Sets the cursor position on the second line of the LCD.
 * @param posL Horizontal position on the second line.
 */
void LCD_PosCharacL(uint8_t posL)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	4603      	mov	r3, r0
 80014f0:	71fb      	strb	r3, [r7, #7]
    if (posL > 15)
 80014f2:	79fb      	ldrb	r3, [r7, #7]
 80014f4:	2b0f      	cmp	r3, #15
 80014f6:	d807      	bhi.n	8001508 <LCD_PosCharacL+0x20>
    {
        return;
    }
	controlLcd(posL | LINE2);
 80014f8:	79fb      	ldrb	r3, [r7, #7]
 80014fa:	f063 033f 	orn	r3, r3, #63	; 0x3f
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	4618      	mov	r0, r3
 8001502:	f000 f805 	bl	8001510 <controlLcd>
 8001506:	e000      	b.n	800150a <LCD_PosCharacL+0x22>
        return;
 8001508:	bf00      	nop
}
 800150a:	3708      	adds	r7, #8
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}

08001510 <controlLcd>:
/**
 * @brief Controls the LCD with a specific command or data.
 * @param value The value/command to send.
 */
static void controlLcd(uint8_t value)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
 8001516:	4603      	mov	r3, r0
 8001518:	71fb      	strb	r3, [r7, #7]
	send8bits(value, CONTROL);
 800151a:	79fb      	ldrb	r3, [r7, #7]
 800151c:	2100      	movs	r1, #0
 800151e:	4618      	mov	r0, r3
 8001520:	f000 f804 	bl	800152c <send8bits>
}
 8001524:	bf00      	nop
 8001526:	3708      	adds	r7, #8
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}

0800152c <send8bits>:
 * @brief Sends an 8-bit value to the LCD as two sets of 4-bits.
 * @param value The value to send.
 * @param tipo Indicates whether the value is a command or data.
 */
static void send8bits(uint8_t value, bool_t tipo)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
 8001532:	4603      	mov	r3, r0
 8001534:	460a      	mov	r2, r1
 8001536:	71fb      	strb	r3, [r7, #7]
 8001538:	4613      	mov	r3, r2
 800153a:	71bb      	strb	r3, [r7, #6]
	send4bits(value & HIGH_NIBBLE,tipo);
 800153c:	79fb      	ldrb	r3, [r7, #7]
 800153e:	f023 030f 	bic.w	r3, r3, #15
 8001542:	b2db      	uxtb	r3, r3
 8001544:	79ba      	ldrb	r2, [r7, #6]
 8001546:	4611      	mov	r1, r2
 8001548:	4618      	mov	r0, r3
 800154a:	f000 f80c 	bl	8001566 <send4bits>
	send4bits(value << LOW_NIBBLE,tipo);
 800154e:	79fb      	ldrb	r3, [r7, #7]
 8001550:	011b      	lsls	r3, r3, #4
 8001552:	b2db      	uxtb	r3, r3
 8001554:	79ba      	ldrb	r2, [r7, #6]
 8001556:	4611      	mov	r1, r2
 8001558:	4618      	mov	r0, r3
 800155a:	f000 f804 	bl	8001566 <send4bits>
}
 800155e:	bf00      	nop
 8001560:	3708      	adds	r7, #8
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}

08001566 <send4bits>:
 * @brief Sends a 4-bit value to the LCD.
 * @param value The value to send.
 * @param tipo Indicates whether the value is a command or data.
 */
static void send4bits(uint8_t value, bool_t tipo)
{
 8001566:	b580      	push	{r7, lr}
 8001568:	b084      	sub	sp, #16
 800156a:	af00      	add	r7, sp, #0
 800156c:	4603      	mov	r3, r0
 800156e:	460a      	mov	r2, r1
 8001570:	71fb      	strb	r3, [r7, #7]
 8001572:	4613      	mov	r3, r2
 8001574:	71bb      	strb	r3, [r7, #6]
    uint8_t _val1 = (value + (uint8_t)tipo + (uint8_t)EN + (uint8_t)BL);
 8001576:	79ba      	ldrb	r2, [r7, #6]
 8001578:	79fb      	ldrb	r3, [r7, #7]
 800157a:	4413      	add	r3, r2
 800157c:	b2db      	uxtb	r3, r3
 800157e:	330c      	adds	r3, #12
 8001580:	b2db      	uxtb	r3, r3
 8001582:	73fb      	strb	r3, [r7, #15]
    uint8_t _val2 = (value + (uint8_t)tipo + (uint8_t)BL);
 8001584:	79ba      	ldrb	r2, [r7, #6]
 8001586:	79fb      	ldrb	r3, [r7, #7]
 8001588:	4413      	add	r3, r2
 800158a:	b2db      	uxtb	r3, r3
 800158c:	3308      	adds	r3, #8
 800158e:	b2db      	uxtb	r3, r3
 8001590:	73bb      	strb	r3, [r7, #14]

	I2C_Send(LCD_I2C_ADD, &_val1, sizeof(value));
 8001592:	f107 030f 	add.w	r3, r7, #15
 8001596:	2201      	movs	r2, #1
 8001598:	4619      	mov	r1, r3
 800159a:	204e      	movs	r0, #78	; 0x4e
 800159c:	f7ff fe9a 	bl	80012d4 <I2C_Send>
	Port_Delay(DELAY_1MS);
 80015a0:	2001      	movs	r0, #1
 80015a2:	f000 f9e8 	bl	8001976 <Port_Delay>
	I2C_Send(LCD_I2C_ADD, &_val2, sizeof(value));
 80015a6:	f107 030e 	add.w	r3, r7, #14
 80015aa:	2201      	movs	r2, #1
 80015ac:	4619      	mov	r1, r3
 80015ae:	204e      	movs	r0, #78	; 0x4e
 80015b0:	f7ff fe90 	bl	80012d4 <I2C_Send>
	Port_Delay(DELAY_1MS);
 80015b4:	2001      	movs	r0, #1
 80015b6:	f000 f9de 	bl	8001976 <Port_Delay>
}
 80015ba:	bf00      	nop
 80015bc:	3710      	adds	r7, #16
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}

080015c2 <SCD_Init>:
/**
 * @brief Initializes the SCD4x sensor.
 * @return bool_t SCD_OK if successful, SCD_ERROR otherwise.
 */
bool_t SCD_Init()
{
 80015c2:	b580      	push	{r7, lr}
 80015c4:	af00      	add	r7, sp, #0
	if(!I2C_isInit())
 80015c6:	f7ff fec1 	bl	800134c <I2C_isInit>
 80015ca:	4603      	mov	r3, r0
 80015cc:	f083 0301 	eor.w	r3, r3, #1
 80015d0:	b2db      	uxtb	r3, r3
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d006      	beq.n	80015e4 <SCD_Init+0x22>
	{
		if (I2C_HW_init() != I2C_OK)
 80015d6:	f7ff fe3f 	bl	8001258 <I2C_HW_init>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <SCD_Init+0x22>
		{
			return SCD_ERROR;
 80015e0:	2301      	movs	r3, #1
 80015e2:	e00c      	b.n	80015fe <SCD_Init+0x3c>
		}
	}
    
    if(SCD_SendCommand(START_PERIODIC_MODE) == I2C_OK) /** Start continue measurement */
 80015e4:	f242 10b1 	movw	r0, #8625	; 0x21b1
 80015e8:	f000 f8bc 	bl	8001764 <SCD_SendCommand>
 80015ec:	4603      	mov	r3, r0
 80015ee:	f083 0301 	eor.w	r3, r3, #1
 80015f2:	b2db      	uxtb	r3, r3
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d001      	beq.n	80015fc <SCD_Init+0x3a>
    {
        return SCD_OK;
 80015f8:	2300      	movs	r3, #0
 80015fa:	e000      	b.n	80015fe <SCD_Init+0x3c>
    }
    return SCD_ERROR;
 80015fc:	2301      	movs	r3, #1
}
 80015fe:	4618      	mov	r0, r3
 8001600:	bd80      	pop	{r7, pc}

08001602 <SCD_CleanSensor>:
 * @brief Cleans the sensor data structure by setting data fields to zero.
 * @param sensor Pointer to the sensor data structure.
 * @return bool_t true if successful, false if the sensor pointer is NULL.
 */
bool_t SCD_CleanSensor(strSCD *sensor)
{
 8001602:	b480      	push	{r7}
 8001604:	b083      	sub	sp, #12
 8001606:	af00      	add	r7, sp, #0
 8001608:	6078      	str	r0, [r7, #4]
    if (NULL == sensor)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d101      	bne.n	8001614 <SCD_CleanSensor+0x12>
    {
        return false;
 8001610:	2300      	movs	r3, #0
 8001612:	e012      	b.n	800163a <SCD_CleanSensor+0x38>
    }
    
    sensor->data.temp = 0U;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2200      	movs	r2, #0
 8001618:	801a      	strh	r2, [r3, #0]
    sensor->data.hum  = 0U;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2200      	movs	r2, #0
 800161e:	805a      	strh	r2, [r3, #2]
    sensor->data.co2  = 0U;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2200      	movs	r2, #0
 8001624:	809a      	strh	r2, [r3, #4]

    sensor->config.tempOffset = 0U;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2200      	movs	r2, #0
 800162a:	80da      	strh	r2, [r3, #6]
    sensor->config.humOffset  = 0U;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2200      	movs	r2, #0
 8001630:	811a      	strh	r2, [r3, #8]
    sensor->config.co2Offset  = 0U;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2200      	movs	r2, #0
 8001636:	815a      	strh	r2, [r3, #10]

    return true;
 8001638:	2301      	movs	r3, #1
}
 800163a:	4618      	mov	r0, r3
 800163c:	370c      	adds	r7, #12
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
	...

08001648 <SCD_PollData>:
 * @brief Polls the sensor for new data and updates the sensor data structure.
 * @param sensor Pointer to the sensor data structure where data will be stored.
 * @return bool_t SCD_OK if data was successfully read, SCD_ERROR otherwise.
 */
bool_t SCD_PollData(strSCD *sensor)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b086      	sub	sp, #24
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
    uint8_t data[SCD_DATA_LENGTH];
    uint16_t rawCO2         = 0U;
 8001650:	2300      	movs	r3, #0
 8001652:	82fb      	strh	r3, [r7, #22]
    uint16_t rawTemperature = 0U;
 8001654:	2300      	movs	r3, #0
 8001656:	82bb      	strh	r3, [r7, #20]
    uint16_t rawHumidity    = 0U;
 8001658:	2300      	movs	r3, #0
 800165a:	827b      	strh	r3, [r7, #18]

    if (SCD_SendCommand(READ_DATA) != I2C_OK)
 800165c:	f64e 4005 	movw	r0, #60421	; 0xec05
 8001660:	f000 f880 	bl	8001764 <SCD_SendCommand>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <SCD_PollData+0x26>
    {
        return SCD_ERROR;
 800166a:	2301      	movs	r3, #1
 800166c:	e074      	b.n	8001758 <SCD_PollData+0x110>
    }

    Port_Delay(50);
 800166e:	2032      	movs	r0, #50	; 0x32
 8001670:	f000 f981 	bl	8001976 <Port_Delay>

    if(I2C_Receive(SCD_I2C_ADDR, data, SCD_DATA_LENGTH) != I2C_OK)
 8001674:	f107 0308 	add.w	r3, r7, #8
 8001678:	2209      	movs	r2, #9
 800167a:	4619      	mov	r1, r3
 800167c:	20c4      	movs	r0, #196	; 0xc4
 800167e:	f7ff fe47 	bl	8001310 <I2C_Receive>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d001      	beq.n	800168c <SCD_PollData+0x44>
    {
        return SCD_ERROR;
 8001688:	2301      	movs	r3, #1
 800168a:	e065      	b.n	8001758 <SCD_PollData+0x110>
    }

    if (SCD_CRC8(data, 2) != data[CO2_CRC_POS]) /** Check CO2 CRC */
 800168c:	f107 0308 	add.w	r3, r7, #8
 8001690:	2102      	movs	r1, #2
 8001692:	4618      	mov	r0, r3
 8001694:	f000 f87f 	bl	8001796 <SCD_CRC8>
 8001698:	4603      	mov	r3, r0
 800169a:	461a      	mov	r2, r3
 800169c:	7abb      	ldrb	r3, [r7, #10]
 800169e:	429a      	cmp	r2, r3
 80016a0:	d001      	beq.n	80016a6 <SCD_PollData+0x5e>
    {
    	return SCD_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e058      	b.n	8001758 <SCD_PollData+0x110>
    };

    if (SCD_CRC8(data + TEMP_POS_0, 2) != data[TEMP_CRC_POS]) /** Check Temperature CRC */
 80016a6:	f107 0308 	add.w	r3, r7, #8
 80016aa:	3303      	adds	r3, #3
 80016ac:	2102      	movs	r1, #2
 80016ae:	4618      	mov	r0, r3
 80016b0:	f000 f871 	bl	8001796 <SCD_CRC8>
 80016b4:	4603      	mov	r3, r0
 80016b6:	461a      	mov	r2, r3
 80016b8:	7b7b      	ldrb	r3, [r7, #13]
 80016ba:	429a      	cmp	r2, r3
 80016bc:	d001      	beq.n	80016c2 <SCD_PollData+0x7a>
    {
    	return SCD_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	e04a      	b.n	8001758 <SCD_PollData+0x110>
    };

    if (SCD_CRC8(data + HUM_POS_0, 2) != data[HUM_CRC_POS]) /** Check Humidity CRC */
 80016c2:	f107 0308 	add.w	r3, r7, #8
 80016c6:	3306      	adds	r3, #6
 80016c8:	2102      	movs	r1, #2
 80016ca:	4618      	mov	r0, r3
 80016cc:	f000 f863 	bl	8001796 <SCD_CRC8>
 80016d0:	4603      	mov	r3, r0
 80016d2:	461a      	mov	r2, r3
 80016d4:	7c3b      	ldrb	r3, [r7, #16]
 80016d6:	429a      	cmp	r2, r3
 80016d8:	d001      	beq.n	80016de <SCD_PollData+0x96>
    {
        	return SCD_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	e03c      	b.n	8001758 <SCD_PollData+0x110>
	};

    rawCO2           = (data[CO2_POS_0] << 8) | data[CO2_POS_1];
 80016de:	7a3b      	ldrb	r3, [r7, #8]
 80016e0:	021b      	lsls	r3, r3, #8
 80016e2:	b21a      	sxth	r2, r3
 80016e4:	7a7b      	ldrb	r3, [r7, #9]
 80016e6:	b21b      	sxth	r3, r3
 80016e8:	4313      	orrs	r3, r2
 80016ea:	b21b      	sxth	r3, r3
 80016ec:	82fb      	strh	r3, [r7, #22]
    sensor->data.co2 = rawCO2;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	8afa      	ldrh	r2, [r7, #22]
 80016f2:	809a      	strh	r2, [r3, #4]

    rawTemperature    = (data[TEMP_POS_0] << 8) | data[TEMP_POS_1];
 80016f4:	7afb      	ldrb	r3, [r7, #11]
 80016f6:	021b      	lsls	r3, r3, #8
 80016f8:	b21a      	sxth	r2, r3
 80016fa:	7b3b      	ldrb	r3, [r7, #12]
 80016fc:	b21b      	sxth	r3, r3
 80016fe:	4313      	orrs	r3, r2
 8001700:	b21b      	sxth	r3, r3
 8001702:	82bb      	strh	r3, [r7, #20]
    sensor->data.temp = (int16_t)(1750 * rawTemperature / 65535 - 450);
 8001704:	8abb      	ldrh	r3, [r7, #20]
 8001706:	f240 62d6 	movw	r2, #1750	; 0x6d6
 800170a:	fb02 f303 	mul.w	r3, r2, r3
 800170e:	4a14      	ldr	r2, [pc, #80]	; (8001760 <SCD_PollData+0x118>)
 8001710:	fb82 1203 	smull	r1, r2, r2, r3
 8001714:	441a      	add	r2, r3
 8001716:	13d2      	asrs	r2, r2, #15
 8001718:	17db      	asrs	r3, r3, #31
 800171a:	1ad3      	subs	r3, r2, r3
 800171c:	b29b      	uxth	r3, r3
 800171e:	f5a3 73e1 	sub.w	r3, r3, #450	; 0x1c2
 8001722:	b29b      	uxth	r3, r3
 8001724:	b21a      	sxth	r2, r3
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	801a      	strh	r2, [r3, #0]

    rawHumidity      = (data[HUM_POS_0] << 8) | data[HUM_POS_1];
 800172a:	7bbb      	ldrb	r3, [r7, #14]
 800172c:	021b      	lsls	r3, r3, #8
 800172e:	b21a      	sxth	r2, r3
 8001730:	7bfb      	ldrb	r3, [r7, #15]
 8001732:	b21b      	sxth	r3, r3
 8001734:	4313      	orrs	r3, r2
 8001736:	b21b      	sxth	r3, r3
 8001738:	827b      	strh	r3, [r7, #18]
    sensor->data.hum = 100 * rawHumidity / 65535;
 800173a:	8a7b      	ldrh	r3, [r7, #18]
 800173c:	2264      	movs	r2, #100	; 0x64
 800173e:	fb02 f303 	mul.w	r3, r2, r3
 8001742:	4a07      	ldr	r2, [pc, #28]	; (8001760 <SCD_PollData+0x118>)
 8001744:	fb82 1203 	smull	r1, r2, r2, r3
 8001748:	441a      	add	r2, r3
 800174a:	13d2      	asrs	r2, r2, #15
 800174c:	17db      	asrs	r3, r3, #31
 800174e:	1ad3      	subs	r3, r2, r3
 8001750:	b29a      	uxth	r2, r3
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	805a      	strh	r2, [r3, #2]

    return SCD_OK;
 8001756:	2300      	movs	r3, #0
}
 8001758:	4618      	mov	r0, r3
 800175a:	3718      	adds	r7, #24
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	80008001 	.word	0x80008001

08001764 <SCD_SendCommand>:
 * @brief Sends a command to the SCD4x sensor.
 * @param cmd The command to send.
 * @return bool_t true if the command was successfully sent, false otherwise.
 */
static bool_t SCD_SendCommand(uint16_t cmd)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af00      	add	r7, sp, #0
 800176a:	4603      	mov	r3, r0
 800176c:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    data[0] = (cmd >> 8) & 0xFF;
 800176e:	88fb      	ldrh	r3, [r7, #6]
 8001770:	0a1b      	lsrs	r3, r3, #8
 8001772:	b29b      	uxth	r3, r3
 8001774:	b2db      	uxtb	r3, r3
 8001776:	733b      	strb	r3, [r7, #12]
    data[1] = cmd & 0xFF;
 8001778:	88fb      	ldrh	r3, [r7, #6]
 800177a:	b2db      	uxtb	r3, r3
 800177c:	737b      	strb	r3, [r7, #13]
    return I2C_Send(SCD_I2C_ADDR, data, 2);
 800177e:	f107 030c 	add.w	r3, r7, #12
 8001782:	2202      	movs	r2, #2
 8001784:	4619      	mov	r1, r3
 8001786:	20c4      	movs	r0, #196	; 0xc4
 8001788:	f7ff fda4 	bl	80012d4 <I2C_Send>
 800178c:	4603      	mov	r3, r0
}
 800178e:	4618      	mov	r0, r3
 8001790:	3710      	adds	r7, #16
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}

08001796 <SCD_CRC8>:
 * @param data Pointer to the data array for which CRC is to be calculated.
 * @param len Length of the data array.
 * @return uint8_t Calculated CRC8 value.
 */
static uint8_t SCD_CRC8(const uint8_t *data, uint8_t len)
{
 8001796:	b480      	push	{r7}
 8001798:	b087      	sub	sp, #28
 800179a:	af00      	add	r7, sp, #0
 800179c:	6078      	str	r0, [r7, #4]
 800179e:	460b      	mov	r3, r1
 80017a0:	70fb      	strb	r3, [r7, #3]
    uint8_t crc = CRC_INIT;
 80017a2:	23ff      	movs	r3, #255	; 0xff
 80017a4:	75fb      	strb	r3, [r7, #23]
    for (int j = 0; j < len; j++) {
 80017a6:	2300      	movs	r3, #0
 80017a8:	613b      	str	r3, [r7, #16]
 80017aa:	e021      	b.n	80017f0 <SCD_CRC8+0x5a>
        crc ^= data[j];
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	687a      	ldr	r2, [r7, #4]
 80017b0:	4413      	add	r3, r2
 80017b2:	781a      	ldrb	r2, [r3, #0]
 80017b4:	7dfb      	ldrb	r3, [r7, #23]
 80017b6:	4053      	eors	r3, r2
 80017b8:	75fb      	strb	r3, [r7, #23]
        for (int i = 8; i > 0; i--) {
 80017ba:	2308      	movs	r3, #8
 80017bc:	60fb      	str	r3, [r7, #12]
 80017be:	e011      	b.n	80017e4 <SCD_CRC8+0x4e>
            if (crc & 0x80)
 80017c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	da07      	bge.n	80017d8 <SCD_CRC8+0x42>
                crc = (crc << 1) ^ POLYNOMIAL;
 80017c8:	7dfb      	ldrb	r3, [r7, #23]
 80017ca:	005b      	lsls	r3, r3, #1
 80017cc:	b25b      	sxtb	r3, r3
 80017ce:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 80017d2:	b25b      	sxtb	r3, r3
 80017d4:	75fb      	strb	r3, [r7, #23]
 80017d6:	e002      	b.n	80017de <SCD_CRC8+0x48>
            else
                crc = (crc << 1);
 80017d8:	7dfb      	ldrb	r3, [r7, #23]
 80017da:	005b      	lsls	r3, r3, #1
 80017dc:	75fb      	strb	r3, [r7, #23]
        for (int i = 8; i > 0; i--) {
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	3b01      	subs	r3, #1
 80017e2:	60fb      	str	r3, [r7, #12]
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	dcea      	bgt.n	80017c0 <SCD_CRC8+0x2a>
    for (int j = 0; j < len; j++) {
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	3301      	adds	r3, #1
 80017ee:	613b      	str	r3, [r7, #16]
 80017f0:	78fb      	ldrb	r3, [r7, #3]
 80017f2:	693a      	ldr	r2, [r7, #16]
 80017f4:	429a      	cmp	r2, r3
 80017f6:	dbd9      	blt.n	80017ac <SCD_CRC8+0x16>
        }
    }
    return crc;
 80017f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	371c      	adds	r7, #28
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
	...

08001808 <uartInit>:
 * rate, parity, stop bits, etc., and checks if initialization is successful.
 *
 * @return bool_t True if initialization was successful, otherwise false.
 */
bool_t uartInit()
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b08e      	sub	sp, #56	; 0x38
 800180c:	af00      	add	r7, sp, #0
    bool_t _ret = false;
 800180e:	2300      	movs	r3, #0
 8001810:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    huart_.Instance          = UART_INSTANCE;
 8001814:	4b1c      	ldr	r3, [pc, #112]	; (8001888 <uartInit+0x80>)
 8001816:	4a1d      	ldr	r2, [pc, #116]	; (800188c <uartInit+0x84>)
 8001818:	601a      	str	r2, [r3, #0]
    huart_.Init.BaudRate     = UART_BAUDRATE;
 800181a:	4b1b      	ldr	r3, [pc, #108]	; (8001888 <uartInit+0x80>)
 800181c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001820:	605a      	str	r2, [r3, #4]
    huart_.Init.Parity       = UART_PARITY_NONE;    
 8001822:	4b19      	ldr	r3, [pc, #100]	; (8001888 <uartInit+0x80>)
 8001824:	2200      	movs	r2, #0
 8001826:	611a      	str	r2, [r3, #16]
    huart_.Init.StopBits     = UART_STOPBITS_1;     
 8001828:	4b17      	ldr	r3, [pc, #92]	; (8001888 <uartInit+0x80>)
 800182a:	2200      	movs	r2, #0
 800182c:	60da      	str	r2, [r3, #12]
    huart_.Init.WordLength   = UART_WORDLENGTH_8B;  
 800182e:	4b16      	ldr	r3, [pc, #88]	; (8001888 <uartInit+0x80>)
 8001830:	2200      	movs	r2, #0
 8001832:	609a      	str	r2, [r3, #8]
    huart_.Init.Mode         = UART_MODE_TX_RX;     
 8001834:	4b14      	ldr	r3, [pc, #80]	; (8001888 <uartInit+0x80>)
 8001836:	220c      	movs	r2, #12
 8001838:	615a      	str	r2, [r3, #20]
    huart_.Init.HwFlowCtl    = UART_HWCONTROL_NONE; 
 800183a:	4b13      	ldr	r3, [pc, #76]	; (8001888 <uartInit+0x80>)
 800183c:	2200      	movs	r2, #0
 800183e:	619a      	str	r2, [r3, #24]
    huart_.Init.OverSampling = UART_OVERSAMPLING_16;
 8001840:	4b11      	ldr	r3, [pc, #68]	; (8001888 <uartInit+0x80>)
 8001842:	2200      	movs	r2, #0
 8001844:	61da      	str	r2, [r3, #28]

    if(HAL_UART_Init(&huart_) == HAL_OK)
 8001846:	4810      	ldr	r0, [pc, #64]	; (8001888 <uartInit+0x80>)
 8001848:	f002 fa38 	bl	8003cbc <HAL_UART_Init>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d113      	bne.n	800187a <uartInit+0x72>
    {
        isInit = true;
 8001852:	4b0f      	ldr	r3, [pc, #60]	; (8001890 <uartInit+0x88>)
 8001854:	2201      	movs	r2, #1
 8001856:	701a      	strb	r2, [r3, #0]
        _ret = true;
 8001858:	2301      	movs	r3, #1
 800185a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

        uartSendString((uint8_t *)"UART configuration: 8N1\n\r");
 800185e:	480d      	ldr	r0, [pc, #52]	; (8001894 <uartInit+0x8c>)
 8001860:	f000 f81c 	bl	800189c <uartSendString>
        
        char _buffer[PRINT_BUFFER_SIZE];
        snprintf(_buffer, sizeof(_buffer), "UART baudrate:      %lu\n\r",
 8001864:	4b08      	ldr	r3, [pc, #32]	; (8001888 <uartInit+0x80>)
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	1d38      	adds	r0, r7, #4
 800186a:	4a0b      	ldr	r2, [pc, #44]	; (8001898 <uartInit+0x90>)
 800186c:	2132      	movs	r1, #50	; 0x32
 800186e:	f002 ff23 	bl	80046b8 <sniprintf>
                 huart_.Init.BaudRate);
        uartSendString((uint8_t *)_buffer);
 8001872:	1d3b      	adds	r3, r7, #4
 8001874:	4618      	mov	r0, r3
 8001876:	f000 f811 	bl	800189c <uartSendString>
    }

    return _ret;
 800187a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 800187e:	4618      	mov	r0, r3
 8001880:	3738      	adds	r7, #56	; 0x38
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	2000015c 	.word	0x2000015c
 800188c:	40004800 	.word	0x40004800
 8001890:	200001a0 	.word	0x200001a0
 8001894:	08005290 	.word	0x08005290
 8001898:	080052ac 	.word	0x080052ac

0800189c <uartSendString>:
 * limit is reached.
 *
 * @param pString Pointer to the null-terminated string to be sent.
 */
void uartSendString(uint8_t *pString)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b084      	sub	sp, #16
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
    if ((pString == NULL) || (isInit == false))
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d006      	beq.n	80018b8 <uartSendString+0x1c>
 80018aa:	4b13      	ldr	r3, [pc, #76]	; (80018f8 <uartSendString+0x5c>)
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	f083 0301 	eor.w	r3, r3, #1
 80018b2:	b2db      	uxtb	r3, r3
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d001      	beq.n	80018bc <uartSendString+0x20>
    {
        Error_Handler();
 80018b8:	f000 f85a 	bl	8001970 <Error_Handler>
    }

    uint8_t _guard = 0U;
 80018bc:	2300      	movs	r3, #0
 80018be:	73fb      	strb	r3, [r7, #15]
    
    while (((*pString) != '\0') && (_guard < UART_MAX_CHAR))
 80018c0:	e00d      	b.n	80018de <uartSendString+0x42>
    {
        if(uartTransmitData(&huart_, pString, 1U) != HAL_OK)
 80018c2:	2201      	movs	r2, #1
 80018c4:	6879      	ldr	r1, [r7, #4]
 80018c6:	480d      	ldr	r0, [pc, #52]	; (80018fc <uartSendString+0x60>)
 80018c8:	f000 f81a 	bl	8001900 <uartTransmitData>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d10d      	bne.n	80018ee <uartSendString+0x52>
        {
            break;
        }
        pString++;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	3301      	adds	r3, #1
 80018d6:	607b      	str	r3, [r7, #4]
        _guard++;
 80018d8:	7bfb      	ldrb	r3, [r7, #15]
 80018da:	3301      	adds	r3, #1
 80018dc:	73fb      	strb	r3, [r7, #15]
    while (((*pString) != '\0') && (_guard < UART_MAX_CHAR))
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d004      	beq.n	80018f0 <uartSendString+0x54>
 80018e6:	7bfb      	ldrb	r3, [r7, #15]
 80018e8:	2bf9      	cmp	r3, #249	; 0xf9
 80018ea:	d9ea      	bls.n	80018c2 <uartSendString+0x26>
    }
}
 80018ec:	e000      	b.n	80018f0 <uartSendString+0x54>
            break;
 80018ee:	bf00      	nop
}
 80018f0:	bf00      	nop
 80018f2:	3710      	adds	r7, #16
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	200001a0 	.word	0x200001a0
 80018fc:	2000015c 	.word	0x2000015c

08001900 <uartTransmitData>:
 * @return HAL_StatusTypeDef HAL status code.
 */
static HAL_StatusTypeDef uartTransmitData(UART_HandleTypeDef *huart,
                                          uint8_t *pData,
                                          uint16_t size)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b086      	sub	sp, #24
 8001904:	af00      	add	r7, sp, #0
 8001906:	60f8      	str	r0, [r7, #12]
 8001908:	60b9      	str	r1, [r7, #8]
 800190a:	4613      	mov	r3, r2
 800190c:	80fb      	strh	r3, [r7, #6]
    if ((huart == NULL) || (isInit == false))
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d006      	beq.n	8001922 <uartTransmitData+0x22>
 8001914:	4b15      	ldr	r3, [pc, #84]	; (800196c <uartTransmitData+0x6c>)
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	f083 0301 	eor.w	r3, r3, #1
 800191c:	b2db      	uxtb	r3, r3
 800191e:	2b00      	cmp	r3, #0
 8001920:	d001      	beq.n	8001926 <uartTransmitData+0x26>
    {
        Error_Handler();
 8001922:	f000 f825 	bl	8001970 <Error_Handler>
    }

    HAL_StatusTypeDef _result = HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	75bb      	strb	r3, [r7, #22]

    uint8_t _retries = UART_ERROR_SUPPORTED;
 800192a:	2303      	movs	r3, #3
 800192c:	75fb      	strb	r3, [r7, #23]

    do
    {
        _result = HAL_UART_Transmit(huart, pData, size, UART_TIMEOUT);
 800192e:	88fa      	ldrh	r2, [r7, #6]
 8001930:	2364      	movs	r3, #100	; 0x64
 8001932:	68b9      	ldr	r1, [r7, #8]
 8001934:	68f8      	ldr	r0, [r7, #12]
 8001936:	f002 fa0e 	bl	8003d56 <HAL_UART_Transmit>
 800193a:	4603      	mov	r3, r0
 800193c:	75bb      	strb	r3, [r7, #22]

        if (_result == HAL_OK)
 800193e:	7dbb      	ldrb	r3, [r7, #22]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d00b      	beq.n	800195c <uartTransmitData+0x5c>
        {
            break;
        }

        HAL_Delay(TICKS_WAIT_ERROR);
 8001944:	2008      	movs	r0, #8
 8001946:	f000 f9d5 	bl	8001cf4 <HAL_Delay>

        if (_retries == 0U)
 800194a:	7dfb      	ldrb	r3, [r7, #23]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d007      	beq.n	8001960 <uartTransmitData+0x60>
        {
            break;
        }

    } while(_retries-- > 0);
 8001950:	7dfb      	ldrb	r3, [r7, #23]
 8001952:	1e5a      	subs	r2, r3, #1
 8001954:	75fa      	strb	r2, [r7, #23]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d1e9      	bne.n	800192e <uartTransmitData+0x2e>
 800195a:	e002      	b.n	8001962 <uartTransmitData+0x62>
            break;
 800195c:	bf00      	nop
 800195e:	e000      	b.n	8001962 <uartTransmitData+0x62>
            break;
 8001960:	bf00      	nop

    return _result;
 8001962:	7dbb      	ldrb	r3, [r7, #22]
}
 8001964:	4618      	mov	r0, r3
 8001966:	3718      	adds	r7, #24
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	200001a0 	.word	0x200001a0

08001970 <Error_Handler>:
/**
 * @brief Error handler function that is called when an invalid operation occurs
 * 
 */
static void Error_Handler(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
    while(1)
 8001974:	e7fe      	b.n	8001974 <Error_Handler+0x4>

08001976 <Port_Delay>:
#include "port.h"

void Port_Delay(uint32_t delayTime)
{
 8001976:	b580      	push	{r7, lr}
 8001978:	b082      	sub	sp, #8
 800197a:	af00      	add	r7, sp, #0
 800197c:	6078      	str	r0, [r7, #4]
    HAL_Delay(delayTime);
 800197e:	6878      	ldr	r0, [r7, #4]
 8001980:	f000 f9b8 	bl	8001cf4 <HAL_Delay>
}
 8001984:	bf00      	nop
 8001986:	3708      	adds	r7, #8
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}

0800198c <Port_ReadPin>:

pin_state_t Port_ReadPin(port_t port, pin_t pin)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
 8001994:	460b      	mov	r3, r1
 8001996:	807b      	strh	r3, [r7, #2]
    return HAL_GPIO_ReadPin(port, pin);
 8001998:	887b      	ldrh	r3, [r7, #2]
 800199a:	4619      	mov	r1, r3
 800199c:	6878      	ldr	r0, [r7, #4]
 800199e:	f000 fc5f 	bl	8002260 <HAL_GPIO_ReadPin>
 80019a2:	4603      	mov	r3, r0
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	3708      	adds	r7, #8
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}

080019ac <BSP_LED_Init>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b08a      	sub	sp, #40	; 0x28
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	4603      	mov	r3, r0
 80019b4:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 80019b6:	79fb      	ldrb	r3, [r7, #7]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d10e      	bne.n	80019da <BSP_LED_Init+0x2e>
 80019bc:	2300      	movs	r3, #0
 80019be:	613b      	str	r3, [r7, #16]
 80019c0:	4b1f      	ldr	r3, [pc, #124]	; (8001a40 <BSP_LED_Init+0x94>)
 80019c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c4:	4a1e      	ldr	r2, [pc, #120]	; (8001a40 <BSP_LED_Init+0x94>)
 80019c6:	f043 0302 	orr.w	r3, r3, #2
 80019ca:	6313      	str	r3, [r2, #48]	; 0x30
 80019cc:	4b1c      	ldr	r3, [pc, #112]	; (8001a40 <BSP_LED_Init+0x94>)
 80019ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d0:	f003 0302 	and.w	r3, r3, #2
 80019d4:	613b      	str	r3, [r7, #16]
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	e00d      	b.n	80019f6 <BSP_LED_Init+0x4a>
 80019da:	2300      	movs	r3, #0
 80019dc:	60fb      	str	r3, [r7, #12]
 80019de:	4b18      	ldr	r3, [pc, #96]	; (8001a40 <BSP_LED_Init+0x94>)
 80019e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e2:	4a17      	ldr	r2, [pc, #92]	; (8001a40 <BSP_LED_Init+0x94>)
 80019e4:	f043 0302 	orr.w	r3, r3, #2
 80019e8:	6313      	str	r3, [r2, #48]	; 0x30
 80019ea:	4b15      	ldr	r3, [pc, #84]	; (8001a40 <BSP_LED_Init+0x94>)
 80019ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ee:	f003 0302 	and.w	r3, r3, #2
 80019f2:	60fb      	str	r3, [r7, #12]
 80019f4:	68fb      	ldr	r3, [r7, #12]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 80019f6:	79fb      	ldrb	r3, [r7, #7]
 80019f8:	4a12      	ldr	r2, [pc, #72]	; (8001a44 <BSP_LED_Init+0x98>)
 80019fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80019fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a00:	2301      	movs	r3, #1
 8001a02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a04:	2300      	movs	r3, #0
 8001a06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8001a08:	2302      	movs	r3, #2
 8001a0a:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8001a0c:	79fb      	ldrb	r3, [r7, #7]
 8001a0e:	4a0e      	ldr	r2, [pc, #56]	; (8001a48 <BSP_LED_Init+0x9c>)
 8001a10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a14:	f107 0214 	add.w	r2, r7, #20
 8001a18:	4611      	mov	r1, r2
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f000 fa74 	bl	8001f08 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8001a20:	79fb      	ldrb	r3, [r7, #7]
 8001a22:	4a09      	ldr	r2, [pc, #36]	; (8001a48 <BSP_LED_Init+0x9c>)
 8001a24:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001a28:	79fb      	ldrb	r3, [r7, #7]
 8001a2a:	4a06      	ldr	r2, [pc, #24]	; (8001a44 <BSP_LED_Init+0x98>)
 8001a2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a30:	2200      	movs	r2, #0
 8001a32:	4619      	mov	r1, r3
 8001a34:	f000 fc2c 	bl	8002290 <HAL_GPIO_WritePin>
}
 8001a38:	bf00      	nop
 8001a3a:	3728      	adds	r7, #40	; 0x28
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	40023800 	.word	0x40023800
 8001a44:	080052d0 	.word	0x080052d0
 8001a48:	20000004 	.word	0x20000004

08001a4c <BSP_LED_On>:
  * @param  Led: Specifies the Led to be set on. 
  *   This parameter can be one of following parameters:
  *     @arg LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	4603      	mov	r3, r0
 8001a54:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 8001a56:	79fb      	ldrb	r3, [r7, #7]
 8001a58:	4a07      	ldr	r2, [pc, #28]	; (8001a78 <BSP_LED_On+0x2c>)
 8001a5a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001a5e:	79fb      	ldrb	r3, [r7, #7]
 8001a60:	4a06      	ldr	r2, [pc, #24]	; (8001a7c <BSP_LED_On+0x30>)
 8001a62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a66:	2201      	movs	r2, #1
 8001a68:	4619      	mov	r1, r3
 8001a6a:	f000 fc11 	bl	8002290 <HAL_GPIO_WritePin>
}
 8001a6e:	bf00      	nop
 8001a70:	3708      	adds	r7, #8
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	20000004 	.word	0x20000004
 8001a7c:	080052d0 	.word	0x080052d0

08001a80 <BSP_LED_Off>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	4603      	mov	r3, r0
 8001a88:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8001a8a:	79fb      	ldrb	r3, [r7, #7]
 8001a8c:	4a07      	ldr	r2, [pc, #28]	; (8001aac <BSP_LED_Off+0x2c>)
 8001a8e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001a92:	79fb      	ldrb	r3, [r7, #7]
 8001a94:	4a06      	ldr	r2, [pc, #24]	; (8001ab0 <BSP_LED_Off+0x30>)
 8001a96:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	f000 fbf7 	bl	8002290 <HAL_GPIO_WritePin>
}
 8001aa2:	bf00      	nop
 8001aa4:	3708      	adds	r7, #8
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	20000004 	.word	0x20000004
 8001ab0:	080052d0 	.word	0x080052d0

08001ab4 <BSP_LED_Toggle>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3 
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	4603      	mov	r3, r0
 8001abc:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 8001abe:	79fb      	ldrb	r3, [r7, #7]
 8001ac0:	4a07      	ldr	r2, [pc, #28]	; (8001ae0 <BSP_LED_Toggle+0x2c>)
 8001ac2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001ac6:	79fb      	ldrb	r3, [r7, #7]
 8001ac8:	4906      	ldr	r1, [pc, #24]	; (8001ae4 <BSP_LED_Toggle+0x30>)
 8001aca:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001ace:	4619      	mov	r1, r3
 8001ad0:	4610      	mov	r0, r2
 8001ad2:	f000 fbf6 	bl	80022c2 <HAL_GPIO_TogglePin>
}
 8001ad6:	bf00      	nop
 8001ad8:	3708      	adds	r7, #8
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	20000004 	.word	0x20000004
 8001ae4:	080052d0 	.word	0x080052d0

08001ae8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001aec:	4b16      	ldr	r3, [pc, #88]	; (8001b48 <SystemInit+0x60>)
 8001aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001af2:	4a15      	ldr	r2, [pc, #84]	; (8001b48 <SystemInit+0x60>)
 8001af4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001af8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001afc:	4b13      	ldr	r3, [pc, #76]	; (8001b4c <SystemInit+0x64>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a12      	ldr	r2, [pc, #72]	; (8001b4c <SystemInit+0x64>)
 8001b02:	f043 0301 	orr.w	r3, r3, #1
 8001b06:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001b08:	4b10      	ldr	r3, [pc, #64]	; (8001b4c <SystemInit+0x64>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001b0e:	4b0f      	ldr	r3, [pc, #60]	; (8001b4c <SystemInit+0x64>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a0e      	ldr	r2, [pc, #56]	; (8001b4c <SystemInit+0x64>)
 8001b14:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001b18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b1c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001b1e:	4b0b      	ldr	r3, [pc, #44]	; (8001b4c <SystemInit+0x64>)
 8001b20:	4a0b      	ldr	r2, [pc, #44]	; (8001b50 <SystemInit+0x68>)
 8001b22:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001b24:	4b09      	ldr	r3, [pc, #36]	; (8001b4c <SystemInit+0x64>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a08      	ldr	r2, [pc, #32]	; (8001b4c <SystemInit+0x64>)
 8001b2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b2e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001b30:	4b06      	ldr	r3, [pc, #24]	; (8001b4c <SystemInit+0x64>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001b36:	4b04      	ldr	r3, [pc, #16]	; (8001b48 <SystemInit+0x60>)
 8001b38:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b3c:	609a      	str	r2, [r3, #8]
#endif
}
 8001b3e:	bf00      	nop
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr
 8001b48:	e000ed00 	.word	0xe000ed00
 8001b4c:	40023800 	.word	0x40023800
 8001b50:	24003010 	.word	0x24003010

08001b54 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
}
 8001b58:	bf00      	nop
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr

08001b62 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8001b62:	b480      	push	{r7}
 8001b64:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8001b66:	e7fe      	b.n	8001b66 <HardFault_Handler+0x4>

08001b68 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8001b6c:	e7fe      	b.n	8001b6c <MemManage_Handler+0x4>

08001b6e <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8001b6e:	b480      	push	{r7}
 8001b70:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8001b72:	e7fe      	b.n	8001b72 <BusFault_Handler+0x4>

08001b74 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8001b78:	e7fe      	b.n	8001b78 <UsageFault_Handler+0x4>

08001b7a <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8001b7a:	b480      	push	{r7}
 8001b7c:	af00      	add	r7, sp, #0
}
 8001b7e:	bf00      	nop
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr

08001b88 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
}
 8001b8c:	bf00      	nop
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr

08001b96 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8001b96:	b480      	push	{r7}
 8001b98:	af00      	add	r7, sp, #0
}
 8001b9a:	bf00      	nop
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr

08001ba4 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
    HAL_IncTick();
 8001ba8:	f000 f884 	bl	8001cb4 <HAL_IncTick>
}
 8001bac:	bf00      	nop
 8001bae:	bd80      	pop	{r7, pc}

08001bb0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b086      	sub	sp, #24
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bb8:	4a14      	ldr	r2, [pc, #80]	; (8001c0c <_sbrk+0x5c>)
 8001bba:	4b15      	ldr	r3, [pc, #84]	; (8001c10 <_sbrk+0x60>)
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bc4:	4b13      	ldr	r3, [pc, #76]	; (8001c14 <_sbrk+0x64>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d102      	bne.n	8001bd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bcc:	4b11      	ldr	r3, [pc, #68]	; (8001c14 <_sbrk+0x64>)
 8001bce:	4a12      	ldr	r2, [pc, #72]	; (8001c18 <_sbrk+0x68>)
 8001bd0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bd2:	4b10      	ldr	r3, [pc, #64]	; (8001c14 <_sbrk+0x64>)
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4413      	add	r3, r2
 8001bda:	693a      	ldr	r2, [r7, #16]
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d207      	bcs.n	8001bf0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001be0:	f002 fdbe 	bl	8004760 <__errno>
 8001be4:	4603      	mov	r3, r0
 8001be6:	220c      	movs	r2, #12
 8001be8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001bee:	e009      	b.n	8001c04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bf0:	4b08      	ldr	r3, [pc, #32]	; (8001c14 <_sbrk+0x64>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bf6:	4b07      	ldr	r3, [pc, #28]	; (8001c14 <_sbrk+0x64>)
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4413      	add	r3, r2
 8001bfe:	4a05      	ldr	r2, [pc, #20]	; (8001c14 <_sbrk+0x64>)
 8001c00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c02:	68fb      	ldr	r3, [r7, #12]
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	3718      	adds	r7, #24
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	20030000 	.word	0x20030000
 8001c10:	00000400 	.word	0x00000400
 8001c14:	200001a4 	.word	0x200001a4
 8001c18:	20000318 	.word	0x20000318

08001c1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c20:	4b0b      	ldr	r3, [pc, #44]	; (8001c50 <HAL_Init+0x34>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a0a      	ldr	r2, [pc, #40]	; (8001c50 <HAL_Init+0x34>)
 8001c26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c2a:	6013      	str	r3, [r2, #0]
#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c2c:	4b08      	ldr	r3, [pc, #32]	; (8001c50 <HAL_Init+0x34>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a07      	ldr	r2, [pc, #28]	; (8001c50 <HAL_Init+0x34>)
 8001c32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c36:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c38:	2003      	movs	r0, #3
 8001c3a:	f000 f931 	bl	8001ea0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c3e:	200f      	movs	r0, #15
 8001c40:	f000 f808 	bl	8001c54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c44:	f001 fb4a 	bl	80032dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c48:	2300      	movs	r3, #0
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	40023c00 	.word	0x40023c00

08001c54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c5c:	4b12      	ldr	r3, [pc, #72]	; (8001ca8 <HAL_InitTick+0x54>)
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	4b12      	ldr	r3, [pc, #72]	; (8001cac <HAL_InitTick+0x58>)
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	4619      	mov	r1, r3
 8001c66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c72:	4618      	mov	r0, r3
 8001c74:	f000 f93b 	bl	8001eee <HAL_SYSTICK_Config>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e00e      	b.n	8001ca0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2b0f      	cmp	r3, #15
 8001c86:	d80a      	bhi.n	8001c9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c88:	2200      	movs	r2, #0
 8001c8a:	6879      	ldr	r1, [r7, #4]
 8001c8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c90:	f000 f911 	bl	8001eb6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c94:	4a06      	ldr	r2, [pc, #24]	; (8001cb0 <HAL_InitTick+0x5c>)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	e000      	b.n	8001ca0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3708      	adds	r7, #8
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	20000010 	.word	0x20000010
 8001cac:	20000018 	.word	0x20000018
 8001cb0:	20000014 	.word	0x20000014

08001cb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cb8:	4b06      	ldr	r3, [pc, #24]	; (8001cd4 <HAL_IncTick+0x20>)
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	4b06      	ldr	r3, [pc, #24]	; (8001cd8 <HAL_IncTick+0x24>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4413      	add	r3, r2
 8001cc4:	4a04      	ldr	r2, [pc, #16]	; (8001cd8 <HAL_IncTick+0x24>)
 8001cc6:	6013      	str	r3, [r2, #0]
}
 8001cc8:	bf00      	nop
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr
 8001cd2:	bf00      	nop
 8001cd4:	20000018 	.word	0x20000018
 8001cd8:	200001a8 	.word	0x200001a8

08001cdc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
  return uwTick;
 8001ce0:	4b03      	ldr	r3, [pc, #12]	; (8001cf0 <HAL_GetTick+0x14>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
 8001cee:	bf00      	nop
 8001cf0:	200001a8 	.word	0x200001a8

08001cf4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b084      	sub	sp, #16
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cfc:	f7ff ffee 	bl	8001cdc <HAL_GetTick>
 8001d00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001d0c:	d005      	beq.n	8001d1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d0e:	4b0a      	ldr	r3, [pc, #40]	; (8001d38 <HAL_Delay+0x44>)
 8001d10:	781b      	ldrb	r3, [r3, #0]
 8001d12:	461a      	mov	r2, r3
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	4413      	add	r3, r2
 8001d18:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d1a:	bf00      	nop
 8001d1c:	f7ff ffde 	bl	8001cdc <HAL_GetTick>
 8001d20:	4602      	mov	r2, r0
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	68fa      	ldr	r2, [r7, #12]
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d8f7      	bhi.n	8001d1c <HAL_Delay+0x28>
  {
  }
}
 8001d2c:	bf00      	nop
 8001d2e:	bf00      	nop
 8001d30:	3710      	adds	r7, #16
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	20000018 	.word	0x20000018

08001d3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b085      	sub	sp, #20
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	f003 0307 	and.w	r3, r3, #7
 8001d4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d4c:	4b0c      	ldr	r3, [pc, #48]	; (8001d80 <__NVIC_SetPriorityGrouping+0x44>)
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d52:	68ba      	ldr	r2, [r7, #8]
 8001d54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d58:	4013      	ands	r3, r2
 8001d5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d6e:	4a04      	ldr	r2, [pc, #16]	; (8001d80 <__NVIC_SetPriorityGrouping+0x44>)
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	60d3      	str	r3, [r2, #12]
}
 8001d74:	bf00      	nop
 8001d76:	3714      	adds	r7, #20
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr
 8001d80:	e000ed00 	.word	0xe000ed00

08001d84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d88:	4b04      	ldr	r3, [pc, #16]	; (8001d9c <__NVIC_GetPriorityGrouping+0x18>)
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	0a1b      	lsrs	r3, r3, #8
 8001d8e:	f003 0307 	and.w	r3, r3, #7
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr
 8001d9c:	e000ed00 	.word	0xe000ed00

08001da0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	4603      	mov	r3, r0
 8001da8:	6039      	str	r1, [r7, #0]
 8001daa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	db0a      	blt.n	8001dca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	b2da      	uxtb	r2, r3
 8001db8:	490c      	ldr	r1, [pc, #48]	; (8001dec <__NVIC_SetPriority+0x4c>)
 8001dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dbe:	0112      	lsls	r2, r2, #4
 8001dc0:	b2d2      	uxtb	r2, r2
 8001dc2:	440b      	add	r3, r1
 8001dc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dc8:	e00a      	b.n	8001de0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	b2da      	uxtb	r2, r3
 8001dce:	4908      	ldr	r1, [pc, #32]	; (8001df0 <__NVIC_SetPriority+0x50>)
 8001dd0:	79fb      	ldrb	r3, [r7, #7]
 8001dd2:	f003 030f 	and.w	r3, r3, #15
 8001dd6:	3b04      	subs	r3, #4
 8001dd8:	0112      	lsls	r2, r2, #4
 8001dda:	b2d2      	uxtb	r2, r2
 8001ddc:	440b      	add	r3, r1
 8001dde:	761a      	strb	r2, [r3, #24]
}
 8001de0:	bf00      	nop
 8001de2:	370c      	adds	r7, #12
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr
 8001dec:	e000e100 	.word	0xe000e100
 8001df0:	e000ed00 	.word	0xe000ed00

08001df4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b089      	sub	sp, #36	; 0x24
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	60f8      	str	r0, [r7, #12]
 8001dfc:	60b9      	str	r1, [r7, #8]
 8001dfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	f003 0307 	and.w	r3, r3, #7
 8001e06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e08:	69fb      	ldr	r3, [r7, #28]
 8001e0a:	f1c3 0307 	rsb	r3, r3, #7
 8001e0e:	2b04      	cmp	r3, #4
 8001e10:	bf28      	it	cs
 8001e12:	2304      	movcs	r3, #4
 8001e14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	3304      	adds	r3, #4
 8001e1a:	2b06      	cmp	r3, #6
 8001e1c:	d902      	bls.n	8001e24 <NVIC_EncodePriority+0x30>
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	3b03      	subs	r3, #3
 8001e22:	e000      	b.n	8001e26 <NVIC_EncodePriority+0x32>
 8001e24:	2300      	movs	r3, #0
 8001e26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e28:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001e2c:	69bb      	ldr	r3, [r7, #24]
 8001e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e32:	43da      	mvns	r2, r3
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	401a      	ands	r2, r3
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e3c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	fa01 f303 	lsl.w	r3, r1, r3
 8001e46:	43d9      	mvns	r1, r3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e4c:	4313      	orrs	r3, r2
         );
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3724      	adds	r7, #36	; 0x24
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr
	...

08001e5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	3b01      	subs	r3, #1
 8001e68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e6c:	d301      	bcc.n	8001e72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e00f      	b.n	8001e92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e72:	4a0a      	ldr	r2, [pc, #40]	; (8001e9c <SysTick_Config+0x40>)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	3b01      	subs	r3, #1
 8001e78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e7a:	210f      	movs	r1, #15
 8001e7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e80:	f7ff ff8e 	bl	8001da0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e84:	4b05      	ldr	r3, [pc, #20]	; (8001e9c <SysTick_Config+0x40>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e8a:	4b04      	ldr	r3, [pc, #16]	; (8001e9c <SysTick_Config+0x40>)
 8001e8c:	2207      	movs	r2, #7
 8001e8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e90:	2300      	movs	r3, #0
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3708      	adds	r7, #8
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	e000e010 	.word	0xe000e010

08001ea0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	f7ff ff47 	bl	8001d3c <__NVIC_SetPriorityGrouping>
}
 8001eae:	bf00      	nop
 8001eb0:	3708      	adds	r7, #8
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}

08001eb6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001eb6:	b580      	push	{r7, lr}
 8001eb8:	b086      	sub	sp, #24
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	60b9      	str	r1, [r7, #8]
 8001ec0:	607a      	str	r2, [r7, #4]
 8001ec2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ec8:	f7ff ff5c 	bl	8001d84 <__NVIC_GetPriorityGrouping>
 8001ecc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ece:	687a      	ldr	r2, [r7, #4]
 8001ed0:	68b9      	ldr	r1, [r7, #8]
 8001ed2:	6978      	ldr	r0, [r7, #20]
 8001ed4:	f7ff ff8e 	bl	8001df4 <NVIC_EncodePriority>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ede:	4611      	mov	r1, r2
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f7ff ff5d 	bl	8001da0 <__NVIC_SetPriority>
}
 8001ee6:	bf00      	nop
 8001ee8:	3718      	adds	r7, #24
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}

08001eee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001eee:	b580      	push	{r7, lr}
 8001ef0:	b082      	sub	sp, #8
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f7ff ffb0 	bl	8001e5c <SysTick_Config>
 8001efc:	4603      	mov	r3, r0
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3708      	adds	r7, #8
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
	...

08001f08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b089      	sub	sp, #36	; 0x24
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f12:	2300      	movs	r3, #0
 8001f14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f16:	2300      	movs	r3, #0
 8001f18:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f1e:	2300      	movs	r3, #0
 8001f20:	61fb      	str	r3, [r7, #28]
 8001f22:	e177      	b.n	8002214 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f24:	2201      	movs	r2, #1
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	697a      	ldr	r2, [r7, #20]
 8001f34:	4013      	ands	r3, r2
 8001f36:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f38:	693a      	ldr	r2, [r7, #16]
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	f040 8166 	bne.w	800220e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	f003 0303 	and.w	r3, r3, #3
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d005      	beq.n	8001f5a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f56:	2b02      	cmp	r3, #2
 8001f58:	d130      	bne.n	8001fbc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f60:	69fb      	ldr	r3, [r7, #28]
 8001f62:	005b      	lsls	r3, r3, #1
 8001f64:	2203      	movs	r2, #3
 8001f66:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6a:	43db      	mvns	r3, r3
 8001f6c:	69ba      	ldr	r2, [r7, #24]
 8001f6e:	4013      	ands	r3, r2
 8001f70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	68da      	ldr	r2, [r3, #12]
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	005b      	lsls	r3, r3, #1
 8001f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7e:	69ba      	ldr	r2, [r7, #24]
 8001f80:	4313      	orrs	r3, r2
 8001f82:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	69ba      	ldr	r2, [r7, #24]
 8001f88:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f90:	2201      	movs	r2, #1
 8001f92:	69fb      	ldr	r3, [r7, #28]
 8001f94:	fa02 f303 	lsl.w	r3, r2, r3
 8001f98:	43db      	mvns	r3, r3
 8001f9a:	69ba      	ldr	r2, [r7, #24]
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	091b      	lsrs	r3, r3, #4
 8001fa6:	f003 0201 	and.w	r2, r3, #1
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb0:	69ba      	ldr	r2, [r7, #24]
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	69ba      	ldr	r2, [r7, #24]
 8001fba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f003 0303 	and.w	r3, r3, #3
 8001fc4:	2b03      	cmp	r3, #3
 8001fc6:	d017      	beq.n	8001ff8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	005b      	lsls	r3, r3, #1
 8001fd2:	2203      	movs	r2, #3
 8001fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd8:	43db      	mvns	r3, r3
 8001fda:	69ba      	ldr	r2, [r7, #24]
 8001fdc:	4013      	ands	r3, r2
 8001fde:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	689a      	ldr	r2, [r3, #8]
 8001fe4:	69fb      	ldr	r3, [r7, #28]
 8001fe6:	005b      	lsls	r3, r3, #1
 8001fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fec:	69ba      	ldr	r2, [r7, #24]
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	69ba      	ldr	r2, [r7, #24]
 8001ff6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f003 0303 	and.w	r3, r3, #3
 8002000:	2b02      	cmp	r3, #2
 8002002:	d123      	bne.n	800204c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002004:	69fb      	ldr	r3, [r7, #28]
 8002006:	08da      	lsrs	r2, r3, #3
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	3208      	adds	r2, #8
 800200c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002010:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	f003 0307 	and.w	r3, r3, #7
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	220f      	movs	r2, #15
 800201c:	fa02 f303 	lsl.w	r3, r2, r3
 8002020:	43db      	mvns	r3, r3
 8002022:	69ba      	ldr	r2, [r7, #24]
 8002024:	4013      	ands	r3, r2
 8002026:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	691a      	ldr	r2, [r3, #16]
 800202c:	69fb      	ldr	r3, [r7, #28]
 800202e:	f003 0307 	and.w	r3, r3, #7
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	fa02 f303 	lsl.w	r3, r2, r3
 8002038:	69ba      	ldr	r2, [r7, #24]
 800203a:	4313      	orrs	r3, r2
 800203c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	08da      	lsrs	r2, r3, #3
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	3208      	adds	r2, #8
 8002046:	69b9      	ldr	r1, [r7, #24]
 8002048:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	005b      	lsls	r3, r3, #1
 8002056:	2203      	movs	r2, #3
 8002058:	fa02 f303 	lsl.w	r3, r2, r3
 800205c:	43db      	mvns	r3, r3
 800205e:	69ba      	ldr	r2, [r7, #24]
 8002060:	4013      	ands	r3, r2
 8002062:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f003 0203 	and.w	r2, r3, #3
 800206c:	69fb      	ldr	r3, [r7, #28]
 800206e:	005b      	lsls	r3, r3, #1
 8002070:	fa02 f303 	lsl.w	r3, r2, r3
 8002074:	69ba      	ldr	r2, [r7, #24]
 8002076:	4313      	orrs	r3, r2
 8002078:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	69ba      	ldr	r2, [r7, #24]
 800207e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002088:	2b00      	cmp	r3, #0
 800208a:	f000 80c0 	beq.w	800220e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800208e:	2300      	movs	r3, #0
 8002090:	60fb      	str	r3, [r7, #12]
 8002092:	4b66      	ldr	r3, [pc, #408]	; (800222c <HAL_GPIO_Init+0x324>)
 8002094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002096:	4a65      	ldr	r2, [pc, #404]	; (800222c <HAL_GPIO_Init+0x324>)
 8002098:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800209c:	6453      	str	r3, [r2, #68]	; 0x44
 800209e:	4b63      	ldr	r3, [pc, #396]	; (800222c <HAL_GPIO_Init+0x324>)
 80020a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020a6:	60fb      	str	r3, [r7, #12]
 80020a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020aa:	4a61      	ldr	r2, [pc, #388]	; (8002230 <HAL_GPIO_Init+0x328>)
 80020ac:	69fb      	ldr	r3, [r7, #28]
 80020ae:	089b      	lsrs	r3, r3, #2
 80020b0:	3302      	adds	r3, #2
 80020b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80020b8:	69fb      	ldr	r3, [r7, #28]
 80020ba:	f003 0303 	and.w	r3, r3, #3
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	220f      	movs	r2, #15
 80020c2:	fa02 f303 	lsl.w	r3, r2, r3
 80020c6:	43db      	mvns	r3, r3
 80020c8:	69ba      	ldr	r2, [r7, #24]
 80020ca:	4013      	ands	r3, r2
 80020cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4a58      	ldr	r2, [pc, #352]	; (8002234 <HAL_GPIO_Init+0x32c>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d037      	beq.n	8002146 <HAL_GPIO_Init+0x23e>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	4a57      	ldr	r2, [pc, #348]	; (8002238 <HAL_GPIO_Init+0x330>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d031      	beq.n	8002142 <HAL_GPIO_Init+0x23a>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	4a56      	ldr	r2, [pc, #344]	; (800223c <HAL_GPIO_Init+0x334>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d02b      	beq.n	800213e <HAL_GPIO_Init+0x236>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	4a55      	ldr	r2, [pc, #340]	; (8002240 <HAL_GPIO_Init+0x338>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d025      	beq.n	800213a <HAL_GPIO_Init+0x232>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	4a54      	ldr	r2, [pc, #336]	; (8002244 <HAL_GPIO_Init+0x33c>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d01f      	beq.n	8002136 <HAL_GPIO_Init+0x22e>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	4a53      	ldr	r2, [pc, #332]	; (8002248 <HAL_GPIO_Init+0x340>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d019      	beq.n	8002132 <HAL_GPIO_Init+0x22a>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	4a52      	ldr	r2, [pc, #328]	; (800224c <HAL_GPIO_Init+0x344>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d013      	beq.n	800212e <HAL_GPIO_Init+0x226>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	4a51      	ldr	r2, [pc, #324]	; (8002250 <HAL_GPIO_Init+0x348>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d00d      	beq.n	800212a <HAL_GPIO_Init+0x222>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	4a50      	ldr	r2, [pc, #320]	; (8002254 <HAL_GPIO_Init+0x34c>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d007      	beq.n	8002126 <HAL_GPIO_Init+0x21e>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	4a4f      	ldr	r2, [pc, #316]	; (8002258 <HAL_GPIO_Init+0x350>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d101      	bne.n	8002122 <HAL_GPIO_Init+0x21a>
 800211e:	2309      	movs	r3, #9
 8002120:	e012      	b.n	8002148 <HAL_GPIO_Init+0x240>
 8002122:	230a      	movs	r3, #10
 8002124:	e010      	b.n	8002148 <HAL_GPIO_Init+0x240>
 8002126:	2308      	movs	r3, #8
 8002128:	e00e      	b.n	8002148 <HAL_GPIO_Init+0x240>
 800212a:	2307      	movs	r3, #7
 800212c:	e00c      	b.n	8002148 <HAL_GPIO_Init+0x240>
 800212e:	2306      	movs	r3, #6
 8002130:	e00a      	b.n	8002148 <HAL_GPIO_Init+0x240>
 8002132:	2305      	movs	r3, #5
 8002134:	e008      	b.n	8002148 <HAL_GPIO_Init+0x240>
 8002136:	2304      	movs	r3, #4
 8002138:	e006      	b.n	8002148 <HAL_GPIO_Init+0x240>
 800213a:	2303      	movs	r3, #3
 800213c:	e004      	b.n	8002148 <HAL_GPIO_Init+0x240>
 800213e:	2302      	movs	r3, #2
 8002140:	e002      	b.n	8002148 <HAL_GPIO_Init+0x240>
 8002142:	2301      	movs	r3, #1
 8002144:	e000      	b.n	8002148 <HAL_GPIO_Init+0x240>
 8002146:	2300      	movs	r3, #0
 8002148:	69fa      	ldr	r2, [r7, #28]
 800214a:	f002 0203 	and.w	r2, r2, #3
 800214e:	0092      	lsls	r2, r2, #2
 8002150:	4093      	lsls	r3, r2
 8002152:	69ba      	ldr	r2, [r7, #24]
 8002154:	4313      	orrs	r3, r2
 8002156:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002158:	4935      	ldr	r1, [pc, #212]	; (8002230 <HAL_GPIO_Init+0x328>)
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	089b      	lsrs	r3, r3, #2
 800215e:	3302      	adds	r3, #2
 8002160:	69ba      	ldr	r2, [r7, #24]
 8002162:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002166:	4b3d      	ldr	r3, [pc, #244]	; (800225c <HAL_GPIO_Init+0x354>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	43db      	mvns	r3, r3
 8002170:	69ba      	ldr	r2, [r7, #24]
 8002172:	4013      	ands	r3, r2
 8002174:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800217e:	2b00      	cmp	r3, #0
 8002180:	d003      	beq.n	800218a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002182:	69ba      	ldr	r2, [r7, #24]
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	4313      	orrs	r3, r2
 8002188:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800218a:	4a34      	ldr	r2, [pc, #208]	; (800225c <HAL_GPIO_Init+0x354>)
 800218c:	69bb      	ldr	r3, [r7, #24]
 800218e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002190:	4b32      	ldr	r3, [pc, #200]	; (800225c <HAL_GPIO_Init+0x354>)
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	43db      	mvns	r3, r3
 800219a:	69ba      	ldr	r2, [r7, #24]
 800219c:	4013      	ands	r3, r2
 800219e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d003      	beq.n	80021b4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80021ac:	69ba      	ldr	r2, [r7, #24]
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	4313      	orrs	r3, r2
 80021b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80021b4:	4a29      	ldr	r2, [pc, #164]	; (800225c <HAL_GPIO_Init+0x354>)
 80021b6:	69bb      	ldr	r3, [r7, #24]
 80021b8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021ba:	4b28      	ldr	r3, [pc, #160]	; (800225c <HAL_GPIO_Init+0x354>)
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	43db      	mvns	r3, r3
 80021c4:	69ba      	ldr	r2, [r7, #24]
 80021c6:	4013      	ands	r3, r2
 80021c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d003      	beq.n	80021de <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80021d6:	69ba      	ldr	r2, [r7, #24]
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	4313      	orrs	r3, r2
 80021dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80021de:	4a1f      	ldr	r2, [pc, #124]	; (800225c <HAL_GPIO_Init+0x354>)
 80021e0:	69bb      	ldr	r3, [r7, #24]
 80021e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021e4:	4b1d      	ldr	r3, [pc, #116]	; (800225c <HAL_GPIO_Init+0x354>)
 80021e6:	68db      	ldr	r3, [r3, #12]
 80021e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	43db      	mvns	r3, r3
 80021ee:	69ba      	ldr	r2, [r7, #24]
 80021f0:	4013      	ands	r3, r2
 80021f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d003      	beq.n	8002208 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002200:	69ba      	ldr	r2, [r7, #24]
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	4313      	orrs	r3, r2
 8002206:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002208:	4a14      	ldr	r2, [pc, #80]	; (800225c <HAL_GPIO_Init+0x354>)
 800220a:	69bb      	ldr	r3, [r7, #24]
 800220c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	3301      	adds	r3, #1
 8002212:	61fb      	str	r3, [r7, #28]
 8002214:	69fb      	ldr	r3, [r7, #28]
 8002216:	2b0f      	cmp	r3, #15
 8002218:	f67f ae84 	bls.w	8001f24 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800221c:	bf00      	nop
 800221e:	bf00      	nop
 8002220:	3724      	adds	r7, #36	; 0x24
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr
 800222a:	bf00      	nop
 800222c:	40023800 	.word	0x40023800
 8002230:	40013800 	.word	0x40013800
 8002234:	40020000 	.word	0x40020000
 8002238:	40020400 	.word	0x40020400
 800223c:	40020800 	.word	0x40020800
 8002240:	40020c00 	.word	0x40020c00
 8002244:	40021000 	.word	0x40021000
 8002248:	40021400 	.word	0x40021400
 800224c:	40021800 	.word	0x40021800
 8002250:	40021c00 	.word	0x40021c00
 8002254:	40022000 	.word	0x40022000
 8002258:	40022400 	.word	0x40022400
 800225c:	40013c00 	.word	0x40013c00

08002260 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002260:	b480      	push	{r7}
 8002262:	b085      	sub	sp, #20
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	460b      	mov	r3, r1
 800226a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	691a      	ldr	r2, [r3, #16]
 8002270:	887b      	ldrh	r3, [r7, #2]
 8002272:	4013      	ands	r3, r2
 8002274:	2b00      	cmp	r3, #0
 8002276:	d002      	beq.n	800227e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002278:	2301      	movs	r3, #1
 800227a:	73fb      	strb	r3, [r7, #15]
 800227c:	e001      	b.n	8002282 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800227e:	2300      	movs	r3, #0
 8002280:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002282:	7bfb      	ldrb	r3, [r7, #15]
}
 8002284:	4618      	mov	r0, r3
 8002286:	3714      	adds	r7, #20
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr

08002290 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
 8002298:	460b      	mov	r3, r1
 800229a:	807b      	strh	r3, [r7, #2]
 800229c:	4613      	mov	r3, r2
 800229e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022a0:	787b      	ldrb	r3, [r7, #1]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d003      	beq.n	80022ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022a6:	887a      	ldrh	r2, [r7, #2]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80022ac:	e003      	b.n	80022b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80022ae:	887b      	ldrh	r3, [r7, #2]
 80022b0:	041a      	lsls	r2, r3, #16
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	619a      	str	r2, [r3, #24]
}
 80022b6:	bf00      	nop
 80022b8:	370c      	adds	r7, #12
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr

080022c2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80022c2:	b480      	push	{r7}
 80022c4:	b085      	sub	sp, #20
 80022c6:	af00      	add	r7, sp, #0
 80022c8:	6078      	str	r0, [r7, #4]
 80022ca:	460b      	mov	r3, r1
 80022cc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	695b      	ldr	r3, [r3, #20]
 80022d2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80022d4:	887a      	ldrh	r2, [r7, #2]
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	4013      	ands	r3, r2
 80022da:	041a      	lsls	r2, r3, #16
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	43d9      	mvns	r1, r3
 80022e0:	887b      	ldrh	r3, [r7, #2]
 80022e2:	400b      	ands	r3, r1
 80022e4:	431a      	orrs	r2, r3
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	619a      	str	r2, [r3, #24]
}
 80022ea:	bf00      	nop
 80022ec:	3714      	adds	r7, #20
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr
	...

080022f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b084      	sub	sp, #16
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d101      	bne.n	800230a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e12b      	b.n	8002562 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002310:	b2db      	uxtb	r3, r3
 8002312:	2b00      	cmp	r3, #0
 8002314:	d106      	bne.n	8002324 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2200      	movs	r2, #0
 800231a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f000 f92e 	bl	8002580 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2224      	movs	r2, #36	; 0x24
 8002328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f022 0201 	bic.w	r2, r2, #1
 800233a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800234a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800235a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800235c:	f001 fc86 	bl	8003c6c <HAL_RCC_GetPCLK1Freq>
 8002360:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	4a81      	ldr	r2, [pc, #516]	; (800256c <HAL_I2C_Init+0x274>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d807      	bhi.n	800237c <HAL_I2C_Init+0x84>
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	4a80      	ldr	r2, [pc, #512]	; (8002570 <HAL_I2C_Init+0x278>)
 8002370:	4293      	cmp	r3, r2
 8002372:	bf94      	ite	ls
 8002374:	2301      	movls	r3, #1
 8002376:	2300      	movhi	r3, #0
 8002378:	b2db      	uxtb	r3, r3
 800237a:	e006      	b.n	800238a <HAL_I2C_Init+0x92>
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	4a7d      	ldr	r2, [pc, #500]	; (8002574 <HAL_I2C_Init+0x27c>)
 8002380:	4293      	cmp	r3, r2
 8002382:	bf94      	ite	ls
 8002384:	2301      	movls	r3, #1
 8002386:	2300      	movhi	r3, #0
 8002388:	b2db      	uxtb	r3, r3
 800238a:	2b00      	cmp	r3, #0
 800238c:	d001      	beq.n	8002392 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e0e7      	b.n	8002562 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	4a78      	ldr	r2, [pc, #480]	; (8002578 <HAL_I2C_Init+0x280>)
 8002396:	fba2 2303 	umull	r2, r3, r2, r3
 800239a:	0c9b      	lsrs	r3, r3, #18
 800239c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	68ba      	ldr	r2, [r7, #8]
 80023ae:	430a      	orrs	r2, r1
 80023b0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	6a1b      	ldr	r3, [r3, #32]
 80023b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	4a6a      	ldr	r2, [pc, #424]	; (800256c <HAL_I2C_Init+0x274>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d802      	bhi.n	80023cc <HAL_I2C_Init+0xd4>
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	3301      	adds	r3, #1
 80023ca:	e009      	b.n	80023e0 <HAL_I2C_Init+0xe8>
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80023d2:	fb02 f303 	mul.w	r3, r2, r3
 80023d6:	4a69      	ldr	r2, [pc, #420]	; (800257c <HAL_I2C_Init+0x284>)
 80023d8:	fba2 2303 	umull	r2, r3, r2, r3
 80023dc:	099b      	lsrs	r3, r3, #6
 80023de:	3301      	adds	r3, #1
 80023e0:	687a      	ldr	r2, [r7, #4]
 80023e2:	6812      	ldr	r2, [r2, #0]
 80023e4:	430b      	orrs	r3, r1
 80023e6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	69db      	ldr	r3, [r3, #28]
 80023ee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80023f2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	495c      	ldr	r1, [pc, #368]	; (800256c <HAL_I2C_Init+0x274>)
 80023fc:	428b      	cmp	r3, r1
 80023fe:	d819      	bhi.n	8002434 <HAL_I2C_Init+0x13c>
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	1e59      	subs	r1, r3, #1
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	005b      	lsls	r3, r3, #1
 800240a:	fbb1 f3f3 	udiv	r3, r1, r3
 800240e:	1c59      	adds	r1, r3, #1
 8002410:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002414:	400b      	ands	r3, r1
 8002416:	2b00      	cmp	r3, #0
 8002418:	d00a      	beq.n	8002430 <HAL_I2C_Init+0x138>
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	1e59      	subs	r1, r3, #1
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	005b      	lsls	r3, r3, #1
 8002424:	fbb1 f3f3 	udiv	r3, r1, r3
 8002428:	3301      	adds	r3, #1
 800242a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800242e:	e051      	b.n	80024d4 <HAL_I2C_Init+0x1dc>
 8002430:	2304      	movs	r3, #4
 8002432:	e04f      	b.n	80024d4 <HAL_I2C_Init+0x1dc>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d111      	bne.n	8002460 <HAL_I2C_Init+0x168>
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	1e58      	subs	r0, r3, #1
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6859      	ldr	r1, [r3, #4]
 8002444:	460b      	mov	r3, r1
 8002446:	005b      	lsls	r3, r3, #1
 8002448:	440b      	add	r3, r1
 800244a:	fbb0 f3f3 	udiv	r3, r0, r3
 800244e:	3301      	adds	r3, #1
 8002450:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002454:	2b00      	cmp	r3, #0
 8002456:	bf0c      	ite	eq
 8002458:	2301      	moveq	r3, #1
 800245a:	2300      	movne	r3, #0
 800245c:	b2db      	uxtb	r3, r3
 800245e:	e012      	b.n	8002486 <HAL_I2C_Init+0x18e>
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	1e58      	subs	r0, r3, #1
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6859      	ldr	r1, [r3, #4]
 8002468:	460b      	mov	r3, r1
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	440b      	add	r3, r1
 800246e:	0099      	lsls	r1, r3, #2
 8002470:	440b      	add	r3, r1
 8002472:	fbb0 f3f3 	udiv	r3, r0, r3
 8002476:	3301      	adds	r3, #1
 8002478:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800247c:	2b00      	cmp	r3, #0
 800247e:	bf0c      	ite	eq
 8002480:	2301      	moveq	r3, #1
 8002482:	2300      	movne	r3, #0
 8002484:	b2db      	uxtb	r3, r3
 8002486:	2b00      	cmp	r3, #0
 8002488:	d001      	beq.n	800248e <HAL_I2C_Init+0x196>
 800248a:	2301      	movs	r3, #1
 800248c:	e022      	b.n	80024d4 <HAL_I2C_Init+0x1dc>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d10e      	bne.n	80024b4 <HAL_I2C_Init+0x1bc>
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	1e58      	subs	r0, r3, #1
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6859      	ldr	r1, [r3, #4]
 800249e:	460b      	mov	r3, r1
 80024a0:	005b      	lsls	r3, r3, #1
 80024a2:	440b      	add	r3, r1
 80024a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80024a8:	3301      	adds	r3, #1
 80024aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024b2:	e00f      	b.n	80024d4 <HAL_I2C_Init+0x1dc>
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	1e58      	subs	r0, r3, #1
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6859      	ldr	r1, [r3, #4]
 80024bc:	460b      	mov	r3, r1
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	440b      	add	r3, r1
 80024c2:	0099      	lsls	r1, r3, #2
 80024c4:	440b      	add	r3, r1
 80024c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80024ca:	3301      	adds	r3, #1
 80024cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80024d4:	6879      	ldr	r1, [r7, #4]
 80024d6:	6809      	ldr	r1, [r1, #0]
 80024d8:	4313      	orrs	r3, r2
 80024da:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	69da      	ldr	r2, [r3, #28]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6a1b      	ldr	r3, [r3, #32]
 80024ee:	431a      	orrs	r2, r3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	430a      	orrs	r2, r1
 80024f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002502:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	6911      	ldr	r1, [r2, #16]
 800250a:	687a      	ldr	r2, [r7, #4]
 800250c:	68d2      	ldr	r2, [r2, #12]
 800250e:	4311      	orrs	r1, r2
 8002510:	687a      	ldr	r2, [r7, #4]
 8002512:	6812      	ldr	r2, [r2, #0]
 8002514:	430b      	orrs	r3, r1
 8002516:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	68db      	ldr	r3, [r3, #12]
 800251e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	695a      	ldr	r2, [r3, #20]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	699b      	ldr	r3, [r3, #24]
 800252a:	431a      	orrs	r2, r3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	430a      	orrs	r2, r1
 8002532:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f042 0201 	orr.w	r2, r2, #1
 8002542:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2200      	movs	r2, #0
 8002548:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2220      	movs	r2, #32
 800254e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2200      	movs	r2, #0
 8002556:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2200      	movs	r2, #0
 800255c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002560:	2300      	movs	r3, #0
}
 8002562:	4618      	mov	r0, r3
 8002564:	3710      	adds	r7, #16
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	000186a0 	.word	0x000186a0
 8002570:	001e847f 	.word	0x001e847f
 8002574:	003d08ff 	.word	0x003d08ff
 8002578:	431bde83 	.word	0x431bde83
 800257c:	10624dd3 	.word	0x10624dd3

08002580 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8002580:	b480      	push	{r7}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8002588:	bf00      	nop
 800258a:	370c      	adds	r7, #12
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr

08002594 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b088      	sub	sp, #32
 8002598:	af02      	add	r7, sp, #8
 800259a:	60f8      	str	r0, [r7, #12]
 800259c:	607a      	str	r2, [r7, #4]
 800259e:	461a      	mov	r2, r3
 80025a0:	460b      	mov	r3, r1
 80025a2:	817b      	strh	r3, [r7, #10]
 80025a4:	4613      	mov	r3, r2
 80025a6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80025a8:	f7ff fb98 	bl	8001cdc <HAL_GetTick>
 80025ac:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	2b20      	cmp	r3, #32
 80025b8:	f040 80e0 	bne.w	800277c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	9300      	str	r3, [sp, #0]
 80025c0:	2319      	movs	r3, #25
 80025c2:	2201      	movs	r2, #1
 80025c4:	4970      	ldr	r1, [pc, #448]	; (8002788 <HAL_I2C_Master_Transmit+0x1f4>)
 80025c6:	68f8      	ldr	r0, [r7, #12]
 80025c8:	f000 fc58 	bl	8002e7c <I2C_WaitOnFlagUntilTimeout>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d001      	beq.n	80025d6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80025d2:	2302      	movs	r3, #2
 80025d4:	e0d3      	b.n	800277e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d101      	bne.n	80025e4 <HAL_I2C_Master_Transmit+0x50>
 80025e0:	2302      	movs	r3, #2
 80025e2:	e0cc      	b.n	800277e <HAL_I2C_Master_Transmit+0x1ea>
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2201      	movs	r2, #1
 80025e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 0301 	and.w	r3, r3, #1
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d007      	beq.n	800260a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f042 0201 	orr.w	r2, r2, #1
 8002608:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002618:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2221      	movs	r2, #33	; 0x21
 800261e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	2210      	movs	r2, #16
 8002626:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	2200      	movs	r2, #0
 800262e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	687a      	ldr	r2, [r7, #4]
 8002634:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	893a      	ldrh	r2, [r7, #8]
 800263a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002640:	b29a      	uxth	r2, r3
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	4a50      	ldr	r2, [pc, #320]	; (800278c <HAL_I2C_Master_Transmit+0x1f8>)
 800264a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800264c:	8979      	ldrh	r1, [r7, #10]
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	6a3a      	ldr	r2, [r7, #32]
 8002652:	68f8      	ldr	r0, [r7, #12]
 8002654:	f000 fac2 	bl	8002bdc <I2C_MasterRequestWrite>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d001      	beq.n	8002662 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e08d      	b.n	800277e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002662:	2300      	movs	r3, #0
 8002664:	613b      	str	r3, [r7, #16]
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	695b      	ldr	r3, [r3, #20]
 800266c:	613b      	str	r3, [r7, #16]
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	699b      	ldr	r3, [r3, #24]
 8002674:	613b      	str	r3, [r7, #16]
 8002676:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002678:	e066      	b.n	8002748 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800267a:	697a      	ldr	r2, [r7, #20]
 800267c:	6a39      	ldr	r1, [r7, #32]
 800267e:	68f8      	ldr	r0, [r7, #12]
 8002680:	f000 fcd2 	bl	8003028 <I2C_WaitOnTXEFlagUntilTimeout>
 8002684:	4603      	mov	r3, r0
 8002686:	2b00      	cmp	r3, #0
 8002688:	d00d      	beq.n	80026a6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268e:	2b04      	cmp	r3, #4
 8002690:	d107      	bne.n	80026a2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026a0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e06b      	b.n	800277e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026aa:	781a      	ldrb	r2, [r3, #0]
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b6:	1c5a      	adds	r2, r3, #1
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026c0:	b29b      	uxth	r3, r3
 80026c2:	3b01      	subs	r3, #1
 80026c4:	b29a      	uxth	r2, r3
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026ce:	3b01      	subs	r3, #1
 80026d0:	b29a      	uxth	r2, r3
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	695b      	ldr	r3, [r3, #20]
 80026dc:	f003 0304 	and.w	r3, r3, #4
 80026e0:	2b04      	cmp	r3, #4
 80026e2:	d11b      	bne.n	800271c <HAL_I2C_Master_Transmit+0x188>
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d017      	beq.n	800271c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f0:	781a      	ldrb	r2, [r3, #0]
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fc:	1c5a      	adds	r2, r3, #1
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002706:	b29b      	uxth	r3, r3
 8002708:	3b01      	subs	r3, #1
 800270a:	b29a      	uxth	r2, r3
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002714:	3b01      	subs	r3, #1
 8002716:	b29a      	uxth	r2, r3
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800271c:	697a      	ldr	r2, [r7, #20]
 800271e:	6a39      	ldr	r1, [r7, #32]
 8002720:	68f8      	ldr	r0, [r7, #12]
 8002722:	f000 fcc2 	bl	80030aa <I2C_WaitOnBTFFlagUntilTimeout>
 8002726:	4603      	mov	r3, r0
 8002728:	2b00      	cmp	r3, #0
 800272a:	d00d      	beq.n	8002748 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002730:	2b04      	cmp	r3, #4
 8002732:	d107      	bne.n	8002744 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002742:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	e01a      	b.n	800277e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800274c:	2b00      	cmp	r3, #0
 800274e:	d194      	bne.n	800267a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800275e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2220      	movs	r2, #32
 8002764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2200      	movs	r2, #0
 800276c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2200      	movs	r2, #0
 8002774:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002778:	2300      	movs	r3, #0
 800277a:	e000      	b.n	800277e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800277c:	2302      	movs	r3, #2
  }
}
 800277e:	4618      	mov	r0, r3
 8002780:	3718      	adds	r7, #24
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	00100002 	.word	0x00100002
 800278c:	ffff0000 	.word	0xffff0000

08002790 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b08c      	sub	sp, #48	; 0x30
 8002794:	af02      	add	r7, sp, #8
 8002796:	60f8      	str	r0, [r7, #12]
 8002798:	607a      	str	r2, [r7, #4]
 800279a:	461a      	mov	r2, r3
 800279c:	460b      	mov	r3, r1
 800279e:	817b      	strh	r3, [r7, #10]
 80027a0:	4613      	mov	r3, r2
 80027a2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80027a4:	f7ff fa9a 	bl	8001cdc <HAL_GetTick>
 80027a8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	2b20      	cmp	r3, #32
 80027b4:	f040 820b 	bne.w	8002bce <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80027b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ba:	9300      	str	r3, [sp, #0]
 80027bc:	2319      	movs	r3, #25
 80027be:	2201      	movs	r2, #1
 80027c0:	497c      	ldr	r1, [pc, #496]	; (80029b4 <HAL_I2C_Master_Receive+0x224>)
 80027c2:	68f8      	ldr	r0, [r7, #12]
 80027c4:	f000 fb5a 	bl	8002e7c <I2C_WaitOnFlagUntilTimeout>
 80027c8:	4603      	mov	r3, r0
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d001      	beq.n	80027d2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80027ce:	2302      	movs	r3, #2
 80027d0:	e1fe      	b.n	8002bd0 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d101      	bne.n	80027e0 <HAL_I2C_Master_Receive+0x50>
 80027dc:	2302      	movs	r3, #2
 80027de:	e1f7      	b.n	8002bd0 <HAL_I2C_Master_Receive+0x440>
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2201      	movs	r2, #1
 80027e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 0301 	and.w	r3, r3, #1
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d007      	beq.n	8002806 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f042 0201 	orr.w	r2, r2, #1
 8002804:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002814:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	2222      	movs	r2, #34	; 0x22
 800281a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	2210      	movs	r2, #16
 8002822:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	2200      	movs	r2, #0
 800282a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	687a      	ldr	r2, [r7, #4]
 8002830:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	893a      	ldrh	r2, [r7, #8]
 8002836:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800283c:	b29a      	uxth	r2, r3
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	4a5c      	ldr	r2, [pc, #368]	; (80029b8 <HAL_I2C_Master_Receive+0x228>)
 8002846:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002848:	8979      	ldrh	r1, [r7, #10]
 800284a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800284e:	68f8      	ldr	r0, [r7, #12]
 8002850:	f000 fa46 	bl	8002ce0 <I2C_MasterRequestRead>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d001      	beq.n	800285e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e1b8      	b.n	8002bd0 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002862:	2b00      	cmp	r3, #0
 8002864:	d113      	bne.n	800288e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002866:	2300      	movs	r3, #0
 8002868:	623b      	str	r3, [r7, #32]
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	695b      	ldr	r3, [r3, #20]
 8002870:	623b      	str	r3, [r7, #32]
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	699b      	ldr	r3, [r3, #24]
 8002878:	623b      	str	r3, [r7, #32]
 800287a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800288a:	601a      	str	r2, [r3, #0]
 800288c:	e18c      	b.n	8002ba8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002892:	2b01      	cmp	r3, #1
 8002894:	d11b      	bne.n	80028ce <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028a4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028a6:	2300      	movs	r3, #0
 80028a8:	61fb      	str	r3, [r7, #28]
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	695b      	ldr	r3, [r3, #20]
 80028b0:	61fb      	str	r3, [r7, #28]
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	699b      	ldr	r3, [r3, #24]
 80028b8:	61fb      	str	r3, [r7, #28]
 80028ba:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028ca:	601a      	str	r2, [r3, #0]
 80028cc:	e16c      	b.n	8002ba8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028d2:	2b02      	cmp	r3, #2
 80028d4:	d11b      	bne.n	800290e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028e4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80028f4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028f6:	2300      	movs	r3, #0
 80028f8:	61bb      	str	r3, [r7, #24]
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	695b      	ldr	r3, [r3, #20]
 8002900:	61bb      	str	r3, [r7, #24]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	699b      	ldr	r3, [r3, #24]
 8002908:	61bb      	str	r3, [r7, #24]
 800290a:	69bb      	ldr	r3, [r7, #24]
 800290c:	e14c      	b.n	8002ba8 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800291c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800291e:	2300      	movs	r3, #0
 8002920:	617b      	str	r3, [r7, #20]
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	695b      	ldr	r3, [r3, #20]
 8002928:	617b      	str	r3, [r7, #20]
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	699b      	ldr	r3, [r3, #24]
 8002930:	617b      	str	r3, [r7, #20]
 8002932:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002934:	e138      	b.n	8002ba8 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800293a:	2b03      	cmp	r3, #3
 800293c:	f200 80f1 	bhi.w	8002b22 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002944:	2b01      	cmp	r3, #1
 8002946:	d123      	bne.n	8002990 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002948:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800294a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800294c:	68f8      	ldr	r0, [r7, #12]
 800294e:	f000 fbed 	bl	800312c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002952:	4603      	mov	r3, r0
 8002954:	2b00      	cmp	r3, #0
 8002956:	d001      	beq.n	800295c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	e139      	b.n	8002bd0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	691a      	ldr	r2, [r3, #16]
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002966:	b2d2      	uxtb	r2, r2
 8002968:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800296e:	1c5a      	adds	r2, r3, #1
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002978:	3b01      	subs	r3, #1
 800297a:	b29a      	uxth	r2, r3
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002984:	b29b      	uxth	r3, r3
 8002986:	3b01      	subs	r3, #1
 8002988:	b29a      	uxth	r2, r3
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800298e:	e10b      	b.n	8002ba8 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002994:	2b02      	cmp	r3, #2
 8002996:	d14e      	bne.n	8002a36 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299a:	9300      	str	r3, [sp, #0]
 800299c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800299e:	2200      	movs	r2, #0
 80029a0:	4906      	ldr	r1, [pc, #24]	; (80029bc <HAL_I2C_Master_Receive+0x22c>)
 80029a2:	68f8      	ldr	r0, [r7, #12]
 80029a4:	f000 fa6a 	bl	8002e7c <I2C_WaitOnFlagUntilTimeout>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d008      	beq.n	80029c0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e10e      	b.n	8002bd0 <HAL_I2C_Master_Receive+0x440>
 80029b2:	bf00      	nop
 80029b4:	00100002 	.word	0x00100002
 80029b8:	ffff0000 	.word	0xffff0000
 80029bc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	691a      	ldr	r2, [r3, #16]
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029da:	b2d2      	uxtb	r2, r2
 80029dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e2:	1c5a      	adds	r2, r3, #1
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029ec:	3b01      	subs	r3, #1
 80029ee:	b29a      	uxth	r2, r3
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029f8:	b29b      	uxth	r3, r3
 80029fa:	3b01      	subs	r3, #1
 80029fc:	b29a      	uxth	r2, r3
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	691a      	ldr	r2, [r3, #16]
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a0c:	b2d2      	uxtb	r2, r2
 8002a0e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a14:	1c5a      	adds	r2, r3, #1
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a1e:	3b01      	subs	r3, #1
 8002a20:	b29a      	uxth	r2, r3
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	3b01      	subs	r3, #1
 8002a2e:	b29a      	uxth	r2, r3
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002a34:	e0b8      	b.n	8002ba8 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a38:	9300      	str	r3, [sp, #0]
 8002a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	4966      	ldr	r1, [pc, #408]	; (8002bd8 <HAL_I2C_Master_Receive+0x448>)
 8002a40:	68f8      	ldr	r0, [r7, #12]
 8002a42:	f000 fa1b 	bl	8002e7c <I2C_WaitOnFlagUntilTimeout>
 8002a46:	4603      	mov	r3, r0
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d001      	beq.n	8002a50 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e0bf      	b.n	8002bd0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a5e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	691a      	ldr	r2, [r3, #16]
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a6a:	b2d2      	uxtb	r2, r2
 8002a6c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a72:	1c5a      	adds	r2, r3, #1
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a7c:	3b01      	subs	r3, #1
 8002a7e:	b29a      	uxth	r2, r3
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a88:	b29b      	uxth	r3, r3
 8002a8a:	3b01      	subs	r3, #1
 8002a8c:	b29a      	uxth	r2, r3
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a94:	9300      	str	r3, [sp, #0]
 8002a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a98:	2200      	movs	r2, #0
 8002a9a:	494f      	ldr	r1, [pc, #316]	; (8002bd8 <HAL_I2C_Master_Receive+0x448>)
 8002a9c:	68f8      	ldr	r0, [r7, #12]
 8002a9e:	f000 f9ed 	bl	8002e7c <I2C_WaitOnFlagUntilTimeout>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d001      	beq.n	8002aac <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e091      	b.n	8002bd0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002aba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	691a      	ldr	r2, [r3, #16]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac6:	b2d2      	uxtb	r2, r2
 8002ac8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ace:	1c5a      	adds	r2, r3, #1
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ad8:	3b01      	subs	r3, #1
 8002ada:	b29a      	uxth	r2, r3
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ae4:	b29b      	uxth	r3, r3
 8002ae6:	3b01      	subs	r3, #1
 8002ae8:	b29a      	uxth	r2, r3
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	691a      	ldr	r2, [r3, #16]
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af8:	b2d2      	uxtb	r2, r2
 8002afa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b00:	1c5a      	adds	r2, r3, #1
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b0a:	3b01      	subs	r3, #1
 8002b0c:	b29a      	uxth	r2, r3
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b16:	b29b      	uxth	r3, r3
 8002b18:	3b01      	subs	r3, #1
 8002b1a:	b29a      	uxth	r2, r3
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002b20:	e042      	b.n	8002ba8 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b24:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002b26:	68f8      	ldr	r0, [r7, #12]
 8002b28:	f000 fb00 	bl	800312c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d001      	beq.n	8002b36 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e04c      	b.n	8002bd0 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	691a      	ldr	r2, [r3, #16]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b40:	b2d2      	uxtb	r2, r2
 8002b42:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b48:	1c5a      	adds	r2, r3, #1
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b52:	3b01      	subs	r3, #1
 8002b54:	b29a      	uxth	r2, r3
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b5e:	b29b      	uxth	r3, r3
 8002b60:	3b01      	subs	r3, #1
 8002b62:	b29a      	uxth	r2, r3
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	695b      	ldr	r3, [r3, #20]
 8002b6e:	f003 0304 	and.w	r3, r3, #4
 8002b72:	2b04      	cmp	r3, #4
 8002b74:	d118      	bne.n	8002ba8 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	691a      	ldr	r2, [r3, #16]
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b80:	b2d2      	uxtb	r2, r2
 8002b82:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b88:	1c5a      	adds	r2, r3, #1
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b92:	3b01      	subs	r3, #1
 8002b94:	b29a      	uxth	r2, r3
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b9e:	b29b      	uxth	r3, r3
 8002ba0:	3b01      	subs	r3, #1
 8002ba2:	b29a      	uxth	r2, r3
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	f47f aec2 	bne.w	8002936 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2220      	movs	r2, #32
 8002bb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	e000      	b.n	8002bd0 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002bce:	2302      	movs	r3, #2
  }
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	3728      	adds	r7, #40	; 0x28
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}
 8002bd8:	00010004 	.word	0x00010004

08002bdc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b088      	sub	sp, #32
 8002be0:	af02      	add	r7, sp, #8
 8002be2:	60f8      	str	r0, [r7, #12]
 8002be4:	607a      	str	r2, [r7, #4]
 8002be6:	603b      	str	r3, [r7, #0]
 8002be8:	460b      	mov	r3, r1
 8002bea:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bf0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	2b08      	cmp	r3, #8
 8002bf6:	d006      	beq.n	8002c06 <I2C_MasterRequestWrite+0x2a>
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d003      	beq.n	8002c06 <I2C_MasterRequestWrite+0x2a>
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002c04:	d108      	bne.n	8002c18 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c14:	601a      	str	r2, [r3, #0]
 8002c16:	e00b      	b.n	8002c30 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c1c:	2b12      	cmp	r3, #18
 8002c1e:	d107      	bne.n	8002c30 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c2e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	9300      	str	r3, [sp, #0]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2200      	movs	r2, #0
 8002c38:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002c3c:	68f8      	ldr	r0, [r7, #12]
 8002c3e:	f000 f91d 	bl	8002e7c <I2C_WaitOnFlagUntilTimeout>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d00d      	beq.n	8002c64 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c56:	d103      	bne.n	8002c60 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c5e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002c60:	2303      	movs	r3, #3
 8002c62:	e035      	b.n	8002cd0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	691b      	ldr	r3, [r3, #16]
 8002c68:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c6c:	d108      	bne.n	8002c80 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002c6e:	897b      	ldrh	r3, [r7, #10]
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	461a      	mov	r2, r3
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002c7c:	611a      	str	r2, [r3, #16]
 8002c7e:	e01b      	b.n	8002cb8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002c80:	897b      	ldrh	r3, [r7, #10]
 8002c82:	11db      	asrs	r3, r3, #7
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	f003 0306 	and.w	r3, r3, #6
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	f063 030f 	orn	r3, r3, #15
 8002c90:	b2da      	uxtb	r2, r3
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	687a      	ldr	r2, [r7, #4]
 8002c9c:	490e      	ldr	r1, [pc, #56]	; (8002cd8 <I2C_MasterRequestWrite+0xfc>)
 8002c9e:	68f8      	ldr	r0, [r7, #12]
 8002ca0:	f000 f943 	bl	8002f2a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d001      	beq.n	8002cae <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e010      	b.n	8002cd0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002cae:	897b      	ldrh	r3, [r7, #10]
 8002cb0:	b2da      	uxtb	r2, r3
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	4907      	ldr	r1, [pc, #28]	; (8002cdc <I2C_MasterRequestWrite+0x100>)
 8002cbe:	68f8      	ldr	r0, [r7, #12]
 8002cc0:	f000 f933 	bl	8002f2a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d001      	beq.n	8002cce <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e000      	b.n	8002cd0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002cce:	2300      	movs	r3, #0
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3718      	adds	r7, #24
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	00010008 	.word	0x00010008
 8002cdc:	00010002 	.word	0x00010002

08002ce0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b088      	sub	sp, #32
 8002ce4:	af02      	add	r7, sp, #8
 8002ce6:	60f8      	str	r0, [r7, #12]
 8002ce8:	607a      	str	r2, [r7, #4]
 8002cea:	603b      	str	r3, [r7, #0]
 8002cec:	460b      	mov	r3, r1
 8002cee:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002d04:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	2b08      	cmp	r3, #8
 8002d0a:	d006      	beq.n	8002d1a <I2C_MasterRequestRead+0x3a>
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d003      	beq.n	8002d1a <I2C_MasterRequestRead+0x3a>
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002d18:	d108      	bne.n	8002d2c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d28:	601a      	str	r2, [r3, #0]
 8002d2a:	e00b      	b.n	8002d44 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d30:	2b11      	cmp	r3, #17
 8002d32:	d107      	bne.n	8002d44 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d42:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	9300      	str	r3, [sp, #0]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002d50:	68f8      	ldr	r0, [r7, #12]
 8002d52:	f000 f893 	bl	8002e7c <I2C_WaitOnFlagUntilTimeout>
 8002d56:	4603      	mov	r3, r0
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d00d      	beq.n	8002d78 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d6a:	d103      	bne.n	8002d74 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d72:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002d74:	2303      	movs	r3, #3
 8002d76:	e079      	b.n	8002e6c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	691b      	ldr	r3, [r3, #16]
 8002d7c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d80:	d108      	bne.n	8002d94 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002d82:	897b      	ldrh	r3, [r7, #10]
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	f043 0301 	orr.w	r3, r3, #1
 8002d8a:	b2da      	uxtb	r2, r3
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	611a      	str	r2, [r3, #16]
 8002d92:	e05f      	b.n	8002e54 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002d94:	897b      	ldrh	r3, [r7, #10]
 8002d96:	11db      	asrs	r3, r3, #7
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	f003 0306 	and.w	r3, r3, #6
 8002d9e:	b2db      	uxtb	r3, r3
 8002da0:	f063 030f 	orn	r3, r3, #15
 8002da4:	b2da      	uxtb	r2, r3
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	687a      	ldr	r2, [r7, #4]
 8002db0:	4930      	ldr	r1, [pc, #192]	; (8002e74 <I2C_MasterRequestRead+0x194>)
 8002db2:	68f8      	ldr	r0, [r7, #12]
 8002db4:	f000 f8b9 	bl	8002f2a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002db8:	4603      	mov	r3, r0
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d001      	beq.n	8002dc2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e054      	b.n	8002e6c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002dc2:	897b      	ldrh	r3, [r7, #10]
 8002dc4:	b2da      	uxtb	r2, r3
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	687a      	ldr	r2, [r7, #4]
 8002dd0:	4929      	ldr	r1, [pc, #164]	; (8002e78 <I2C_MasterRequestRead+0x198>)
 8002dd2:	68f8      	ldr	r0, [r7, #12]
 8002dd4:	f000 f8a9 	bl	8002f2a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d001      	beq.n	8002de2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e044      	b.n	8002e6c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002de2:	2300      	movs	r3, #0
 8002de4:	613b      	str	r3, [r7, #16]
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	695b      	ldr	r3, [r3, #20]
 8002dec:	613b      	str	r3, [r7, #16]
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	699b      	ldr	r3, [r3, #24]
 8002df4:	613b      	str	r3, [r7, #16]
 8002df6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e06:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	9300      	str	r3, [sp, #0]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002e14:	68f8      	ldr	r0, [r7, #12]
 8002e16:	f000 f831 	bl	8002e7c <I2C_WaitOnFlagUntilTimeout>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d00d      	beq.n	8002e3c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e2e:	d103      	bne.n	8002e38 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e36:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002e38:	2303      	movs	r3, #3
 8002e3a:	e017      	b.n	8002e6c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002e3c:	897b      	ldrh	r3, [r7, #10]
 8002e3e:	11db      	asrs	r3, r3, #7
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	f003 0306 	and.w	r3, r3, #6
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	f063 030e 	orn	r3, r3, #14
 8002e4c:	b2da      	uxtb	r2, r3
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	687a      	ldr	r2, [r7, #4]
 8002e58:	4907      	ldr	r1, [pc, #28]	; (8002e78 <I2C_MasterRequestRead+0x198>)
 8002e5a:	68f8      	ldr	r0, [r7, #12]
 8002e5c:	f000 f865 	bl	8002f2a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e60:	4603      	mov	r3, r0
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d001      	beq.n	8002e6a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e000      	b.n	8002e6c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002e6a:	2300      	movs	r3, #0
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	3718      	adds	r7, #24
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}
 8002e74:	00010008 	.word	0x00010008
 8002e78:	00010002 	.word	0x00010002

08002e7c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b084      	sub	sp, #16
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	60f8      	str	r0, [r7, #12]
 8002e84:	60b9      	str	r1, [r7, #8]
 8002e86:	603b      	str	r3, [r7, #0]
 8002e88:	4613      	mov	r3, r2
 8002e8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e8c:	e025      	b.n	8002eda <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e94:	d021      	beq.n	8002eda <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e96:	f7fe ff21 	bl	8001cdc <HAL_GetTick>
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	69bb      	ldr	r3, [r7, #24]
 8002e9e:	1ad3      	subs	r3, r2, r3
 8002ea0:	683a      	ldr	r2, [r7, #0]
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	d302      	bcc.n	8002eac <I2C_WaitOnFlagUntilTimeout+0x30>
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d116      	bne.n	8002eda <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2220      	movs	r2, #32
 8002eb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec6:	f043 0220 	orr.w	r2, r3, #32
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e023      	b.n	8002f22 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	0c1b      	lsrs	r3, r3, #16
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d10d      	bne.n	8002f00 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	695b      	ldr	r3, [r3, #20]
 8002eea:	43da      	mvns	r2, r3
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	4013      	ands	r3, r2
 8002ef0:	b29b      	uxth	r3, r3
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	bf0c      	ite	eq
 8002ef6:	2301      	moveq	r3, #1
 8002ef8:	2300      	movne	r3, #0
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	461a      	mov	r2, r3
 8002efe:	e00c      	b.n	8002f1a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	699b      	ldr	r3, [r3, #24]
 8002f06:	43da      	mvns	r2, r3
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	b29b      	uxth	r3, r3
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	bf0c      	ite	eq
 8002f12:	2301      	moveq	r3, #1
 8002f14:	2300      	movne	r3, #0
 8002f16:	b2db      	uxtb	r3, r3
 8002f18:	461a      	mov	r2, r3
 8002f1a:	79fb      	ldrb	r3, [r7, #7]
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d0b6      	beq.n	8002e8e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002f20:	2300      	movs	r3, #0
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3710      	adds	r7, #16
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}

08002f2a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002f2a:	b580      	push	{r7, lr}
 8002f2c:	b084      	sub	sp, #16
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	60f8      	str	r0, [r7, #12]
 8002f32:	60b9      	str	r1, [r7, #8]
 8002f34:	607a      	str	r2, [r7, #4]
 8002f36:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f38:	e051      	b.n	8002fde <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	695b      	ldr	r3, [r3, #20]
 8002f40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f48:	d123      	bne.n	8002f92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f58:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002f62:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2200      	movs	r2, #0
 8002f68:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2220      	movs	r2, #32
 8002f6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2200      	movs	r2, #0
 8002f76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7e:	f043 0204 	orr.w	r2, r3, #4
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e046      	b.n	8003020 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f98:	d021      	beq.n	8002fde <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f9a:	f7fe fe9f 	bl	8001cdc <HAL_GetTick>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	1ad3      	subs	r3, r2, r3
 8002fa4:	687a      	ldr	r2, [r7, #4]
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d302      	bcc.n	8002fb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d116      	bne.n	8002fde <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2220      	movs	r2, #32
 8002fba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fca:	f043 0220 	orr.w	r2, r3, #32
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e020      	b.n	8003020 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	0c1b      	lsrs	r3, r3, #16
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d10c      	bne.n	8003002 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	695b      	ldr	r3, [r3, #20]
 8002fee:	43da      	mvns	r2, r3
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	bf14      	ite	ne
 8002ffa:	2301      	movne	r3, #1
 8002ffc:	2300      	moveq	r3, #0
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	e00b      	b.n	800301a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	699b      	ldr	r3, [r3, #24]
 8003008:	43da      	mvns	r2, r3
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	4013      	ands	r3, r2
 800300e:	b29b      	uxth	r3, r3
 8003010:	2b00      	cmp	r3, #0
 8003012:	bf14      	ite	ne
 8003014:	2301      	movne	r3, #1
 8003016:	2300      	moveq	r3, #0
 8003018:	b2db      	uxtb	r3, r3
 800301a:	2b00      	cmp	r3, #0
 800301c:	d18d      	bne.n	8002f3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800301e:	2300      	movs	r3, #0
}
 8003020:	4618      	mov	r0, r3
 8003022:	3710      	adds	r7, #16
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}

08003028 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b084      	sub	sp, #16
 800302c:	af00      	add	r7, sp, #0
 800302e:	60f8      	str	r0, [r7, #12]
 8003030:	60b9      	str	r1, [r7, #8]
 8003032:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003034:	e02d      	b.n	8003092 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003036:	68f8      	ldr	r0, [r7, #12]
 8003038:	f000 f8ce 	bl	80031d8 <I2C_IsAcknowledgeFailed>
 800303c:	4603      	mov	r3, r0
 800303e:	2b00      	cmp	r3, #0
 8003040:	d001      	beq.n	8003046 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e02d      	b.n	80030a2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800304c:	d021      	beq.n	8003092 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800304e:	f7fe fe45 	bl	8001cdc <HAL_GetTick>
 8003052:	4602      	mov	r2, r0
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	1ad3      	subs	r3, r2, r3
 8003058:	68ba      	ldr	r2, [r7, #8]
 800305a:	429a      	cmp	r2, r3
 800305c:	d302      	bcc.n	8003064 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d116      	bne.n	8003092 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2200      	movs	r2, #0
 8003068:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2220      	movs	r2, #32
 800306e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2200      	movs	r2, #0
 8003076:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307e:	f043 0220 	orr.w	r2, r3, #32
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2200      	movs	r2, #0
 800308a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e007      	b.n	80030a2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	695b      	ldr	r3, [r3, #20]
 8003098:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800309c:	2b80      	cmp	r3, #128	; 0x80
 800309e:	d1ca      	bne.n	8003036 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80030a0:	2300      	movs	r3, #0
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3710      	adds	r7, #16
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}

080030aa <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030aa:	b580      	push	{r7, lr}
 80030ac:	b084      	sub	sp, #16
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	60f8      	str	r0, [r7, #12]
 80030b2:	60b9      	str	r1, [r7, #8]
 80030b4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80030b6:	e02d      	b.n	8003114 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80030b8:	68f8      	ldr	r0, [r7, #12]
 80030ba:	f000 f88d 	bl	80031d8 <I2C_IsAcknowledgeFailed>
 80030be:	4603      	mov	r3, r0
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d001      	beq.n	80030c8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	e02d      	b.n	8003124 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80030ce:	d021      	beq.n	8003114 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030d0:	f7fe fe04 	bl	8001cdc <HAL_GetTick>
 80030d4:	4602      	mov	r2, r0
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	1ad3      	subs	r3, r2, r3
 80030da:	68ba      	ldr	r2, [r7, #8]
 80030dc:	429a      	cmp	r2, r3
 80030de:	d302      	bcc.n	80030e6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d116      	bne.n	8003114 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2200      	movs	r2, #0
 80030ea:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2220      	movs	r2, #32
 80030f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2200      	movs	r2, #0
 80030f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003100:	f043 0220 	orr.w	r2, r3, #32
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2200      	movs	r2, #0
 800310c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	e007      	b.n	8003124 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	695b      	ldr	r3, [r3, #20]
 800311a:	f003 0304 	and.w	r3, r3, #4
 800311e:	2b04      	cmp	r3, #4
 8003120:	d1ca      	bne.n	80030b8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003122:	2300      	movs	r3, #0
}
 8003124:	4618      	mov	r0, r3
 8003126:	3710      	adds	r7, #16
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}

0800312c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b084      	sub	sp, #16
 8003130:	af00      	add	r7, sp, #0
 8003132:	60f8      	str	r0, [r7, #12]
 8003134:	60b9      	str	r1, [r7, #8]
 8003136:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003138:	e042      	b.n	80031c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	695b      	ldr	r3, [r3, #20]
 8003140:	f003 0310 	and.w	r3, r3, #16
 8003144:	2b10      	cmp	r3, #16
 8003146:	d119      	bne.n	800317c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f06f 0210 	mvn.w	r2, #16
 8003150:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2200      	movs	r2, #0
 8003156:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2220      	movs	r2, #32
 800315c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2200      	movs	r2, #0
 8003164:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2200      	movs	r2, #0
 8003174:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	e029      	b.n	80031d0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800317c:	f7fe fdae 	bl	8001cdc <HAL_GetTick>
 8003180:	4602      	mov	r2, r0
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	68ba      	ldr	r2, [r7, #8]
 8003188:	429a      	cmp	r2, r3
 800318a:	d302      	bcc.n	8003192 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d116      	bne.n	80031c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2200      	movs	r2, #0
 8003196:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	2220      	movs	r2, #32
 800319c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2200      	movs	r2, #0
 80031a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ac:	f043 0220 	orr.w	r2, r3, #32
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2200      	movs	r2, #0
 80031b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	e007      	b.n	80031d0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	695b      	ldr	r3, [r3, #20]
 80031c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031ca:	2b40      	cmp	r3, #64	; 0x40
 80031cc:	d1b5      	bne.n	800313a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80031ce:	2300      	movs	r3, #0
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	3710      	adds	r7, #16
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}

080031d8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80031d8:	b480      	push	{r7}
 80031da:	b083      	sub	sp, #12
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	695b      	ldr	r3, [r3, #20]
 80031e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031ee:	d11b      	bne.n	8003228 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80031f8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2200      	movs	r2, #0
 80031fe:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2220      	movs	r2, #32
 8003204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2200      	movs	r2, #0
 800320c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003214:	f043 0204 	orr.w	r2, r3, #4
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2200      	movs	r2, #0
 8003220:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	e000      	b.n	800322a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003228:	2300      	movs	r3, #0
}
 800322a:	4618      	mov	r0, r3
 800322c:	370c      	adds	r7, #12
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr
	...

08003238 <HAL_UART_MspInit>:
  *           - Peripheral's GPIO Configuration
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b08a      	sub	sp, #40	; 0x28
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStruct;


  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable GPIO TX/RX clock */
  USARTx_TX_GPIO_CLK_ENABLE();
 8003240:	2300      	movs	r3, #0
 8003242:	613b      	str	r3, [r7, #16]
 8003244:	4b23      	ldr	r3, [pc, #140]	; (80032d4 <HAL_UART_MspInit+0x9c>)
 8003246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003248:	4a22      	ldr	r2, [pc, #136]	; (80032d4 <HAL_UART_MspInit+0x9c>)
 800324a:	f043 0308 	orr.w	r3, r3, #8
 800324e:	6313      	str	r3, [r2, #48]	; 0x30
 8003250:	4b20      	ldr	r3, [pc, #128]	; (80032d4 <HAL_UART_MspInit+0x9c>)
 8003252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003254:	f003 0308 	and.w	r3, r3, #8
 8003258:	613b      	str	r3, [r7, #16]
 800325a:	693b      	ldr	r3, [r7, #16]
  USARTx_RX_GPIO_CLK_ENABLE();
 800325c:	2300      	movs	r3, #0
 800325e:	60fb      	str	r3, [r7, #12]
 8003260:	4b1c      	ldr	r3, [pc, #112]	; (80032d4 <HAL_UART_MspInit+0x9c>)
 8003262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003264:	4a1b      	ldr	r2, [pc, #108]	; (80032d4 <HAL_UART_MspInit+0x9c>)
 8003266:	f043 0308 	orr.w	r3, r3, #8
 800326a:	6313      	str	r3, [r2, #48]	; 0x30
 800326c:	4b19      	ldr	r3, [pc, #100]	; (80032d4 <HAL_UART_MspInit+0x9c>)
 800326e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003270:	f003 0308 	and.w	r3, r3, #8
 8003274:	60fb      	str	r3, [r7, #12]
 8003276:	68fb      	ldr	r3, [r7, #12]


  /* Enable USARTx clock */
  USARTx_CLK_ENABLE();
 8003278:	2300      	movs	r3, #0
 800327a:	60bb      	str	r3, [r7, #8]
 800327c:	4b15      	ldr	r3, [pc, #84]	; (80032d4 <HAL_UART_MspInit+0x9c>)
 800327e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003280:	4a14      	ldr	r2, [pc, #80]	; (80032d4 <HAL_UART_MspInit+0x9c>)
 8003282:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003286:	6413      	str	r3, [r2, #64]	; 0x40
 8003288:	4b12      	ldr	r3, [pc, #72]	; (80032d4 <HAL_UART_MspInit+0x9c>)
 800328a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003290:	60bb      	str	r3, [r7, #8]
 8003292:	68bb      	ldr	r3, [r7, #8]

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* UART TX GPIO pin configuration  */
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
 8003294:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003298:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 800329a:	2302      	movs	r3, #2
 800329c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 800329e:	2301      	movs	r3, #1
 80032a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 80032a2:	2303      	movs	r3, #3
 80032a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
 80032a6:	2307      	movs	r3, #7
 80032a8:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 80032aa:	f107 0314 	add.w	r3, r7, #20
 80032ae:	4619      	mov	r1, r3
 80032b0:	4809      	ldr	r0, [pc, #36]	; (80032d8 <HAL_UART_MspInit+0xa0>)
 80032b2:	f7fe fe29 	bl	8001f08 <HAL_GPIO_Init>

  /* UART RX GPIO pin configuration  */
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 80032b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80032ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = USARTx_RX_AF;
 80032bc:	2307      	movs	r3, #7
 80032be:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 80032c0:	f107 0314 	add.w	r3, r7, #20
 80032c4:	4619      	mov	r1, r3
 80032c6:	4804      	ldr	r0, [pc, #16]	; (80032d8 <HAL_UART_MspInit+0xa0>)
 80032c8:	f7fe fe1e 	bl	8001f08 <HAL_GPIO_Init>
}
 80032cc:	bf00      	nop
 80032ce:	3728      	adds	r7, #40	; 0x28
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}
 80032d4:	40023800 	.word	0x40023800
 80032d8:	40020c00 	.word	0x40020c00

080032dc <HAL_MspInit>:
  * @note   This function is called from HAL_Init() function to perform system
  *         level initialization (GPIOs, clock, DMA, interrupt).
  * @retval None
  */
void HAL_MspInit(void)
{
 80032dc:	b480      	push	{r7}
 80032de:	af00      	add	r7, sp, #0

}
 80032e0:	bf00      	nop
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr
	...

080032ec <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b082      	sub	sp, #8
 80032f0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80032f2:	2300      	movs	r3, #0
 80032f4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80032f6:	2300      	movs	r3, #0
 80032f8:	603b      	str	r3, [r7, #0]
 80032fa:	4b20      	ldr	r3, [pc, #128]	; (800337c <HAL_PWREx_EnableOverDrive+0x90>)
 80032fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fe:	4a1f      	ldr	r2, [pc, #124]	; (800337c <HAL_PWREx_EnableOverDrive+0x90>)
 8003300:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003304:	6413      	str	r3, [r2, #64]	; 0x40
 8003306:	4b1d      	ldr	r3, [pc, #116]	; (800337c <HAL_PWREx_EnableOverDrive+0x90>)
 8003308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800330e:	603b      	str	r3, [r7, #0]
 8003310:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003312:	4b1b      	ldr	r3, [pc, #108]	; (8003380 <HAL_PWREx_EnableOverDrive+0x94>)
 8003314:	2201      	movs	r2, #1
 8003316:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003318:	f7fe fce0 	bl	8001cdc <HAL_GetTick>
 800331c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800331e:	e009      	b.n	8003334 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003320:	f7fe fcdc 	bl	8001cdc <HAL_GetTick>
 8003324:	4602      	mov	r2, r0
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	1ad3      	subs	r3, r2, r3
 800332a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800332e:	d901      	bls.n	8003334 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003330:	2303      	movs	r3, #3
 8003332:	e01f      	b.n	8003374 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003334:	4b13      	ldr	r3, [pc, #76]	; (8003384 <HAL_PWREx_EnableOverDrive+0x98>)
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800333c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003340:	d1ee      	bne.n	8003320 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003342:	4b11      	ldr	r3, [pc, #68]	; (8003388 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003344:	2201      	movs	r2, #1
 8003346:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003348:	f7fe fcc8 	bl	8001cdc <HAL_GetTick>
 800334c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800334e:	e009      	b.n	8003364 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003350:	f7fe fcc4 	bl	8001cdc <HAL_GetTick>
 8003354:	4602      	mov	r2, r0
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800335e:	d901      	bls.n	8003364 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003360:	2303      	movs	r3, #3
 8003362:	e007      	b.n	8003374 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003364:	4b07      	ldr	r3, [pc, #28]	; (8003384 <HAL_PWREx_EnableOverDrive+0x98>)
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800336c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003370:	d1ee      	bne.n	8003350 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003372:	2300      	movs	r3, #0
}
 8003374:	4618      	mov	r0, r3
 8003376:	3708      	adds	r7, #8
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}
 800337c:	40023800 	.word	0x40023800
 8003380:	420e0040 	.word	0x420e0040
 8003384:	40007000 	.word	0x40007000
 8003388:	420e0044 	.word	0x420e0044

0800338c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b086      	sub	sp, #24
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d101      	bne.n	800339e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e267      	b.n	800386e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 0301 	and.w	r3, r3, #1
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d075      	beq.n	8003496 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80033aa:	4b88      	ldr	r3, [pc, #544]	; (80035cc <HAL_RCC_OscConfig+0x240>)
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	f003 030c 	and.w	r3, r3, #12
 80033b2:	2b04      	cmp	r3, #4
 80033b4:	d00c      	beq.n	80033d0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033b6:	4b85      	ldr	r3, [pc, #532]	; (80035cc <HAL_RCC_OscConfig+0x240>)
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80033be:	2b08      	cmp	r3, #8
 80033c0:	d112      	bne.n	80033e8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033c2:	4b82      	ldr	r3, [pc, #520]	; (80035cc <HAL_RCC_OscConfig+0x240>)
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033ce:	d10b      	bne.n	80033e8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033d0:	4b7e      	ldr	r3, [pc, #504]	; (80035cc <HAL_RCC_OscConfig+0x240>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d05b      	beq.n	8003494 <HAL_RCC_OscConfig+0x108>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d157      	bne.n	8003494 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	e242      	b.n	800386e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033f0:	d106      	bne.n	8003400 <HAL_RCC_OscConfig+0x74>
 80033f2:	4b76      	ldr	r3, [pc, #472]	; (80035cc <HAL_RCC_OscConfig+0x240>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a75      	ldr	r2, [pc, #468]	; (80035cc <HAL_RCC_OscConfig+0x240>)
 80033f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033fc:	6013      	str	r3, [r2, #0]
 80033fe:	e01d      	b.n	800343c <HAL_RCC_OscConfig+0xb0>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003408:	d10c      	bne.n	8003424 <HAL_RCC_OscConfig+0x98>
 800340a:	4b70      	ldr	r3, [pc, #448]	; (80035cc <HAL_RCC_OscConfig+0x240>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a6f      	ldr	r2, [pc, #444]	; (80035cc <HAL_RCC_OscConfig+0x240>)
 8003410:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003414:	6013      	str	r3, [r2, #0]
 8003416:	4b6d      	ldr	r3, [pc, #436]	; (80035cc <HAL_RCC_OscConfig+0x240>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a6c      	ldr	r2, [pc, #432]	; (80035cc <HAL_RCC_OscConfig+0x240>)
 800341c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003420:	6013      	str	r3, [r2, #0]
 8003422:	e00b      	b.n	800343c <HAL_RCC_OscConfig+0xb0>
 8003424:	4b69      	ldr	r3, [pc, #420]	; (80035cc <HAL_RCC_OscConfig+0x240>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a68      	ldr	r2, [pc, #416]	; (80035cc <HAL_RCC_OscConfig+0x240>)
 800342a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800342e:	6013      	str	r3, [r2, #0]
 8003430:	4b66      	ldr	r3, [pc, #408]	; (80035cc <HAL_RCC_OscConfig+0x240>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a65      	ldr	r2, [pc, #404]	; (80035cc <HAL_RCC_OscConfig+0x240>)
 8003436:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800343a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d013      	beq.n	800346c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003444:	f7fe fc4a 	bl	8001cdc <HAL_GetTick>
 8003448:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800344a:	e008      	b.n	800345e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800344c:	f7fe fc46 	bl	8001cdc <HAL_GetTick>
 8003450:	4602      	mov	r2, r0
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	2b64      	cmp	r3, #100	; 0x64
 8003458:	d901      	bls.n	800345e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800345a:	2303      	movs	r3, #3
 800345c:	e207      	b.n	800386e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800345e:	4b5b      	ldr	r3, [pc, #364]	; (80035cc <HAL_RCC_OscConfig+0x240>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003466:	2b00      	cmp	r3, #0
 8003468:	d0f0      	beq.n	800344c <HAL_RCC_OscConfig+0xc0>
 800346a:	e014      	b.n	8003496 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800346c:	f7fe fc36 	bl	8001cdc <HAL_GetTick>
 8003470:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003472:	e008      	b.n	8003486 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003474:	f7fe fc32 	bl	8001cdc <HAL_GetTick>
 8003478:	4602      	mov	r2, r0
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	2b64      	cmp	r3, #100	; 0x64
 8003480:	d901      	bls.n	8003486 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003482:	2303      	movs	r3, #3
 8003484:	e1f3      	b.n	800386e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003486:	4b51      	ldr	r3, [pc, #324]	; (80035cc <HAL_RCC_OscConfig+0x240>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800348e:	2b00      	cmp	r3, #0
 8003490:	d1f0      	bne.n	8003474 <HAL_RCC_OscConfig+0xe8>
 8003492:	e000      	b.n	8003496 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003494:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 0302 	and.w	r3, r3, #2
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d063      	beq.n	800356a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80034a2:	4b4a      	ldr	r3, [pc, #296]	; (80035cc <HAL_RCC_OscConfig+0x240>)
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	f003 030c 	and.w	r3, r3, #12
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d00b      	beq.n	80034c6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034ae:	4b47      	ldr	r3, [pc, #284]	; (80035cc <HAL_RCC_OscConfig+0x240>)
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80034b6:	2b08      	cmp	r3, #8
 80034b8:	d11c      	bne.n	80034f4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034ba:	4b44      	ldr	r3, [pc, #272]	; (80035cc <HAL_RCC_OscConfig+0x240>)
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d116      	bne.n	80034f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034c6:	4b41      	ldr	r3, [pc, #260]	; (80035cc <HAL_RCC_OscConfig+0x240>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 0302 	and.w	r3, r3, #2
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d005      	beq.n	80034de <HAL_RCC_OscConfig+0x152>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	68db      	ldr	r3, [r3, #12]
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	d001      	beq.n	80034de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	e1c7      	b.n	800386e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034de:	4b3b      	ldr	r3, [pc, #236]	; (80035cc <HAL_RCC_OscConfig+0x240>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	691b      	ldr	r3, [r3, #16]
 80034ea:	00db      	lsls	r3, r3, #3
 80034ec:	4937      	ldr	r1, [pc, #220]	; (80035cc <HAL_RCC_OscConfig+0x240>)
 80034ee:	4313      	orrs	r3, r2
 80034f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034f2:	e03a      	b.n	800356a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d020      	beq.n	800353e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034fc:	4b34      	ldr	r3, [pc, #208]	; (80035d0 <HAL_RCC_OscConfig+0x244>)
 80034fe:	2201      	movs	r2, #1
 8003500:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003502:	f7fe fbeb 	bl	8001cdc <HAL_GetTick>
 8003506:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003508:	e008      	b.n	800351c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800350a:	f7fe fbe7 	bl	8001cdc <HAL_GetTick>
 800350e:	4602      	mov	r2, r0
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	1ad3      	subs	r3, r2, r3
 8003514:	2b02      	cmp	r3, #2
 8003516:	d901      	bls.n	800351c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003518:	2303      	movs	r3, #3
 800351a:	e1a8      	b.n	800386e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800351c:	4b2b      	ldr	r3, [pc, #172]	; (80035cc <HAL_RCC_OscConfig+0x240>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f003 0302 	and.w	r3, r3, #2
 8003524:	2b00      	cmp	r3, #0
 8003526:	d0f0      	beq.n	800350a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003528:	4b28      	ldr	r3, [pc, #160]	; (80035cc <HAL_RCC_OscConfig+0x240>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	691b      	ldr	r3, [r3, #16]
 8003534:	00db      	lsls	r3, r3, #3
 8003536:	4925      	ldr	r1, [pc, #148]	; (80035cc <HAL_RCC_OscConfig+0x240>)
 8003538:	4313      	orrs	r3, r2
 800353a:	600b      	str	r3, [r1, #0]
 800353c:	e015      	b.n	800356a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800353e:	4b24      	ldr	r3, [pc, #144]	; (80035d0 <HAL_RCC_OscConfig+0x244>)
 8003540:	2200      	movs	r2, #0
 8003542:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003544:	f7fe fbca 	bl	8001cdc <HAL_GetTick>
 8003548:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800354a:	e008      	b.n	800355e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800354c:	f7fe fbc6 	bl	8001cdc <HAL_GetTick>
 8003550:	4602      	mov	r2, r0
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	1ad3      	subs	r3, r2, r3
 8003556:	2b02      	cmp	r3, #2
 8003558:	d901      	bls.n	800355e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800355a:	2303      	movs	r3, #3
 800355c:	e187      	b.n	800386e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800355e:	4b1b      	ldr	r3, [pc, #108]	; (80035cc <HAL_RCC_OscConfig+0x240>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 0302 	and.w	r3, r3, #2
 8003566:	2b00      	cmp	r3, #0
 8003568:	d1f0      	bne.n	800354c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 0308 	and.w	r3, r3, #8
 8003572:	2b00      	cmp	r3, #0
 8003574:	d036      	beq.n	80035e4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	695b      	ldr	r3, [r3, #20]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d016      	beq.n	80035ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800357e:	4b15      	ldr	r3, [pc, #84]	; (80035d4 <HAL_RCC_OscConfig+0x248>)
 8003580:	2201      	movs	r2, #1
 8003582:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003584:	f7fe fbaa 	bl	8001cdc <HAL_GetTick>
 8003588:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800358a:	e008      	b.n	800359e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800358c:	f7fe fba6 	bl	8001cdc <HAL_GetTick>
 8003590:	4602      	mov	r2, r0
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	2b02      	cmp	r3, #2
 8003598:	d901      	bls.n	800359e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800359a:	2303      	movs	r3, #3
 800359c:	e167      	b.n	800386e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800359e:	4b0b      	ldr	r3, [pc, #44]	; (80035cc <HAL_RCC_OscConfig+0x240>)
 80035a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035a2:	f003 0302 	and.w	r3, r3, #2
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d0f0      	beq.n	800358c <HAL_RCC_OscConfig+0x200>
 80035aa:	e01b      	b.n	80035e4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035ac:	4b09      	ldr	r3, [pc, #36]	; (80035d4 <HAL_RCC_OscConfig+0x248>)
 80035ae:	2200      	movs	r2, #0
 80035b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035b2:	f7fe fb93 	bl	8001cdc <HAL_GetTick>
 80035b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035b8:	e00e      	b.n	80035d8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035ba:	f7fe fb8f 	bl	8001cdc <HAL_GetTick>
 80035be:	4602      	mov	r2, r0
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	1ad3      	subs	r3, r2, r3
 80035c4:	2b02      	cmp	r3, #2
 80035c6:	d907      	bls.n	80035d8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80035c8:	2303      	movs	r3, #3
 80035ca:	e150      	b.n	800386e <HAL_RCC_OscConfig+0x4e2>
 80035cc:	40023800 	.word	0x40023800
 80035d0:	42470000 	.word	0x42470000
 80035d4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035d8:	4b88      	ldr	r3, [pc, #544]	; (80037fc <HAL_RCC_OscConfig+0x470>)
 80035da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035dc:	f003 0302 	and.w	r3, r3, #2
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d1ea      	bne.n	80035ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 0304 	and.w	r3, r3, #4
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	f000 8097 	beq.w	8003720 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035f2:	2300      	movs	r3, #0
 80035f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035f6:	4b81      	ldr	r3, [pc, #516]	; (80037fc <HAL_RCC_OscConfig+0x470>)
 80035f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d10f      	bne.n	8003622 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003602:	2300      	movs	r3, #0
 8003604:	60bb      	str	r3, [r7, #8]
 8003606:	4b7d      	ldr	r3, [pc, #500]	; (80037fc <HAL_RCC_OscConfig+0x470>)
 8003608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360a:	4a7c      	ldr	r2, [pc, #496]	; (80037fc <HAL_RCC_OscConfig+0x470>)
 800360c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003610:	6413      	str	r3, [r2, #64]	; 0x40
 8003612:	4b7a      	ldr	r3, [pc, #488]	; (80037fc <HAL_RCC_OscConfig+0x470>)
 8003614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003616:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800361a:	60bb      	str	r3, [r7, #8]
 800361c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800361e:	2301      	movs	r3, #1
 8003620:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003622:	4b77      	ldr	r3, [pc, #476]	; (8003800 <HAL_RCC_OscConfig+0x474>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800362a:	2b00      	cmp	r3, #0
 800362c:	d118      	bne.n	8003660 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800362e:	4b74      	ldr	r3, [pc, #464]	; (8003800 <HAL_RCC_OscConfig+0x474>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a73      	ldr	r2, [pc, #460]	; (8003800 <HAL_RCC_OscConfig+0x474>)
 8003634:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003638:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800363a:	f7fe fb4f 	bl	8001cdc <HAL_GetTick>
 800363e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003640:	e008      	b.n	8003654 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003642:	f7fe fb4b 	bl	8001cdc <HAL_GetTick>
 8003646:	4602      	mov	r2, r0
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	1ad3      	subs	r3, r2, r3
 800364c:	2b02      	cmp	r3, #2
 800364e:	d901      	bls.n	8003654 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003650:	2303      	movs	r3, #3
 8003652:	e10c      	b.n	800386e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003654:	4b6a      	ldr	r3, [pc, #424]	; (8003800 <HAL_RCC_OscConfig+0x474>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800365c:	2b00      	cmp	r3, #0
 800365e:	d0f0      	beq.n	8003642 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	2b01      	cmp	r3, #1
 8003666:	d106      	bne.n	8003676 <HAL_RCC_OscConfig+0x2ea>
 8003668:	4b64      	ldr	r3, [pc, #400]	; (80037fc <HAL_RCC_OscConfig+0x470>)
 800366a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800366c:	4a63      	ldr	r2, [pc, #396]	; (80037fc <HAL_RCC_OscConfig+0x470>)
 800366e:	f043 0301 	orr.w	r3, r3, #1
 8003672:	6713      	str	r3, [r2, #112]	; 0x70
 8003674:	e01c      	b.n	80036b0 <HAL_RCC_OscConfig+0x324>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	2b05      	cmp	r3, #5
 800367c:	d10c      	bne.n	8003698 <HAL_RCC_OscConfig+0x30c>
 800367e:	4b5f      	ldr	r3, [pc, #380]	; (80037fc <HAL_RCC_OscConfig+0x470>)
 8003680:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003682:	4a5e      	ldr	r2, [pc, #376]	; (80037fc <HAL_RCC_OscConfig+0x470>)
 8003684:	f043 0304 	orr.w	r3, r3, #4
 8003688:	6713      	str	r3, [r2, #112]	; 0x70
 800368a:	4b5c      	ldr	r3, [pc, #368]	; (80037fc <HAL_RCC_OscConfig+0x470>)
 800368c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800368e:	4a5b      	ldr	r2, [pc, #364]	; (80037fc <HAL_RCC_OscConfig+0x470>)
 8003690:	f043 0301 	orr.w	r3, r3, #1
 8003694:	6713      	str	r3, [r2, #112]	; 0x70
 8003696:	e00b      	b.n	80036b0 <HAL_RCC_OscConfig+0x324>
 8003698:	4b58      	ldr	r3, [pc, #352]	; (80037fc <HAL_RCC_OscConfig+0x470>)
 800369a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800369c:	4a57      	ldr	r2, [pc, #348]	; (80037fc <HAL_RCC_OscConfig+0x470>)
 800369e:	f023 0301 	bic.w	r3, r3, #1
 80036a2:	6713      	str	r3, [r2, #112]	; 0x70
 80036a4:	4b55      	ldr	r3, [pc, #340]	; (80037fc <HAL_RCC_OscConfig+0x470>)
 80036a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036a8:	4a54      	ldr	r2, [pc, #336]	; (80037fc <HAL_RCC_OscConfig+0x470>)
 80036aa:	f023 0304 	bic.w	r3, r3, #4
 80036ae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d015      	beq.n	80036e4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036b8:	f7fe fb10 	bl	8001cdc <HAL_GetTick>
 80036bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036be:	e00a      	b.n	80036d6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036c0:	f7fe fb0c 	bl	8001cdc <HAL_GetTick>
 80036c4:	4602      	mov	r2, r0
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	1ad3      	subs	r3, r2, r3
 80036ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d901      	bls.n	80036d6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80036d2:	2303      	movs	r3, #3
 80036d4:	e0cb      	b.n	800386e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036d6:	4b49      	ldr	r3, [pc, #292]	; (80037fc <HAL_RCC_OscConfig+0x470>)
 80036d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036da:	f003 0302 	and.w	r3, r3, #2
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d0ee      	beq.n	80036c0 <HAL_RCC_OscConfig+0x334>
 80036e2:	e014      	b.n	800370e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036e4:	f7fe fafa 	bl	8001cdc <HAL_GetTick>
 80036e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036ea:	e00a      	b.n	8003702 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036ec:	f7fe faf6 	bl	8001cdc <HAL_GetTick>
 80036f0:	4602      	mov	r2, r0
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d901      	bls.n	8003702 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80036fe:	2303      	movs	r3, #3
 8003700:	e0b5      	b.n	800386e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003702:	4b3e      	ldr	r3, [pc, #248]	; (80037fc <HAL_RCC_OscConfig+0x470>)
 8003704:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003706:	f003 0302 	and.w	r3, r3, #2
 800370a:	2b00      	cmp	r3, #0
 800370c:	d1ee      	bne.n	80036ec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800370e:	7dfb      	ldrb	r3, [r7, #23]
 8003710:	2b01      	cmp	r3, #1
 8003712:	d105      	bne.n	8003720 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003714:	4b39      	ldr	r3, [pc, #228]	; (80037fc <HAL_RCC_OscConfig+0x470>)
 8003716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003718:	4a38      	ldr	r2, [pc, #224]	; (80037fc <HAL_RCC_OscConfig+0x470>)
 800371a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800371e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	699b      	ldr	r3, [r3, #24]
 8003724:	2b00      	cmp	r3, #0
 8003726:	f000 80a1 	beq.w	800386c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800372a:	4b34      	ldr	r3, [pc, #208]	; (80037fc <HAL_RCC_OscConfig+0x470>)
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	f003 030c 	and.w	r3, r3, #12
 8003732:	2b08      	cmp	r3, #8
 8003734:	d05c      	beq.n	80037f0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	699b      	ldr	r3, [r3, #24]
 800373a:	2b02      	cmp	r3, #2
 800373c:	d141      	bne.n	80037c2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800373e:	4b31      	ldr	r3, [pc, #196]	; (8003804 <HAL_RCC_OscConfig+0x478>)
 8003740:	2200      	movs	r2, #0
 8003742:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003744:	f7fe faca 	bl	8001cdc <HAL_GetTick>
 8003748:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800374a:	e008      	b.n	800375e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800374c:	f7fe fac6 	bl	8001cdc <HAL_GetTick>
 8003750:	4602      	mov	r2, r0
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	2b02      	cmp	r3, #2
 8003758:	d901      	bls.n	800375e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800375a:	2303      	movs	r3, #3
 800375c:	e087      	b.n	800386e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800375e:	4b27      	ldr	r3, [pc, #156]	; (80037fc <HAL_RCC_OscConfig+0x470>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003766:	2b00      	cmp	r3, #0
 8003768:	d1f0      	bne.n	800374c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	69da      	ldr	r2, [r3, #28]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6a1b      	ldr	r3, [r3, #32]
 8003772:	431a      	orrs	r2, r3
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003778:	019b      	lsls	r3, r3, #6
 800377a:	431a      	orrs	r2, r3
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003780:	085b      	lsrs	r3, r3, #1
 8003782:	3b01      	subs	r3, #1
 8003784:	041b      	lsls	r3, r3, #16
 8003786:	431a      	orrs	r2, r3
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800378c:	061b      	lsls	r3, r3, #24
 800378e:	491b      	ldr	r1, [pc, #108]	; (80037fc <HAL_RCC_OscConfig+0x470>)
 8003790:	4313      	orrs	r3, r2
 8003792:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003794:	4b1b      	ldr	r3, [pc, #108]	; (8003804 <HAL_RCC_OscConfig+0x478>)
 8003796:	2201      	movs	r2, #1
 8003798:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800379a:	f7fe fa9f 	bl	8001cdc <HAL_GetTick>
 800379e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037a0:	e008      	b.n	80037b4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037a2:	f7fe fa9b 	bl	8001cdc <HAL_GetTick>
 80037a6:	4602      	mov	r2, r0
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	1ad3      	subs	r3, r2, r3
 80037ac:	2b02      	cmp	r3, #2
 80037ae:	d901      	bls.n	80037b4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80037b0:	2303      	movs	r3, #3
 80037b2:	e05c      	b.n	800386e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037b4:	4b11      	ldr	r3, [pc, #68]	; (80037fc <HAL_RCC_OscConfig+0x470>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d0f0      	beq.n	80037a2 <HAL_RCC_OscConfig+0x416>
 80037c0:	e054      	b.n	800386c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037c2:	4b10      	ldr	r3, [pc, #64]	; (8003804 <HAL_RCC_OscConfig+0x478>)
 80037c4:	2200      	movs	r2, #0
 80037c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037c8:	f7fe fa88 	bl	8001cdc <HAL_GetTick>
 80037cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037ce:	e008      	b.n	80037e2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037d0:	f7fe fa84 	bl	8001cdc <HAL_GetTick>
 80037d4:	4602      	mov	r2, r0
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	1ad3      	subs	r3, r2, r3
 80037da:	2b02      	cmp	r3, #2
 80037dc:	d901      	bls.n	80037e2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80037de:	2303      	movs	r3, #3
 80037e0:	e045      	b.n	800386e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037e2:	4b06      	ldr	r3, [pc, #24]	; (80037fc <HAL_RCC_OscConfig+0x470>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d1f0      	bne.n	80037d0 <HAL_RCC_OscConfig+0x444>
 80037ee:	e03d      	b.n	800386c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	699b      	ldr	r3, [r3, #24]
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d107      	bne.n	8003808 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	e038      	b.n	800386e <HAL_RCC_OscConfig+0x4e2>
 80037fc:	40023800 	.word	0x40023800
 8003800:	40007000 	.word	0x40007000
 8003804:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003808:	4b1b      	ldr	r3, [pc, #108]	; (8003878 <HAL_RCC_OscConfig+0x4ec>)
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	699b      	ldr	r3, [r3, #24]
 8003812:	2b01      	cmp	r3, #1
 8003814:	d028      	beq.n	8003868 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003820:	429a      	cmp	r2, r3
 8003822:	d121      	bne.n	8003868 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800382e:	429a      	cmp	r2, r3
 8003830:	d11a      	bne.n	8003868 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003832:	68fa      	ldr	r2, [r7, #12]
 8003834:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003838:	4013      	ands	r3, r2
 800383a:	687a      	ldr	r2, [r7, #4]
 800383c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800383e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003840:	4293      	cmp	r3, r2
 8003842:	d111      	bne.n	8003868 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800384e:	085b      	lsrs	r3, r3, #1
 8003850:	3b01      	subs	r3, #1
 8003852:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003854:	429a      	cmp	r2, r3
 8003856:	d107      	bne.n	8003868 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003862:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003864:	429a      	cmp	r2, r3
 8003866:	d001      	beq.n	800386c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	e000      	b.n	800386e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800386c:	2300      	movs	r3, #0
}
 800386e:	4618      	mov	r0, r3
 8003870:	3718      	adds	r7, #24
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}
 8003876:	bf00      	nop
 8003878:	40023800 	.word	0x40023800

0800387c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b084      	sub	sp, #16
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
 8003884:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d101      	bne.n	8003890 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800388c:	2301      	movs	r3, #1
 800388e:	e0cc      	b.n	8003a2a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003890:	4b68      	ldr	r3, [pc, #416]	; (8003a34 <HAL_RCC_ClockConfig+0x1b8>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 030f 	and.w	r3, r3, #15
 8003898:	683a      	ldr	r2, [r7, #0]
 800389a:	429a      	cmp	r2, r3
 800389c:	d90c      	bls.n	80038b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800389e:	4b65      	ldr	r3, [pc, #404]	; (8003a34 <HAL_RCC_ClockConfig+0x1b8>)
 80038a0:	683a      	ldr	r2, [r7, #0]
 80038a2:	b2d2      	uxtb	r2, r2
 80038a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038a6:	4b63      	ldr	r3, [pc, #396]	; (8003a34 <HAL_RCC_ClockConfig+0x1b8>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 030f 	and.w	r3, r3, #15
 80038ae:	683a      	ldr	r2, [r7, #0]
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d001      	beq.n	80038b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	e0b8      	b.n	8003a2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 0302 	and.w	r3, r3, #2
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d020      	beq.n	8003906 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 0304 	and.w	r3, r3, #4
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d005      	beq.n	80038dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038d0:	4b59      	ldr	r3, [pc, #356]	; (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	4a58      	ldr	r2, [pc, #352]	; (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 80038d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80038da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 0308 	and.w	r3, r3, #8
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d005      	beq.n	80038f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038e8:	4b53      	ldr	r3, [pc, #332]	; (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	4a52      	ldr	r2, [pc, #328]	; (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 80038ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80038f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038f4:	4b50      	ldr	r3, [pc, #320]	; (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	494d      	ldr	r1, [pc, #308]	; (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 8003902:	4313      	orrs	r3, r2
 8003904:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 0301 	and.w	r3, r3, #1
 800390e:	2b00      	cmp	r3, #0
 8003910:	d044      	beq.n	800399c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	2b01      	cmp	r3, #1
 8003918:	d107      	bne.n	800392a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800391a:	4b47      	ldr	r3, [pc, #284]	; (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003922:	2b00      	cmp	r3, #0
 8003924:	d119      	bne.n	800395a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e07f      	b.n	8003a2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	2b02      	cmp	r3, #2
 8003930:	d003      	beq.n	800393a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003936:	2b03      	cmp	r3, #3
 8003938:	d107      	bne.n	800394a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800393a:	4b3f      	ldr	r3, [pc, #252]	; (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003942:	2b00      	cmp	r3, #0
 8003944:	d109      	bne.n	800395a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	e06f      	b.n	8003a2a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800394a:	4b3b      	ldr	r3, [pc, #236]	; (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 0302 	and.w	r3, r3, #2
 8003952:	2b00      	cmp	r3, #0
 8003954:	d101      	bne.n	800395a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	e067      	b.n	8003a2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800395a:	4b37      	ldr	r3, [pc, #220]	; (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	f023 0203 	bic.w	r2, r3, #3
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	4934      	ldr	r1, [pc, #208]	; (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 8003968:	4313      	orrs	r3, r2
 800396a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800396c:	f7fe f9b6 	bl	8001cdc <HAL_GetTick>
 8003970:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003972:	e00a      	b.n	800398a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003974:	f7fe f9b2 	bl	8001cdc <HAL_GetTick>
 8003978:	4602      	mov	r2, r0
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	1ad3      	subs	r3, r2, r3
 800397e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003982:	4293      	cmp	r3, r2
 8003984:	d901      	bls.n	800398a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003986:	2303      	movs	r3, #3
 8003988:	e04f      	b.n	8003a2a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800398a:	4b2b      	ldr	r3, [pc, #172]	; (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	f003 020c 	and.w	r2, r3, #12
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	429a      	cmp	r2, r3
 800399a:	d1eb      	bne.n	8003974 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800399c:	4b25      	ldr	r3, [pc, #148]	; (8003a34 <HAL_RCC_ClockConfig+0x1b8>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 030f 	and.w	r3, r3, #15
 80039a4:	683a      	ldr	r2, [r7, #0]
 80039a6:	429a      	cmp	r2, r3
 80039a8:	d20c      	bcs.n	80039c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039aa:	4b22      	ldr	r3, [pc, #136]	; (8003a34 <HAL_RCC_ClockConfig+0x1b8>)
 80039ac:	683a      	ldr	r2, [r7, #0]
 80039ae:	b2d2      	uxtb	r2, r2
 80039b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039b2:	4b20      	ldr	r3, [pc, #128]	; (8003a34 <HAL_RCC_ClockConfig+0x1b8>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 030f 	and.w	r3, r3, #15
 80039ba:	683a      	ldr	r2, [r7, #0]
 80039bc:	429a      	cmp	r2, r3
 80039be:	d001      	beq.n	80039c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	e032      	b.n	8003a2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 0304 	and.w	r3, r3, #4
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d008      	beq.n	80039e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039d0:	4b19      	ldr	r3, [pc, #100]	; (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	68db      	ldr	r3, [r3, #12]
 80039dc:	4916      	ldr	r1, [pc, #88]	; (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 80039de:	4313      	orrs	r3, r2
 80039e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 0308 	and.w	r3, r3, #8
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d009      	beq.n	8003a02 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039ee:	4b12      	ldr	r3, [pc, #72]	; (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	691b      	ldr	r3, [r3, #16]
 80039fa:	00db      	lsls	r3, r3, #3
 80039fc:	490e      	ldr	r1, [pc, #56]	; (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 80039fe:	4313      	orrs	r3, r2
 8003a00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a02:	f000 f821 	bl	8003a48 <HAL_RCC_GetSysClockFreq>
 8003a06:	4602      	mov	r2, r0
 8003a08:	4b0b      	ldr	r3, [pc, #44]	; (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	091b      	lsrs	r3, r3, #4
 8003a0e:	f003 030f 	and.w	r3, r3, #15
 8003a12:	490a      	ldr	r1, [pc, #40]	; (8003a3c <HAL_RCC_ClockConfig+0x1c0>)
 8003a14:	5ccb      	ldrb	r3, [r1, r3]
 8003a16:	fa22 f303 	lsr.w	r3, r2, r3
 8003a1a:	4a09      	ldr	r2, [pc, #36]	; (8003a40 <HAL_RCC_ClockConfig+0x1c4>)
 8003a1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003a1e:	4b09      	ldr	r3, [pc, #36]	; (8003a44 <HAL_RCC_ClockConfig+0x1c8>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4618      	mov	r0, r3
 8003a24:	f7fe f916 	bl	8001c54 <HAL_InitTick>

  return HAL_OK;
 8003a28:	2300      	movs	r3, #0
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3710      	adds	r7, #16
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	bf00      	nop
 8003a34:	40023c00 	.word	0x40023c00
 8003a38:	40023800 	.word	0x40023800
 8003a3c:	080052d8 	.word	0x080052d8
 8003a40:	20000010 	.word	0x20000010
 8003a44:	20000014 	.word	0x20000014

08003a48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a4c:	b094      	sub	sp, #80	; 0x50
 8003a4e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003a50:	2300      	movs	r3, #0
 8003a52:	647b      	str	r3, [r7, #68]	; 0x44
 8003a54:	2300      	movs	r3, #0
 8003a56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a58:	2300      	movs	r3, #0
 8003a5a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a60:	4b79      	ldr	r3, [pc, #484]	; (8003c48 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	f003 030c 	and.w	r3, r3, #12
 8003a68:	2b08      	cmp	r3, #8
 8003a6a:	d00d      	beq.n	8003a88 <HAL_RCC_GetSysClockFreq+0x40>
 8003a6c:	2b08      	cmp	r3, #8
 8003a6e:	f200 80e1 	bhi.w	8003c34 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d002      	beq.n	8003a7c <HAL_RCC_GetSysClockFreq+0x34>
 8003a76:	2b04      	cmp	r3, #4
 8003a78:	d003      	beq.n	8003a82 <HAL_RCC_GetSysClockFreq+0x3a>
 8003a7a:	e0db      	b.n	8003c34 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a7c:	4b73      	ldr	r3, [pc, #460]	; (8003c4c <HAL_RCC_GetSysClockFreq+0x204>)
 8003a7e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003a80:	e0db      	b.n	8003c3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a82:	4b73      	ldr	r3, [pc, #460]	; (8003c50 <HAL_RCC_GetSysClockFreq+0x208>)
 8003a84:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003a86:	e0d8      	b.n	8003c3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a88:	4b6f      	ldr	r3, [pc, #444]	; (8003c48 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a90:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a92:	4b6d      	ldr	r3, [pc, #436]	; (8003c48 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d063      	beq.n	8003b66 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a9e:	4b6a      	ldr	r3, [pc, #424]	; (8003c48 <HAL_RCC_GetSysClockFreq+0x200>)
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	099b      	lsrs	r3, r3, #6
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	63bb      	str	r3, [r7, #56]	; 0x38
 8003aa8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ab0:	633b      	str	r3, [r7, #48]	; 0x30
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	637b      	str	r3, [r7, #52]	; 0x34
 8003ab6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003aba:	4622      	mov	r2, r4
 8003abc:	462b      	mov	r3, r5
 8003abe:	f04f 0000 	mov.w	r0, #0
 8003ac2:	f04f 0100 	mov.w	r1, #0
 8003ac6:	0159      	lsls	r1, r3, #5
 8003ac8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003acc:	0150      	lsls	r0, r2, #5
 8003ace:	4602      	mov	r2, r0
 8003ad0:	460b      	mov	r3, r1
 8003ad2:	4621      	mov	r1, r4
 8003ad4:	1a51      	subs	r1, r2, r1
 8003ad6:	6139      	str	r1, [r7, #16]
 8003ad8:	4629      	mov	r1, r5
 8003ada:	eb63 0301 	sbc.w	r3, r3, r1
 8003ade:	617b      	str	r3, [r7, #20]
 8003ae0:	f04f 0200 	mov.w	r2, #0
 8003ae4:	f04f 0300 	mov.w	r3, #0
 8003ae8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003aec:	4659      	mov	r1, fp
 8003aee:	018b      	lsls	r3, r1, #6
 8003af0:	4651      	mov	r1, sl
 8003af2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003af6:	4651      	mov	r1, sl
 8003af8:	018a      	lsls	r2, r1, #6
 8003afa:	4651      	mov	r1, sl
 8003afc:	ebb2 0801 	subs.w	r8, r2, r1
 8003b00:	4659      	mov	r1, fp
 8003b02:	eb63 0901 	sbc.w	r9, r3, r1
 8003b06:	f04f 0200 	mov.w	r2, #0
 8003b0a:	f04f 0300 	mov.w	r3, #0
 8003b0e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b12:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b16:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b1a:	4690      	mov	r8, r2
 8003b1c:	4699      	mov	r9, r3
 8003b1e:	4623      	mov	r3, r4
 8003b20:	eb18 0303 	adds.w	r3, r8, r3
 8003b24:	60bb      	str	r3, [r7, #8]
 8003b26:	462b      	mov	r3, r5
 8003b28:	eb49 0303 	adc.w	r3, r9, r3
 8003b2c:	60fb      	str	r3, [r7, #12]
 8003b2e:	f04f 0200 	mov.w	r2, #0
 8003b32:	f04f 0300 	mov.w	r3, #0
 8003b36:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003b3a:	4629      	mov	r1, r5
 8003b3c:	024b      	lsls	r3, r1, #9
 8003b3e:	4621      	mov	r1, r4
 8003b40:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003b44:	4621      	mov	r1, r4
 8003b46:	024a      	lsls	r2, r1, #9
 8003b48:	4610      	mov	r0, r2
 8003b4a:	4619      	mov	r1, r3
 8003b4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b4e:	2200      	movs	r2, #0
 8003b50:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b52:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003b54:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003b58:	f7fc fb9a 	bl	8000290 <__aeabi_uldivmod>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	460b      	mov	r3, r1
 8003b60:	4613      	mov	r3, r2
 8003b62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b64:	e058      	b.n	8003c18 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b66:	4b38      	ldr	r3, [pc, #224]	; (8003c48 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	099b      	lsrs	r3, r3, #6
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	4618      	mov	r0, r3
 8003b70:	4611      	mov	r1, r2
 8003b72:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003b76:	623b      	str	r3, [r7, #32]
 8003b78:	2300      	movs	r3, #0
 8003b7a:	627b      	str	r3, [r7, #36]	; 0x24
 8003b7c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003b80:	4642      	mov	r2, r8
 8003b82:	464b      	mov	r3, r9
 8003b84:	f04f 0000 	mov.w	r0, #0
 8003b88:	f04f 0100 	mov.w	r1, #0
 8003b8c:	0159      	lsls	r1, r3, #5
 8003b8e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b92:	0150      	lsls	r0, r2, #5
 8003b94:	4602      	mov	r2, r0
 8003b96:	460b      	mov	r3, r1
 8003b98:	4641      	mov	r1, r8
 8003b9a:	ebb2 0a01 	subs.w	sl, r2, r1
 8003b9e:	4649      	mov	r1, r9
 8003ba0:	eb63 0b01 	sbc.w	fp, r3, r1
 8003ba4:	f04f 0200 	mov.w	r2, #0
 8003ba8:	f04f 0300 	mov.w	r3, #0
 8003bac:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003bb0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003bb4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003bb8:	ebb2 040a 	subs.w	r4, r2, sl
 8003bbc:	eb63 050b 	sbc.w	r5, r3, fp
 8003bc0:	f04f 0200 	mov.w	r2, #0
 8003bc4:	f04f 0300 	mov.w	r3, #0
 8003bc8:	00eb      	lsls	r3, r5, #3
 8003bca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003bce:	00e2      	lsls	r2, r4, #3
 8003bd0:	4614      	mov	r4, r2
 8003bd2:	461d      	mov	r5, r3
 8003bd4:	4643      	mov	r3, r8
 8003bd6:	18e3      	adds	r3, r4, r3
 8003bd8:	603b      	str	r3, [r7, #0]
 8003bda:	464b      	mov	r3, r9
 8003bdc:	eb45 0303 	adc.w	r3, r5, r3
 8003be0:	607b      	str	r3, [r7, #4]
 8003be2:	f04f 0200 	mov.w	r2, #0
 8003be6:	f04f 0300 	mov.w	r3, #0
 8003bea:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003bee:	4629      	mov	r1, r5
 8003bf0:	028b      	lsls	r3, r1, #10
 8003bf2:	4621      	mov	r1, r4
 8003bf4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003bf8:	4621      	mov	r1, r4
 8003bfa:	028a      	lsls	r2, r1, #10
 8003bfc:	4610      	mov	r0, r2
 8003bfe:	4619      	mov	r1, r3
 8003c00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c02:	2200      	movs	r2, #0
 8003c04:	61bb      	str	r3, [r7, #24]
 8003c06:	61fa      	str	r2, [r7, #28]
 8003c08:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c0c:	f7fc fb40 	bl	8000290 <__aeabi_uldivmod>
 8003c10:	4602      	mov	r2, r0
 8003c12:	460b      	mov	r3, r1
 8003c14:	4613      	mov	r3, r2
 8003c16:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003c18:	4b0b      	ldr	r3, [pc, #44]	; (8003c48 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	0c1b      	lsrs	r3, r3, #16
 8003c1e:	f003 0303 	and.w	r3, r3, #3
 8003c22:	3301      	adds	r3, #1
 8003c24:	005b      	lsls	r3, r3, #1
 8003c26:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003c28:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003c2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c30:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003c32:	e002      	b.n	8003c3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c34:	4b05      	ldr	r3, [pc, #20]	; (8003c4c <HAL_RCC_GetSysClockFreq+0x204>)
 8003c36:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003c38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	3750      	adds	r7, #80	; 0x50
 8003c40:	46bd      	mov	sp, r7
 8003c42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c46:	bf00      	nop
 8003c48:	40023800 	.word	0x40023800
 8003c4c:	00f42400 	.word	0x00f42400
 8003c50:	007a1200 	.word	0x007a1200

08003c54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c54:	b480      	push	{r7}
 8003c56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c58:	4b03      	ldr	r3, [pc, #12]	; (8003c68 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr
 8003c66:	bf00      	nop
 8003c68:	20000010 	.word	0x20000010

08003c6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003c70:	f7ff fff0 	bl	8003c54 <HAL_RCC_GetHCLKFreq>
 8003c74:	4602      	mov	r2, r0
 8003c76:	4b05      	ldr	r3, [pc, #20]	; (8003c8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	0a9b      	lsrs	r3, r3, #10
 8003c7c:	f003 0307 	and.w	r3, r3, #7
 8003c80:	4903      	ldr	r1, [pc, #12]	; (8003c90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c82:	5ccb      	ldrb	r3, [r1, r3]
 8003c84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	bd80      	pop	{r7, pc}
 8003c8c:	40023800 	.word	0x40023800
 8003c90:	080052e8 	.word	0x080052e8

08003c94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003c98:	f7ff ffdc 	bl	8003c54 <HAL_RCC_GetHCLKFreq>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	4b05      	ldr	r3, [pc, #20]	; (8003cb4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	0b5b      	lsrs	r3, r3, #13
 8003ca4:	f003 0307 	and.w	r3, r3, #7
 8003ca8:	4903      	ldr	r1, [pc, #12]	; (8003cb8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003caa:	5ccb      	ldrb	r3, [r1, r3]
 8003cac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	bd80      	pop	{r7, pc}
 8003cb4:	40023800 	.word	0x40023800
 8003cb8:	080052e8 	.word	0x080052e8

08003cbc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b082      	sub	sp, #8
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d101      	bne.n	8003cce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e03f      	b.n	8003d4e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cd4:	b2db      	uxtb	r3, r3
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d106      	bne.n	8003ce8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f7ff faa8 	bl	8003238 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2224      	movs	r2, #36	; 0x24
 8003cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	68da      	ldr	r2, [r3, #12]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003cfe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d00:	6878      	ldr	r0, [r7, #4]
 8003d02:	f000 f929 	bl	8003f58 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	691a      	ldr	r2, [r3, #16]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d14:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	695a      	ldr	r2, [r3, #20]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d24:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	68da      	ldr	r2, [r3, #12]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d34:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2220      	movs	r2, #32
 8003d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2220      	movs	r2, #32
 8003d48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003d4c:	2300      	movs	r3, #0
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3708      	adds	r7, #8
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}

08003d56 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d56:	b580      	push	{r7, lr}
 8003d58:	b08a      	sub	sp, #40	; 0x28
 8003d5a:	af02      	add	r7, sp, #8
 8003d5c:	60f8      	str	r0, [r7, #12]
 8003d5e:	60b9      	str	r1, [r7, #8]
 8003d60:	603b      	str	r3, [r7, #0]
 8003d62:	4613      	mov	r3, r2
 8003d64:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003d66:	2300      	movs	r3, #0
 8003d68:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d70:	b2db      	uxtb	r3, r3
 8003d72:	2b20      	cmp	r3, #32
 8003d74:	d17c      	bne.n	8003e70 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d002      	beq.n	8003d82 <HAL_UART_Transmit+0x2c>
 8003d7c:	88fb      	ldrh	r3, [r7, #6]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d101      	bne.n	8003d86 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	e075      	b.n	8003e72 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d101      	bne.n	8003d94 <HAL_UART_Transmit+0x3e>
 8003d90:	2302      	movs	r3, #2
 8003d92:	e06e      	b.n	8003e72 <HAL_UART_Transmit+0x11c>
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2201      	movs	r2, #1
 8003d98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	2221      	movs	r2, #33	; 0x21
 8003da6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003daa:	f7fd ff97 	bl	8001cdc <HAL_GetTick>
 8003dae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	88fa      	ldrh	r2, [r7, #6]
 8003db4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	88fa      	ldrh	r2, [r7, #6]
 8003dba:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dc4:	d108      	bne.n	8003dd8 <HAL_UART_Transmit+0x82>
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	691b      	ldr	r3, [r3, #16]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d104      	bne.n	8003dd8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	61bb      	str	r3, [r7, #24]
 8003dd6:	e003      	b.n	8003de0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2200      	movs	r2, #0
 8003de4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003de8:	e02a      	b.n	8003e40 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	9300      	str	r3, [sp, #0]
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	2200      	movs	r2, #0
 8003df2:	2180      	movs	r1, #128	; 0x80
 8003df4:	68f8      	ldr	r0, [r7, #12]
 8003df6:	f000 f840 	bl	8003e7a <UART_WaitOnFlagUntilTimeout>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d001      	beq.n	8003e04 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003e00:	2303      	movs	r3, #3
 8003e02:	e036      	b.n	8003e72 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003e04:	69fb      	ldr	r3, [r7, #28]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d10b      	bne.n	8003e22 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e0a:	69bb      	ldr	r3, [r7, #24]
 8003e0c:	881b      	ldrh	r3, [r3, #0]
 8003e0e:	461a      	mov	r2, r3
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e18:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003e1a:	69bb      	ldr	r3, [r7, #24]
 8003e1c:	3302      	adds	r3, #2
 8003e1e:	61bb      	str	r3, [r7, #24]
 8003e20:	e007      	b.n	8003e32 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e22:	69fb      	ldr	r3, [r7, #28]
 8003e24:	781a      	ldrb	r2, [r3, #0]
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003e2c:	69fb      	ldr	r3, [r7, #28]
 8003e2e:	3301      	adds	r3, #1
 8003e30:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e36:	b29b      	uxth	r3, r3
 8003e38:	3b01      	subs	r3, #1
 8003e3a:	b29a      	uxth	r2, r3
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e44:	b29b      	uxth	r3, r3
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d1cf      	bne.n	8003dea <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	9300      	str	r3, [sp, #0]
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	2200      	movs	r2, #0
 8003e52:	2140      	movs	r1, #64	; 0x40
 8003e54:	68f8      	ldr	r0, [r7, #12]
 8003e56:	f000 f810 	bl	8003e7a <UART_WaitOnFlagUntilTimeout>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d001      	beq.n	8003e64 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003e60:	2303      	movs	r3, #3
 8003e62:	e006      	b.n	8003e72 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2220      	movs	r2, #32
 8003e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	e000      	b.n	8003e72 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003e70:	2302      	movs	r3, #2
  }
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	3720      	adds	r7, #32
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}

08003e7a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003e7a:	b580      	push	{r7, lr}
 8003e7c:	b090      	sub	sp, #64	; 0x40
 8003e7e:	af00      	add	r7, sp, #0
 8003e80:	60f8      	str	r0, [r7, #12]
 8003e82:	60b9      	str	r1, [r7, #8]
 8003e84:	603b      	str	r3, [r7, #0]
 8003e86:	4613      	mov	r3, r2
 8003e88:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e8a:	e050      	b.n	8003f2e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e92:	d04c      	beq.n	8003f2e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003e94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d007      	beq.n	8003eaa <UART_WaitOnFlagUntilTimeout+0x30>
 8003e9a:	f7fd ff1f 	bl	8001cdc <HAL_GetTick>
 8003e9e:	4602      	mov	r2, r0
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	1ad3      	subs	r3, r2, r3
 8003ea4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ea6:	429a      	cmp	r2, r3
 8003ea8:	d241      	bcs.n	8003f2e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	330c      	adds	r3, #12
 8003eb0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eb4:	e853 3f00 	ldrex	r3, [r3]
 8003eb8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ebc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003ec0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	330c      	adds	r3, #12
 8003ec8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003eca:	637a      	str	r2, [r7, #52]	; 0x34
 8003ecc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ece:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003ed0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ed2:	e841 2300 	strex	r3, r2, [r1]
 8003ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d1e5      	bne.n	8003eaa <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	3314      	adds	r3, #20
 8003ee4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	e853 3f00 	ldrex	r3, [r3]
 8003eec:	613b      	str	r3, [r7, #16]
   return(result);
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	f023 0301 	bic.w	r3, r3, #1
 8003ef4:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	3314      	adds	r3, #20
 8003efc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003efe:	623a      	str	r2, [r7, #32]
 8003f00:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f02:	69f9      	ldr	r1, [r7, #28]
 8003f04:	6a3a      	ldr	r2, [r7, #32]
 8003f06:	e841 2300 	strex	r3, r2, [r1]
 8003f0a:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f0c:	69bb      	ldr	r3, [r7, #24]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d1e5      	bne.n	8003ede <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	2220      	movs	r2, #32
 8003f16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2220      	movs	r2, #32
 8003f1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2200      	movs	r2, #0
 8003f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003f2a:	2303      	movs	r3, #3
 8003f2c:	e00f      	b.n	8003f4e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	4013      	ands	r3, r2
 8003f38:	68ba      	ldr	r2, [r7, #8]
 8003f3a:	429a      	cmp	r2, r3
 8003f3c:	bf0c      	ite	eq
 8003f3e:	2301      	moveq	r3, #1
 8003f40:	2300      	movne	r3, #0
 8003f42:	b2db      	uxtb	r3, r3
 8003f44:	461a      	mov	r2, r3
 8003f46:	79fb      	ldrb	r3, [r7, #7]
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	d09f      	beq.n	8003e8c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003f4c:	2300      	movs	r3, #0
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	3740      	adds	r7, #64	; 0x40
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}
	...

08003f58 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f5c:	b0c0      	sub	sp, #256	; 0x100
 8003f5e:	af00      	add	r7, sp, #0
 8003f60:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	691b      	ldr	r3, [r3, #16]
 8003f6c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003f70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f74:	68d9      	ldr	r1, [r3, #12]
 8003f76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	ea40 0301 	orr.w	r3, r0, r1
 8003f80:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003f82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f86:	689a      	ldr	r2, [r3, #8]
 8003f88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f8c:	691b      	ldr	r3, [r3, #16]
 8003f8e:	431a      	orrs	r2, r3
 8003f90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f94:	695b      	ldr	r3, [r3, #20]
 8003f96:	431a      	orrs	r2, r3
 8003f98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f9c:	69db      	ldr	r3, [r3, #28]
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003fa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	68db      	ldr	r3, [r3, #12]
 8003fac:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003fb0:	f021 010c 	bic.w	r1, r1, #12
 8003fb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fb8:	681a      	ldr	r2, [r3, #0]
 8003fba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003fbe:	430b      	orrs	r3, r1
 8003fc0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003fc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	695b      	ldr	r3, [r3, #20]
 8003fca:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003fce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fd2:	6999      	ldr	r1, [r3, #24]
 8003fd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	ea40 0301 	orr.w	r3, r0, r1
 8003fde:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003fe0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	4b8f      	ldr	r3, [pc, #572]	; (8004224 <UART_SetConfig+0x2cc>)
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	d005      	beq.n	8003ff8 <UART_SetConfig+0xa0>
 8003fec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ff0:	681a      	ldr	r2, [r3, #0]
 8003ff2:	4b8d      	ldr	r3, [pc, #564]	; (8004228 <UART_SetConfig+0x2d0>)
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	d104      	bne.n	8004002 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003ff8:	f7ff fe4c 	bl	8003c94 <HAL_RCC_GetPCLK2Freq>
 8003ffc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004000:	e003      	b.n	800400a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004002:	f7ff fe33 	bl	8003c6c <HAL_RCC_GetPCLK1Freq>
 8004006:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800400a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800400e:	69db      	ldr	r3, [r3, #28]
 8004010:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004014:	f040 810c 	bne.w	8004230 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004018:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800401c:	2200      	movs	r2, #0
 800401e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004022:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004026:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800402a:	4622      	mov	r2, r4
 800402c:	462b      	mov	r3, r5
 800402e:	1891      	adds	r1, r2, r2
 8004030:	65b9      	str	r1, [r7, #88]	; 0x58
 8004032:	415b      	adcs	r3, r3
 8004034:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004036:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800403a:	4621      	mov	r1, r4
 800403c:	eb12 0801 	adds.w	r8, r2, r1
 8004040:	4629      	mov	r1, r5
 8004042:	eb43 0901 	adc.w	r9, r3, r1
 8004046:	f04f 0200 	mov.w	r2, #0
 800404a:	f04f 0300 	mov.w	r3, #0
 800404e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004052:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004056:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800405a:	4690      	mov	r8, r2
 800405c:	4699      	mov	r9, r3
 800405e:	4623      	mov	r3, r4
 8004060:	eb18 0303 	adds.w	r3, r8, r3
 8004064:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004068:	462b      	mov	r3, r5
 800406a:	eb49 0303 	adc.w	r3, r9, r3
 800406e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004072:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	2200      	movs	r2, #0
 800407a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800407e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004082:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004086:	460b      	mov	r3, r1
 8004088:	18db      	adds	r3, r3, r3
 800408a:	653b      	str	r3, [r7, #80]	; 0x50
 800408c:	4613      	mov	r3, r2
 800408e:	eb42 0303 	adc.w	r3, r2, r3
 8004092:	657b      	str	r3, [r7, #84]	; 0x54
 8004094:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004098:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800409c:	f7fc f8f8 	bl	8000290 <__aeabi_uldivmod>
 80040a0:	4602      	mov	r2, r0
 80040a2:	460b      	mov	r3, r1
 80040a4:	4b61      	ldr	r3, [pc, #388]	; (800422c <UART_SetConfig+0x2d4>)
 80040a6:	fba3 2302 	umull	r2, r3, r3, r2
 80040aa:	095b      	lsrs	r3, r3, #5
 80040ac:	011c      	lsls	r4, r3, #4
 80040ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80040b2:	2200      	movs	r2, #0
 80040b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80040b8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80040bc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80040c0:	4642      	mov	r2, r8
 80040c2:	464b      	mov	r3, r9
 80040c4:	1891      	adds	r1, r2, r2
 80040c6:	64b9      	str	r1, [r7, #72]	; 0x48
 80040c8:	415b      	adcs	r3, r3
 80040ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040cc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80040d0:	4641      	mov	r1, r8
 80040d2:	eb12 0a01 	adds.w	sl, r2, r1
 80040d6:	4649      	mov	r1, r9
 80040d8:	eb43 0b01 	adc.w	fp, r3, r1
 80040dc:	f04f 0200 	mov.w	r2, #0
 80040e0:	f04f 0300 	mov.w	r3, #0
 80040e4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80040e8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80040ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80040f0:	4692      	mov	sl, r2
 80040f2:	469b      	mov	fp, r3
 80040f4:	4643      	mov	r3, r8
 80040f6:	eb1a 0303 	adds.w	r3, sl, r3
 80040fa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80040fe:	464b      	mov	r3, r9
 8004100:	eb4b 0303 	adc.w	r3, fp, r3
 8004104:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004108:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	2200      	movs	r2, #0
 8004110:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004114:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004118:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800411c:	460b      	mov	r3, r1
 800411e:	18db      	adds	r3, r3, r3
 8004120:	643b      	str	r3, [r7, #64]	; 0x40
 8004122:	4613      	mov	r3, r2
 8004124:	eb42 0303 	adc.w	r3, r2, r3
 8004128:	647b      	str	r3, [r7, #68]	; 0x44
 800412a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800412e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004132:	f7fc f8ad 	bl	8000290 <__aeabi_uldivmod>
 8004136:	4602      	mov	r2, r0
 8004138:	460b      	mov	r3, r1
 800413a:	4611      	mov	r1, r2
 800413c:	4b3b      	ldr	r3, [pc, #236]	; (800422c <UART_SetConfig+0x2d4>)
 800413e:	fba3 2301 	umull	r2, r3, r3, r1
 8004142:	095b      	lsrs	r3, r3, #5
 8004144:	2264      	movs	r2, #100	; 0x64
 8004146:	fb02 f303 	mul.w	r3, r2, r3
 800414a:	1acb      	subs	r3, r1, r3
 800414c:	00db      	lsls	r3, r3, #3
 800414e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004152:	4b36      	ldr	r3, [pc, #216]	; (800422c <UART_SetConfig+0x2d4>)
 8004154:	fba3 2302 	umull	r2, r3, r3, r2
 8004158:	095b      	lsrs	r3, r3, #5
 800415a:	005b      	lsls	r3, r3, #1
 800415c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004160:	441c      	add	r4, r3
 8004162:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004166:	2200      	movs	r2, #0
 8004168:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800416c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004170:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004174:	4642      	mov	r2, r8
 8004176:	464b      	mov	r3, r9
 8004178:	1891      	adds	r1, r2, r2
 800417a:	63b9      	str	r1, [r7, #56]	; 0x38
 800417c:	415b      	adcs	r3, r3
 800417e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004180:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004184:	4641      	mov	r1, r8
 8004186:	1851      	adds	r1, r2, r1
 8004188:	6339      	str	r1, [r7, #48]	; 0x30
 800418a:	4649      	mov	r1, r9
 800418c:	414b      	adcs	r3, r1
 800418e:	637b      	str	r3, [r7, #52]	; 0x34
 8004190:	f04f 0200 	mov.w	r2, #0
 8004194:	f04f 0300 	mov.w	r3, #0
 8004198:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800419c:	4659      	mov	r1, fp
 800419e:	00cb      	lsls	r3, r1, #3
 80041a0:	4651      	mov	r1, sl
 80041a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80041a6:	4651      	mov	r1, sl
 80041a8:	00ca      	lsls	r2, r1, #3
 80041aa:	4610      	mov	r0, r2
 80041ac:	4619      	mov	r1, r3
 80041ae:	4603      	mov	r3, r0
 80041b0:	4642      	mov	r2, r8
 80041b2:	189b      	adds	r3, r3, r2
 80041b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80041b8:	464b      	mov	r3, r9
 80041ba:	460a      	mov	r2, r1
 80041bc:	eb42 0303 	adc.w	r3, r2, r3
 80041c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80041c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	2200      	movs	r2, #0
 80041cc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80041d0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80041d4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80041d8:	460b      	mov	r3, r1
 80041da:	18db      	adds	r3, r3, r3
 80041dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80041de:	4613      	mov	r3, r2
 80041e0:	eb42 0303 	adc.w	r3, r2, r3
 80041e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041e6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80041ea:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80041ee:	f7fc f84f 	bl	8000290 <__aeabi_uldivmod>
 80041f2:	4602      	mov	r2, r0
 80041f4:	460b      	mov	r3, r1
 80041f6:	4b0d      	ldr	r3, [pc, #52]	; (800422c <UART_SetConfig+0x2d4>)
 80041f8:	fba3 1302 	umull	r1, r3, r3, r2
 80041fc:	095b      	lsrs	r3, r3, #5
 80041fe:	2164      	movs	r1, #100	; 0x64
 8004200:	fb01 f303 	mul.w	r3, r1, r3
 8004204:	1ad3      	subs	r3, r2, r3
 8004206:	00db      	lsls	r3, r3, #3
 8004208:	3332      	adds	r3, #50	; 0x32
 800420a:	4a08      	ldr	r2, [pc, #32]	; (800422c <UART_SetConfig+0x2d4>)
 800420c:	fba2 2303 	umull	r2, r3, r2, r3
 8004210:	095b      	lsrs	r3, r3, #5
 8004212:	f003 0207 	and.w	r2, r3, #7
 8004216:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4422      	add	r2, r4
 800421e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004220:	e106      	b.n	8004430 <UART_SetConfig+0x4d8>
 8004222:	bf00      	nop
 8004224:	40011000 	.word	0x40011000
 8004228:	40011400 	.word	0x40011400
 800422c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004230:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004234:	2200      	movs	r2, #0
 8004236:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800423a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800423e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004242:	4642      	mov	r2, r8
 8004244:	464b      	mov	r3, r9
 8004246:	1891      	adds	r1, r2, r2
 8004248:	6239      	str	r1, [r7, #32]
 800424a:	415b      	adcs	r3, r3
 800424c:	627b      	str	r3, [r7, #36]	; 0x24
 800424e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004252:	4641      	mov	r1, r8
 8004254:	1854      	adds	r4, r2, r1
 8004256:	4649      	mov	r1, r9
 8004258:	eb43 0501 	adc.w	r5, r3, r1
 800425c:	f04f 0200 	mov.w	r2, #0
 8004260:	f04f 0300 	mov.w	r3, #0
 8004264:	00eb      	lsls	r3, r5, #3
 8004266:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800426a:	00e2      	lsls	r2, r4, #3
 800426c:	4614      	mov	r4, r2
 800426e:	461d      	mov	r5, r3
 8004270:	4643      	mov	r3, r8
 8004272:	18e3      	adds	r3, r4, r3
 8004274:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004278:	464b      	mov	r3, r9
 800427a:	eb45 0303 	adc.w	r3, r5, r3
 800427e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004282:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	2200      	movs	r2, #0
 800428a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800428e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004292:	f04f 0200 	mov.w	r2, #0
 8004296:	f04f 0300 	mov.w	r3, #0
 800429a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800429e:	4629      	mov	r1, r5
 80042a0:	008b      	lsls	r3, r1, #2
 80042a2:	4621      	mov	r1, r4
 80042a4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80042a8:	4621      	mov	r1, r4
 80042aa:	008a      	lsls	r2, r1, #2
 80042ac:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80042b0:	f7fb ffee 	bl	8000290 <__aeabi_uldivmod>
 80042b4:	4602      	mov	r2, r0
 80042b6:	460b      	mov	r3, r1
 80042b8:	4b60      	ldr	r3, [pc, #384]	; (800443c <UART_SetConfig+0x4e4>)
 80042ba:	fba3 2302 	umull	r2, r3, r3, r2
 80042be:	095b      	lsrs	r3, r3, #5
 80042c0:	011c      	lsls	r4, r3, #4
 80042c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80042c6:	2200      	movs	r2, #0
 80042c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80042cc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80042d0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80042d4:	4642      	mov	r2, r8
 80042d6:	464b      	mov	r3, r9
 80042d8:	1891      	adds	r1, r2, r2
 80042da:	61b9      	str	r1, [r7, #24]
 80042dc:	415b      	adcs	r3, r3
 80042de:	61fb      	str	r3, [r7, #28]
 80042e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80042e4:	4641      	mov	r1, r8
 80042e6:	1851      	adds	r1, r2, r1
 80042e8:	6139      	str	r1, [r7, #16]
 80042ea:	4649      	mov	r1, r9
 80042ec:	414b      	adcs	r3, r1
 80042ee:	617b      	str	r3, [r7, #20]
 80042f0:	f04f 0200 	mov.w	r2, #0
 80042f4:	f04f 0300 	mov.w	r3, #0
 80042f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80042fc:	4659      	mov	r1, fp
 80042fe:	00cb      	lsls	r3, r1, #3
 8004300:	4651      	mov	r1, sl
 8004302:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004306:	4651      	mov	r1, sl
 8004308:	00ca      	lsls	r2, r1, #3
 800430a:	4610      	mov	r0, r2
 800430c:	4619      	mov	r1, r3
 800430e:	4603      	mov	r3, r0
 8004310:	4642      	mov	r2, r8
 8004312:	189b      	adds	r3, r3, r2
 8004314:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004318:	464b      	mov	r3, r9
 800431a:	460a      	mov	r2, r1
 800431c:	eb42 0303 	adc.w	r3, r2, r3
 8004320:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004324:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	2200      	movs	r2, #0
 800432c:	67bb      	str	r3, [r7, #120]	; 0x78
 800432e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004330:	f04f 0200 	mov.w	r2, #0
 8004334:	f04f 0300 	mov.w	r3, #0
 8004338:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800433c:	4649      	mov	r1, r9
 800433e:	008b      	lsls	r3, r1, #2
 8004340:	4641      	mov	r1, r8
 8004342:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004346:	4641      	mov	r1, r8
 8004348:	008a      	lsls	r2, r1, #2
 800434a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800434e:	f7fb ff9f 	bl	8000290 <__aeabi_uldivmod>
 8004352:	4602      	mov	r2, r0
 8004354:	460b      	mov	r3, r1
 8004356:	4611      	mov	r1, r2
 8004358:	4b38      	ldr	r3, [pc, #224]	; (800443c <UART_SetConfig+0x4e4>)
 800435a:	fba3 2301 	umull	r2, r3, r3, r1
 800435e:	095b      	lsrs	r3, r3, #5
 8004360:	2264      	movs	r2, #100	; 0x64
 8004362:	fb02 f303 	mul.w	r3, r2, r3
 8004366:	1acb      	subs	r3, r1, r3
 8004368:	011b      	lsls	r3, r3, #4
 800436a:	3332      	adds	r3, #50	; 0x32
 800436c:	4a33      	ldr	r2, [pc, #204]	; (800443c <UART_SetConfig+0x4e4>)
 800436e:	fba2 2303 	umull	r2, r3, r2, r3
 8004372:	095b      	lsrs	r3, r3, #5
 8004374:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004378:	441c      	add	r4, r3
 800437a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800437e:	2200      	movs	r2, #0
 8004380:	673b      	str	r3, [r7, #112]	; 0x70
 8004382:	677a      	str	r2, [r7, #116]	; 0x74
 8004384:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004388:	4642      	mov	r2, r8
 800438a:	464b      	mov	r3, r9
 800438c:	1891      	adds	r1, r2, r2
 800438e:	60b9      	str	r1, [r7, #8]
 8004390:	415b      	adcs	r3, r3
 8004392:	60fb      	str	r3, [r7, #12]
 8004394:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004398:	4641      	mov	r1, r8
 800439a:	1851      	adds	r1, r2, r1
 800439c:	6039      	str	r1, [r7, #0]
 800439e:	4649      	mov	r1, r9
 80043a0:	414b      	adcs	r3, r1
 80043a2:	607b      	str	r3, [r7, #4]
 80043a4:	f04f 0200 	mov.w	r2, #0
 80043a8:	f04f 0300 	mov.w	r3, #0
 80043ac:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80043b0:	4659      	mov	r1, fp
 80043b2:	00cb      	lsls	r3, r1, #3
 80043b4:	4651      	mov	r1, sl
 80043b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043ba:	4651      	mov	r1, sl
 80043bc:	00ca      	lsls	r2, r1, #3
 80043be:	4610      	mov	r0, r2
 80043c0:	4619      	mov	r1, r3
 80043c2:	4603      	mov	r3, r0
 80043c4:	4642      	mov	r2, r8
 80043c6:	189b      	adds	r3, r3, r2
 80043c8:	66bb      	str	r3, [r7, #104]	; 0x68
 80043ca:	464b      	mov	r3, r9
 80043cc:	460a      	mov	r2, r1
 80043ce:	eb42 0303 	adc.w	r3, r2, r3
 80043d2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80043d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	2200      	movs	r2, #0
 80043dc:	663b      	str	r3, [r7, #96]	; 0x60
 80043de:	667a      	str	r2, [r7, #100]	; 0x64
 80043e0:	f04f 0200 	mov.w	r2, #0
 80043e4:	f04f 0300 	mov.w	r3, #0
 80043e8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80043ec:	4649      	mov	r1, r9
 80043ee:	008b      	lsls	r3, r1, #2
 80043f0:	4641      	mov	r1, r8
 80043f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80043f6:	4641      	mov	r1, r8
 80043f8:	008a      	lsls	r2, r1, #2
 80043fa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80043fe:	f7fb ff47 	bl	8000290 <__aeabi_uldivmod>
 8004402:	4602      	mov	r2, r0
 8004404:	460b      	mov	r3, r1
 8004406:	4b0d      	ldr	r3, [pc, #52]	; (800443c <UART_SetConfig+0x4e4>)
 8004408:	fba3 1302 	umull	r1, r3, r3, r2
 800440c:	095b      	lsrs	r3, r3, #5
 800440e:	2164      	movs	r1, #100	; 0x64
 8004410:	fb01 f303 	mul.w	r3, r1, r3
 8004414:	1ad3      	subs	r3, r2, r3
 8004416:	011b      	lsls	r3, r3, #4
 8004418:	3332      	adds	r3, #50	; 0x32
 800441a:	4a08      	ldr	r2, [pc, #32]	; (800443c <UART_SetConfig+0x4e4>)
 800441c:	fba2 2303 	umull	r2, r3, r2, r3
 8004420:	095b      	lsrs	r3, r3, #5
 8004422:	f003 020f 	and.w	r2, r3, #15
 8004426:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4422      	add	r2, r4
 800442e:	609a      	str	r2, [r3, #8]
}
 8004430:	bf00      	nop
 8004432:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004436:	46bd      	mov	sp, r7
 8004438:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800443c:	51eb851f 	.word	0x51eb851f

08004440 <main>:
static stDebounce swButton;
static delay_t swDelay;
delay_t ledDelay;

int main(void)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b082      	sub	sp, #8
 8004444:	af00      	add	r7, sp, #0
	HAL_Init();
 8004446:	f7fd fbe9 	bl	8001c1c <HAL_Init>

	BSP_LED_Init(LED1);
 800444a:	2000      	movs	r0, #0
 800444c:	f7fd faae 	bl	80019ac <BSP_LED_Init>
	BSP_LED_Init(LED2);
 8004450:	2001      	movs	r0, #1
 8004452:	f7fd faab 	bl	80019ac <BSP_LED_Init>
	BSP_LED_Init(LED3);
 8004456:	2002      	movs	r0, #2
 8004458:	f7fd faa8 	bl	80019ac <BSP_LED_Init>

	BSP_LED_Off(LED1);
 800445c:	2000      	movs	r0, #0
 800445e:	f7fd fb0f 	bl	8001a80 <BSP_LED_Off>
	BSP_LED_Off(LED2);
 8004462:	2001      	movs	r0, #1
 8004464:	f7fd fb0c 	bl	8001a80 <BSP_LED_Off>
	BSP_LED_Off(LED3);
 8004468:	2002      	movs	r0, #2
 800446a:	f7fd fb09 	bl	8001a80 <BSP_LED_Off>

	GPIO_Init();
 800446e:	f000 f8c5 	bl	80045fc <GPIO_Init>

	SystemClock_Config();
 8004472:	f000 f861 	bl	8004538 <SystemClock_Config>
	
	if(uartInit() != true)
 8004476:	f7fd f9c7 	bl	8001808 <uartInit>
 800447a:	4603      	mov	r3, r0
 800447c:	f083 0301 	eor.w	r3, r3, #1
 8004480:	b2db      	uxtb	r3, r3
 8004482:	2b00      	cmp	r3, #0
 8004484:	d001      	beq.n	800448a <main+0x4a>
	{
		Error_Handler();
 8004486:	f000 f8e7 	bl	8004658 <Error_Handler>
	}

	DBN_FSMinit(&swButton,  &Encoder_SW,  &swDelay);
 800448a:	4a25      	ldr	r2, [pc, #148]	; (8004520 <main+0xe0>)
 800448c:	4925      	ldr	r1, [pc, #148]	; (8004524 <main+0xe4>)
 800448e:	4826      	ldr	r0, [pc, #152]	; (8004528 <main+0xe8>)
 8004490:	f7fc fc8d 	bl	8000dae <DBN_FSMinit>

	ENC_setGPIOs(&Encoder_DT, &Encoder_CLK);
 8004494:	4925      	ldr	r1, [pc, #148]	; (800452c <main+0xec>)
 8004496:	4826      	ldr	r0, [pc, #152]	; (8004530 <main+0xf0>)
 8004498:	f7fc feb4 	bl	8001204 <ENC_setGPIOs>
	ENC_encoderInit();
 800449c:	f7fc fd8c 	bl	8000fb8 <ENC_encoderInit>

	delayInit(&ledDelay, BLINK_TIME);
 80044a0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80044a4:	4823      	ldr	r0, [pc, #140]	; (8004534 <main+0xf4>)
 80044a6:	f7fc fd41 	bl	8000f2c <delayInit>

	if(AMB_MON_Init() != true)
 80044aa:	f7fc f86f 	bl	800058c <AMB_MON_Init>
 80044ae:	4603      	mov	r3, r0
 80044b0:	f083 0301 	eor.w	r3, r3, #1
 80044b4:	b2db      	uxtb	r3, r3
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d001      	beq.n	80044be <main+0x7e>
	{
		Error_Handler();
 80044ba:	f000 f8cd 	bl	8004658 <Error_Handler>
	}

	while (1)
	{
		ENC_encoderUpdate();
 80044be:	f7fc fdd7 	bl	8001070 <ENC_encoderUpdate>
		eMovingDir _dir = ENC_getDirection();
 80044c2:	f7fc fe83 	bl	80011cc <ENC_getDirection>
 80044c6:	4603      	mov	r3, r0
 80044c8:	71fb      	strb	r3, [r7, #7]

		DBN_FSMupdate(&swButton);
 80044ca:	4817      	ldr	r0, [pc, #92]	; (8004528 <main+0xe8>)
 80044cc:	f7fc fc96 	bl	8000dfc <DBN_FSMupdate>

		AMB_MON_Update(_dir, DBN_readKey(&swButton));
 80044d0:	4815      	ldr	r0, [pc, #84]	; (8004528 <main+0xe8>)
 80044d2:	f7fc fd0b 	bl	8000eec <DBN_readKey>
 80044d6:	4603      	mov	r3, r0
 80044d8:	461a      	mov	r2, r3
 80044da:	79fb      	ldrb	r3, [r7, #7]
 80044dc:	4611      	mov	r1, r2
 80044de:	4618      	mov	r0, r3
 80044e0:	f7fc f87a 	bl	80005d8 <AMB_MON_Update>

		if (_dir == CounterCW)
 80044e4:	79fb      	ldrb	r3, [r7, #7]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d106      	bne.n	80044f8 <main+0xb8>
		{
			BSP_LED_On(LED1);
 80044ea:	2000      	movs	r0, #0
 80044ec:	f7fd faae 	bl	8001a4c <BSP_LED_On>
			BSP_LED_Off(LED3);
 80044f0:	2002      	movs	r0, #2
 80044f2:	f7fd fac5 	bl	8001a80 <BSP_LED_Off>
 80044f6:	e008      	b.n	800450a <main+0xca>
		}
		else if (_dir == CW)
 80044f8:	79fb      	ldrb	r3, [r7, #7]
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	d105      	bne.n	800450a <main+0xca>
		{
			BSP_LED_On(LED3);
 80044fe:	2002      	movs	r0, #2
 8004500:	f7fd faa4 	bl	8001a4c <BSP_LED_On>
			BSP_LED_Off(LED1);
 8004504:	2000      	movs	r0, #0
 8004506:	f7fd fabb 	bl	8001a80 <BSP_LED_Off>
		}

		if(delayRead(&ledDelay))
 800450a:	480a      	ldr	r0, [pc, #40]	; (8004534 <main+0xf4>)
 800450c:	f7fc fd25 	bl	8000f5a <delayRead>
 8004510:	4603      	mov	r3, r0
 8004512:	2b00      	cmp	r3, #0
 8004514:	d0d3      	beq.n	80044be <main+0x7e>
		{
			BSP_LED_Toggle(LED2);
 8004516:	2001      	movs	r0, #1
 8004518:	f7fd facc 	bl	8001ab4 <BSP_LED_Toggle>
	{
 800451c:	e7cf      	b.n	80044be <main+0x7e>
 800451e:	bf00      	nop
 8004520:	200001b8 	.word	0x200001b8
 8004524:	2000002c 	.word	0x2000002c
 8004528:	200001ac 	.word	0x200001ac
 800452c:	2000001c 	.word	0x2000001c
 8004530:	20000024 	.word	0x20000024
 8004534:	200001c4 	.word	0x200001c4

08004538 <SystemClock_Config>:
 *            Flash Latency(WS)              = 5
 * @param  None
 * @retval None
 */
static void SystemClock_Config(void)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b094      	sub	sp, #80	; 0x50
 800453c:	af00      	add	r7, sp, #0
	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_OscInitTypeDef RCC_OscInitStruct;

	/* Enable Power Control clock */
	__HAL_RCC_PWR_CLK_ENABLE();
 800453e:	2300      	movs	r3, #0
 8004540:	60bb      	str	r3, [r7, #8]
 8004542:	4b2c      	ldr	r3, [pc, #176]	; (80045f4 <SystemClock_Config+0xbc>)
 8004544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004546:	4a2b      	ldr	r2, [pc, #172]	; (80045f4 <SystemClock_Config+0xbc>)
 8004548:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800454c:	6413      	str	r3, [r2, #64]	; 0x40
 800454e:	4b29      	ldr	r3, [pc, #164]	; (80045f4 <SystemClock_Config+0xbc>)
 8004550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004552:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004556:	60bb      	str	r3, [r7, #8]
 8004558:	68bb      	ldr	r3, [r7, #8]

	/* The voltage scaling allows optimizing the power consumption when the device is
	   clocked below the maximum system frequency, to update the voltage scaling value
	   regarding system frequency refer to product datasheet.  */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800455a:	2300      	movs	r3, #0
 800455c:	607b      	str	r3, [r7, #4]
 800455e:	4b26      	ldr	r3, [pc, #152]	; (80045f8 <SystemClock_Config+0xc0>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a25      	ldr	r2, [pc, #148]	; (80045f8 <SystemClock_Config+0xc0>)
 8004564:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004568:	6013      	str	r3, [r2, #0]
 800456a:	4b23      	ldr	r3, [pc, #140]	; (80045f8 <SystemClock_Config+0xc0>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004572:	607b      	str	r3, [r7, #4]
 8004574:	687b      	ldr	r3, [r7, #4]

	/* Enable HSE Oscillator and activate PLL with HSE as source */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004576:	2301      	movs	r3, #1
 8004578:	60fb      	str	r3, [r7, #12]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800457a:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800457e:	613b      	str	r3, [r7, #16]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004580:	2302      	movs	r3, #2
 8004582:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004584:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004588:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLM = 8;
 800458a:	2308      	movs	r3, #8
 800458c:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLN = 360;
 800458e:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8004592:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004594:	2302      	movs	r3, #2
 8004596:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8004598:	2307      	movs	r3, #7
 800459a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800459c:	f107 030c 	add.w	r3, r7, #12
 80045a0:	4618      	mov	r0, r3
 80045a2:	f7fe fef3 	bl	800338c <HAL_RCC_OscConfig>
 80045a6:	4603      	mov	r3, r0
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d001      	beq.n	80045b0 <SystemClock_Config+0x78>
	{
		/* Initialization Error */
		Error_Handler();
 80045ac:	f000 f854 	bl	8004658 <Error_Handler>
	}

	if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80045b0:	f7fe fe9c 	bl	80032ec <HAL_PWREx_EnableOverDrive>
 80045b4:	4603      	mov	r3, r0
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d001      	beq.n	80045be <SystemClock_Config+0x86>
	{
		/* Initialization Error */
		Error_Handler();
 80045ba:	f000 f84d 	bl	8004658 <Error_Handler>
	}

	/* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
	   clocks dividers */
	RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80045be:	230f      	movs	r3, #15
 80045c0:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80045c2:	2302      	movs	r3, #2
 80045c4:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80045c6:	2300      	movs	r3, #0
 80045c8:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80045ca:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80045ce:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80045d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80045d4:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80045d6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80045da:	2105      	movs	r1, #5
 80045dc:	4618      	mov	r0, r3
 80045de:	f7ff f94d 	bl	800387c <HAL_RCC_ClockConfig>
 80045e2:	4603      	mov	r3, r0
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d001      	beq.n	80045ec <SystemClock_Config+0xb4>
	{
		/* Initialization Error */
		Error_Handler();
 80045e8:	f000 f836 	bl	8004658 <Error_Handler>
	}
}
 80045ec:	bf00      	nop
 80045ee:	3750      	adds	r7, #80	; 0x50
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}
 80045f4:	40023800 	.word	0x40023800
 80045f8:	40007000 	.word	0x40007000

080045fc <GPIO_Init>:

void GPIO_Init(void)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b086      	sub	sp, #24
 8004600:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004602:	1d3b      	adds	r3, r7, #4
 8004604:	2200      	movs	r2, #0
 8004606:	601a      	str	r2, [r3, #0]
 8004608:	605a      	str	r2, [r3, #4]
 800460a:	609a      	str	r2, [r3, #8]
 800460c:	60da      	str	r2, [r3, #12]
 800460e:	611a      	str	r2, [r3, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004610:	2300      	movs	r3, #0
 8004612:	603b      	str	r3, [r7, #0]
 8004614:	4b0e      	ldr	r3, [pc, #56]	; (8004650 <GPIO_Init+0x54>)
 8004616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004618:	4a0d      	ldr	r2, [pc, #52]	; (8004650 <GPIO_Init+0x54>)
 800461a:	f043 0304 	orr.w	r3, r3, #4
 800461e:	6313      	str	r3, [r2, #48]	; 0x30
 8004620:	4b0b      	ldr	r3, [pc, #44]	; (8004650 <GPIO_Init+0x54>)
 8004622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004624:	f003 0304 	and.w	r3, r3, #4
 8004628:	603b      	str	r3, [r7, #0]
 800462a:	683b      	ldr	r3, [r7, #0]

    GPIO_InitStruct.Pin = (GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12);
 800462c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8004630:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004632:	2300      	movs	r3, #0
 8004634:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004636:	2301      	movs	r3, #1
 8004638:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800463a:	2300      	movs	r3, #0
 800463c:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800463e:	1d3b      	adds	r3, r7, #4
 8004640:	4619      	mov	r1, r3
 8004642:	4804      	ldr	r0, [pc, #16]	; (8004654 <GPIO_Init+0x58>)
 8004644:	f7fd fc60 	bl	8001f08 <HAL_GPIO_Init>
}
 8004648:	bf00      	nop
 800464a:	3718      	adds	r7, #24
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}
 8004650:	40023800 	.word	0x40023800
 8004654:	40020800 	.word	0x40020800

08004658 <Error_Handler>:
 * @brief  This function is executed in case of error occurrence.
 * @param  None
 * @retval None
 */
static void Error_Handler(void)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	af00      	add	r7, sp, #0
	/* Turn LED2 on */
	BSP_LED_On(LED2);
 800465c:	2001      	movs	r0, #1
 800465e:	f7fd f9f5 	bl	8001a4c <BSP_LED_On>
	while (1)
 8004662:	e7fe      	b.n	8004662 <Error_Handler+0xa>

08004664 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8004664:	f8df d034 	ldr.w	sp, [pc, #52]	; 800469c <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004668:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800466a:	e003      	b.n	8004674 <LoopCopyDataInit>

0800466c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800466c:	4b0c      	ldr	r3, [pc, #48]	; (80046a0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800466e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004670:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004672:	3104      	adds	r1, #4

08004674 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004674:	480b      	ldr	r0, [pc, #44]	; (80046a4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004676:	4b0c      	ldr	r3, [pc, #48]	; (80046a8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004678:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800467a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800467c:	d3f6      	bcc.n	800466c <CopyDataInit>
  ldr  r2, =_sbss
 800467e:	4a0b      	ldr	r2, [pc, #44]	; (80046ac <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004680:	e002      	b.n	8004688 <LoopFillZerobss>

08004682 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004682:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004684:	f842 3b04 	str.w	r3, [r2], #4

08004688 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004688:	4b09      	ldr	r3, [pc, #36]	; (80046b0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800468a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800468c:	d3f9      	bcc.n	8004682 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800468e:	f7fd fa2b 	bl	8001ae8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004692:	f000 f86b 	bl	800476c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004696:	f7ff fed3 	bl	8004440 <main>
  bx  lr    
 800469a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800469c:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80046a0:	08005334 	.word	0x08005334
  ldr  r0, =_sdata
 80046a4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80046a8:	20000084 	.word	0x20000084
  ldr  r2, =_sbss
 80046ac:	20000084 	.word	0x20000084
  ldr  r3, = _ebss
 80046b0:	20000318 	.word	0x20000318

080046b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80046b4:	e7fe      	b.n	80046b4 <ADC_IRQHandler>
	...

080046b8 <sniprintf>:
 80046b8:	b40c      	push	{r2, r3}
 80046ba:	b530      	push	{r4, r5, lr}
 80046bc:	4b17      	ldr	r3, [pc, #92]	; (800471c <sniprintf+0x64>)
 80046be:	1e0c      	subs	r4, r1, #0
 80046c0:	681d      	ldr	r5, [r3, #0]
 80046c2:	b09d      	sub	sp, #116	; 0x74
 80046c4:	da08      	bge.n	80046d8 <sniprintf+0x20>
 80046c6:	238b      	movs	r3, #139	; 0x8b
 80046c8:	602b      	str	r3, [r5, #0]
 80046ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80046ce:	b01d      	add	sp, #116	; 0x74
 80046d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80046d4:	b002      	add	sp, #8
 80046d6:	4770      	bx	lr
 80046d8:	f44f 7302 	mov.w	r3, #520	; 0x208
 80046dc:	f8ad 3014 	strh.w	r3, [sp, #20]
 80046e0:	bf14      	ite	ne
 80046e2:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 80046e6:	4623      	moveq	r3, r4
 80046e8:	9304      	str	r3, [sp, #16]
 80046ea:	9307      	str	r3, [sp, #28]
 80046ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80046f0:	9002      	str	r0, [sp, #8]
 80046f2:	9006      	str	r0, [sp, #24]
 80046f4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80046f8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80046fa:	ab21      	add	r3, sp, #132	; 0x84
 80046fc:	a902      	add	r1, sp, #8
 80046fe:	4628      	mov	r0, r5
 8004700:	9301      	str	r3, [sp, #4]
 8004702:	f000 f9ab 	bl	8004a5c <_svfiprintf_r>
 8004706:	1c43      	adds	r3, r0, #1
 8004708:	bfbc      	itt	lt
 800470a:	238b      	movlt	r3, #139	; 0x8b
 800470c:	602b      	strlt	r3, [r5, #0]
 800470e:	2c00      	cmp	r4, #0
 8004710:	d0dd      	beq.n	80046ce <sniprintf+0x16>
 8004712:	9b02      	ldr	r3, [sp, #8]
 8004714:	2200      	movs	r2, #0
 8004716:	701a      	strb	r2, [r3, #0]
 8004718:	e7d9      	b.n	80046ce <sniprintf+0x16>
 800471a:	bf00      	nop
 800471c:	20000080 	.word	0x20000080

08004720 <siprintf>:
 8004720:	b40e      	push	{r1, r2, r3}
 8004722:	b500      	push	{lr}
 8004724:	b09c      	sub	sp, #112	; 0x70
 8004726:	ab1d      	add	r3, sp, #116	; 0x74
 8004728:	9002      	str	r0, [sp, #8]
 800472a:	9006      	str	r0, [sp, #24]
 800472c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004730:	4809      	ldr	r0, [pc, #36]	; (8004758 <siprintf+0x38>)
 8004732:	9107      	str	r1, [sp, #28]
 8004734:	9104      	str	r1, [sp, #16]
 8004736:	4909      	ldr	r1, [pc, #36]	; (800475c <siprintf+0x3c>)
 8004738:	f853 2b04 	ldr.w	r2, [r3], #4
 800473c:	9105      	str	r1, [sp, #20]
 800473e:	6800      	ldr	r0, [r0, #0]
 8004740:	9301      	str	r3, [sp, #4]
 8004742:	a902      	add	r1, sp, #8
 8004744:	f000 f98a 	bl	8004a5c <_svfiprintf_r>
 8004748:	9b02      	ldr	r3, [sp, #8]
 800474a:	2200      	movs	r2, #0
 800474c:	701a      	strb	r2, [r3, #0]
 800474e:	b01c      	add	sp, #112	; 0x70
 8004750:	f85d eb04 	ldr.w	lr, [sp], #4
 8004754:	b003      	add	sp, #12
 8004756:	4770      	bx	lr
 8004758:	20000080 	.word	0x20000080
 800475c:	ffff0208 	.word	0xffff0208

08004760 <__errno>:
 8004760:	4b01      	ldr	r3, [pc, #4]	; (8004768 <__errno+0x8>)
 8004762:	6818      	ldr	r0, [r3, #0]
 8004764:	4770      	bx	lr
 8004766:	bf00      	nop
 8004768:	20000080 	.word	0x20000080

0800476c <__libc_init_array>:
 800476c:	b570      	push	{r4, r5, r6, lr}
 800476e:	4d0d      	ldr	r5, [pc, #52]	; (80047a4 <__libc_init_array+0x38>)
 8004770:	4c0d      	ldr	r4, [pc, #52]	; (80047a8 <__libc_init_array+0x3c>)
 8004772:	1b64      	subs	r4, r4, r5
 8004774:	10a4      	asrs	r4, r4, #2
 8004776:	2600      	movs	r6, #0
 8004778:	42a6      	cmp	r6, r4
 800477a:	d109      	bne.n	8004790 <__libc_init_array+0x24>
 800477c:	4d0b      	ldr	r5, [pc, #44]	; (80047ac <__libc_init_array+0x40>)
 800477e:	4c0c      	ldr	r4, [pc, #48]	; (80047b0 <__libc_init_array+0x44>)
 8004780:	f000 fc6a 	bl	8005058 <_init>
 8004784:	1b64      	subs	r4, r4, r5
 8004786:	10a4      	asrs	r4, r4, #2
 8004788:	2600      	movs	r6, #0
 800478a:	42a6      	cmp	r6, r4
 800478c:	d105      	bne.n	800479a <__libc_init_array+0x2e>
 800478e:	bd70      	pop	{r4, r5, r6, pc}
 8004790:	f855 3b04 	ldr.w	r3, [r5], #4
 8004794:	4798      	blx	r3
 8004796:	3601      	adds	r6, #1
 8004798:	e7ee      	b.n	8004778 <__libc_init_array+0xc>
 800479a:	f855 3b04 	ldr.w	r3, [r5], #4
 800479e:	4798      	blx	r3
 80047a0:	3601      	adds	r6, #1
 80047a2:	e7f2      	b.n	800478a <__libc_init_array+0x1e>
 80047a4:	0800532c 	.word	0x0800532c
 80047a8:	0800532c 	.word	0x0800532c
 80047ac:	0800532c 	.word	0x0800532c
 80047b0:	08005330 	.word	0x08005330

080047b4 <__retarget_lock_acquire_recursive>:
 80047b4:	4770      	bx	lr

080047b6 <__retarget_lock_release_recursive>:
 80047b6:	4770      	bx	lr

080047b8 <_free_r>:
 80047b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80047ba:	2900      	cmp	r1, #0
 80047bc:	d044      	beq.n	8004848 <_free_r+0x90>
 80047be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80047c2:	9001      	str	r0, [sp, #4]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	f1a1 0404 	sub.w	r4, r1, #4
 80047ca:	bfb8      	it	lt
 80047cc:	18e4      	addlt	r4, r4, r3
 80047ce:	f000 f8df 	bl	8004990 <__malloc_lock>
 80047d2:	4a1e      	ldr	r2, [pc, #120]	; (800484c <_free_r+0x94>)
 80047d4:	9801      	ldr	r0, [sp, #4]
 80047d6:	6813      	ldr	r3, [r2, #0]
 80047d8:	b933      	cbnz	r3, 80047e8 <_free_r+0x30>
 80047da:	6063      	str	r3, [r4, #4]
 80047dc:	6014      	str	r4, [r2, #0]
 80047de:	b003      	add	sp, #12
 80047e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80047e4:	f000 b8da 	b.w	800499c <__malloc_unlock>
 80047e8:	42a3      	cmp	r3, r4
 80047ea:	d908      	bls.n	80047fe <_free_r+0x46>
 80047ec:	6825      	ldr	r5, [r4, #0]
 80047ee:	1961      	adds	r1, r4, r5
 80047f0:	428b      	cmp	r3, r1
 80047f2:	bf01      	itttt	eq
 80047f4:	6819      	ldreq	r1, [r3, #0]
 80047f6:	685b      	ldreq	r3, [r3, #4]
 80047f8:	1949      	addeq	r1, r1, r5
 80047fa:	6021      	streq	r1, [r4, #0]
 80047fc:	e7ed      	b.n	80047da <_free_r+0x22>
 80047fe:	461a      	mov	r2, r3
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	b10b      	cbz	r3, 8004808 <_free_r+0x50>
 8004804:	42a3      	cmp	r3, r4
 8004806:	d9fa      	bls.n	80047fe <_free_r+0x46>
 8004808:	6811      	ldr	r1, [r2, #0]
 800480a:	1855      	adds	r5, r2, r1
 800480c:	42a5      	cmp	r5, r4
 800480e:	d10b      	bne.n	8004828 <_free_r+0x70>
 8004810:	6824      	ldr	r4, [r4, #0]
 8004812:	4421      	add	r1, r4
 8004814:	1854      	adds	r4, r2, r1
 8004816:	42a3      	cmp	r3, r4
 8004818:	6011      	str	r1, [r2, #0]
 800481a:	d1e0      	bne.n	80047de <_free_r+0x26>
 800481c:	681c      	ldr	r4, [r3, #0]
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	6053      	str	r3, [r2, #4]
 8004822:	440c      	add	r4, r1
 8004824:	6014      	str	r4, [r2, #0]
 8004826:	e7da      	b.n	80047de <_free_r+0x26>
 8004828:	d902      	bls.n	8004830 <_free_r+0x78>
 800482a:	230c      	movs	r3, #12
 800482c:	6003      	str	r3, [r0, #0]
 800482e:	e7d6      	b.n	80047de <_free_r+0x26>
 8004830:	6825      	ldr	r5, [r4, #0]
 8004832:	1961      	adds	r1, r4, r5
 8004834:	428b      	cmp	r3, r1
 8004836:	bf04      	itt	eq
 8004838:	6819      	ldreq	r1, [r3, #0]
 800483a:	685b      	ldreq	r3, [r3, #4]
 800483c:	6063      	str	r3, [r4, #4]
 800483e:	bf04      	itt	eq
 8004840:	1949      	addeq	r1, r1, r5
 8004842:	6021      	streq	r1, [r4, #0]
 8004844:	6054      	str	r4, [r2, #4]
 8004846:	e7ca      	b.n	80047de <_free_r+0x26>
 8004848:	b003      	add	sp, #12
 800484a:	bd30      	pop	{r4, r5, pc}
 800484c:	20000310 	.word	0x20000310

08004850 <sbrk_aligned>:
 8004850:	b570      	push	{r4, r5, r6, lr}
 8004852:	4e0e      	ldr	r6, [pc, #56]	; (800488c <sbrk_aligned+0x3c>)
 8004854:	460c      	mov	r4, r1
 8004856:	6831      	ldr	r1, [r6, #0]
 8004858:	4605      	mov	r5, r0
 800485a:	b911      	cbnz	r1, 8004862 <sbrk_aligned+0x12>
 800485c:	f000 fba6 	bl	8004fac <_sbrk_r>
 8004860:	6030      	str	r0, [r6, #0]
 8004862:	4621      	mov	r1, r4
 8004864:	4628      	mov	r0, r5
 8004866:	f000 fba1 	bl	8004fac <_sbrk_r>
 800486a:	1c43      	adds	r3, r0, #1
 800486c:	d00a      	beq.n	8004884 <sbrk_aligned+0x34>
 800486e:	1cc4      	adds	r4, r0, #3
 8004870:	f024 0403 	bic.w	r4, r4, #3
 8004874:	42a0      	cmp	r0, r4
 8004876:	d007      	beq.n	8004888 <sbrk_aligned+0x38>
 8004878:	1a21      	subs	r1, r4, r0
 800487a:	4628      	mov	r0, r5
 800487c:	f000 fb96 	bl	8004fac <_sbrk_r>
 8004880:	3001      	adds	r0, #1
 8004882:	d101      	bne.n	8004888 <sbrk_aligned+0x38>
 8004884:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004888:	4620      	mov	r0, r4
 800488a:	bd70      	pop	{r4, r5, r6, pc}
 800488c:	20000314 	.word	0x20000314

08004890 <_malloc_r>:
 8004890:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004894:	1ccd      	adds	r5, r1, #3
 8004896:	f025 0503 	bic.w	r5, r5, #3
 800489a:	3508      	adds	r5, #8
 800489c:	2d0c      	cmp	r5, #12
 800489e:	bf38      	it	cc
 80048a0:	250c      	movcc	r5, #12
 80048a2:	2d00      	cmp	r5, #0
 80048a4:	4607      	mov	r7, r0
 80048a6:	db01      	blt.n	80048ac <_malloc_r+0x1c>
 80048a8:	42a9      	cmp	r1, r5
 80048aa:	d905      	bls.n	80048b8 <_malloc_r+0x28>
 80048ac:	230c      	movs	r3, #12
 80048ae:	603b      	str	r3, [r7, #0]
 80048b0:	2600      	movs	r6, #0
 80048b2:	4630      	mov	r0, r6
 80048b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80048b8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800498c <_malloc_r+0xfc>
 80048bc:	f000 f868 	bl	8004990 <__malloc_lock>
 80048c0:	f8d8 3000 	ldr.w	r3, [r8]
 80048c4:	461c      	mov	r4, r3
 80048c6:	bb5c      	cbnz	r4, 8004920 <_malloc_r+0x90>
 80048c8:	4629      	mov	r1, r5
 80048ca:	4638      	mov	r0, r7
 80048cc:	f7ff ffc0 	bl	8004850 <sbrk_aligned>
 80048d0:	1c43      	adds	r3, r0, #1
 80048d2:	4604      	mov	r4, r0
 80048d4:	d155      	bne.n	8004982 <_malloc_r+0xf2>
 80048d6:	f8d8 4000 	ldr.w	r4, [r8]
 80048da:	4626      	mov	r6, r4
 80048dc:	2e00      	cmp	r6, #0
 80048de:	d145      	bne.n	800496c <_malloc_r+0xdc>
 80048e0:	2c00      	cmp	r4, #0
 80048e2:	d048      	beq.n	8004976 <_malloc_r+0xe6>
 80048e4:	6823      	ldr	r3, [r4, #0]
 80048e6:	4631      	mov	r1, r6
 80048e8:	4638      	mov	r0, r7
 80048ea:	eb04 0903 	add.w	r9, r4, r3
 80048ee:	f000 fb5d 	bl	8004fac <_sbrk_r>
 80048f2:	4581      	cmp	r9, r0
 80048f4:	d13f      	bne.n	8004976 <_malloc_r+0xe6>
 80048f6:	6821      	ldr	r1, [r4, #0]
 80048f8:	1a6d      	subs	r5, r5, r1
 80048fa:	4629      	mov	r1, r5
 80048fc:	4638      	mov	r0, r7
 80048fe:	f7ff ffa7 	bl	8004850 <sbrk_aligned>
 8004902:	3001      	adds	r0, #1
 8004904:	d037      	beq.n	8004976 <_malloc_r+0xe6>
 8004906:	6823      	ldr	r3, [r4, #0]
 8004908:	442b      	add	r3, r5
 800490a:	6023      	str	r3, [r4, #0]
 800490c:	f8d8 3000 	ldr.w	r3, [r8]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d038      	beq.n	8004986 <_malloc_r+0xf6>
 8004914:	685a      	ldr	r2, [r3, #4]
 8004916:	42a2      	cmp	r2, r4
 8004918:	d12b      	bne.n	8004972 <_malloc_r+0xe2>
 800491a:	2200      	movs	r2, #0
 800491c:	605a      	str	r2, [r3, #4]
 800491e:	e00f      	b.n	8004940 <_malloc_r+0xb0>
 8004920:	6822      	ldr	r2, [r4, #0]
 8004922:	1b52      	subs	r2, r2, r5
 8004924:	d41f      	bmi.n	8004966 <_malloc_r+0xd6>
 8004926:	2a0b      	cmp	r2, #11
 8004928:	d917      	bls.n	800495a <_malloc_r+0xca>
 800492a:	1961      	adds	r1, r4, r5
 800492c:	42a3      	cmp	r3, r4
 800492e:	6025      	str	r5, [r4, #0]
 8004930:	bf18      	it	ne
 8004932:	6059      	strne	r1, [r3, #4]
 8004934:	6863      	ldr	r3, [r4, #4]
 8004936:	bf08      	it	eq
 8004938:	f8c8 1000 	streq.w	r1, [r8]
 800493c:	5162      	str	r2, [r4, r5]
 800493e:	604b      	str	r3, [r1, #4]
 8004940:	4638      	mov	r0, r7
 8004942:	f104 060b 	add.w	r6, r4, #11
 8004946:	f000 f829 	bl	800499c <__malloc_unlock>
 800494a:	f026 0607 	bic.w	r6, r6, #7
 800494e:	1d23      	adds	r3, r4, #4
 8004950:	1af2      	subs	r2, r6, r3
 8004952:	d0ae      	beq.n	80048b2 <_malloc_r+0x22>
 8004954:	1b9b      	subs	r3, r3, r6
 8004956:	50a3      	str	r3, [r4, r2]
 8004958:	e7ab      	b.n	80048b2 <_malloc_r+0x22>
 800495a:	42a3      	cmp	r3, r4
 800495c:	6862      	ldr	r2, [r4, #4]
 800495e:	d1dd      	bne.n	800491c <_malloc_r+0x8c>
 8004960:	f8c8 2000 	str.w	r2, [r8]
 8004964:	e7ec      	b.n	8004940 <_malloc_r+0xb0>
 8004966:	4623      	mov	r3, r4
 8004968:	6864      	ldr	r4, [r4, #4]
 800496a:	e7ac      	b.n	80048c6 <_malloc_r+0x36>
 800496c:	4634      	mov	r4, r6
 800496e:	6876      	ldr	r6, [r6, #4]
 8004970:	e7b4      	b.n	80048dc <_malloc_r+0x4c>
 8004972:	4613      	mov	r3, r2
 8004974:	e7cc      	b.n	8004910 <_malloc_r+0x80>
 8004976:	230c      	movs	r3, #12
 8004978:	603b      	str	r3, [r7, #0]
 800497a:	4638      	mov	r0, r7
 800497c:	f000 f80e 	bl	800499c <__malloc_unlock>
 8004980:	e797      	b.n	80048b2 <_malloc_r+0x22>
 8004982:	6025      	str	r5, [r4, #0]
 8004984:	e7dc      	b.n	8004940 <_malloc_r+0xb0>
 8004986:	605b      	str	r3, [r3, #4]
 8004988:	deff      	udf	#255	; 0xff
 800498a:	bf00      	nop
 800498c:	20000310 	.word	0x20000310

08004990 <__malloc_lock>:
 8004990:	4801      	ldr	r0, [pc, #4]	; (8004998 <__malloc_lock+0x8>)
 8004992:	f7ff bf0f 	b.w	80047b4 <__retarget_lock_acquire_recursive>
 8004996:	bf00      	nop
 8004998:	2000030c 	.word	0x2000030c

0800499c <__malloc_unlock>:
 800499c:	4801      	ldr	r0, [pc, #4]	; (80049a4 <__malloc_unlock+0x8>)
 800499e:	f7ff bf0a 	b.w	80047b6 <__retarget_lock_release_recursive>
 80049a2:	bf00      	nop
 80049a4:	2000030c 	.word	0x2000030c

080049a8 <__ssputs_r>:
 80049a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80049ac:	688e      	ldr	r6, [r1, #8]
 80049ae:	461f      	mov	r7, r3
 80049b0:	42be      	cmp	r6, r7
 80049b2:	680b      	ldr	r3, [r1, #0]
 80049b4:	4682      	mov	sl, r0
 80049b6:	460c      	mov	r4, r1
 80049b8:	4690      	mov	r8, r2
 80049ba:	d82c      	bhi.n	8004a16 <__ssputs_r+0x6e>
 80049bc:	898a      	ldrh	r2, [r1, #12]
 80049be:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80049c2:	d026      	beq.n	8004a12 <__ssputs_r+0x6a>
 80049c4:	6965      	ldr	r5, [r4, #20]
 80049c6:	6909      	ldr	r1, [r1, #16]
 80049c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80049cc:	eba3 0901 	sub.w	r9, r3, r1
 80049d0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80049d4:	1c7b      	adds	r3, r7, #1
 80049d6:	444b      	add	r3, r9
 80049d8:	106d      	asrs	r5, r5, #1
 80049da:	429d      	cmp	r5, r3
 80049dc:	bf38      	it	cc
 80049de:	461d      	movcc	r5, r3
 80049e0:	0553      	lsls	r3, r2, #21
 80049e2:	d527      	bpl.n	8004a34 <__ssputs_r+0x8c>
 80049e4:	4629      	mov	r1, r5
 80049e6:	f7ff ff53 	bl	8004890 <_malloc_r>
 80049ea:	4606      	mov	r6, r0
 80049ec:	b360      	cbz	r0, 8004a48 <__ssputs_r+0xa0>
 80049ee:	6921      	ldr	r1, [r4, #16]
 80049f0:	464a      	mov	r2, r9
 80049f2:	f000 faeb 	bl	8004fcc <memcpy>
 80049f6:	89a3      	ldrh	r3, [r4, #12]
 80049f8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80049fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a00:	81a3      	strh	r3, [r4, #12]
 8004a02:	6126      	str	r6, [r4, #16]
 8004a04:	6165      	str	r5, [r4, #20]
 8004a06:	444e      	add	r6, r9
 8004a08:	eba5 0509 	sub.w	r5, r5, r9
 8004a0c:	6026      	str	r6, [r4, #0]
 8004a0e:	60a5      	str	r5, [r4, #8]
 8004a10:	463e      	mov	r6, r7
 8004a12:	42be      	cmp	r6, r7
 8004a14:	d900      	bls.n	8004a18 <__ssputs_r+0x70>
 8004a16:	463e      	mov	r6, r7
 8004a18:	6820      	ldr	r0, [r4, #0]
 8004a1a:	4632      	mov	r2, r6
 8004a1c:	4641      	mov	r1, r8
 8004a1e:	f000 faab 	bl	8004f78 <memmove>
 8004a22:	68a3      	ldr	r3, [r4, #8]
 8004a24:	1b9b      	subs	r3, r3, r6
 8004a26:	60a3      	str	r3, [r4, #8]
 8004a28:	6823      	ldr	r3, [r4, #0]
 8004a2a:	4433      	add	r3, r6
 8004a2c:	6023      	str	r3, [r4, #0]
 8004a2e:	2000      	movs	r0, #0
 8004a30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a34:	462a      	mov	r2, r5
 8004a36:	f000 fad7 	bl	8004fe8 <_realloc_r>
 8004a3a:	4606      	mov	r6, r0
 8004a3c:	2800      	cmp	r0, #0
 8004a3e:	d1e0      	bne.n	8004a02 <__ssputs_r+0x5a>
 8004a40:	6921      	ldr	r1, [r4, #16]
 8004a42:	4650      	mov	r0, sl
 8004a44:	f7ff feb8 	bl	80047b8 <_free_r>
 8004a48:	230c      	movs	r3, #12
 8004a4a:	f8ca 3000 	str.w	r3, [sl]
 8004a4e:	89a3      	ldrh	r3, [r4, #12]
 8004a50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a54:	81a3      	strh	r3, [r4, #12]
 8004a56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004a5a:	e7e9      	b.n	8004a30 <__ssputs_r+0x88>

08004a5c <_svfiprintf_r>:
 8004a5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a60:	4698      	mov	r8, r3
 8004a62:	898b      	ldrh	r3, [r1, #12]
 8004a64:	061b      	lsls	r3, r3, #24
 8004a66:	b09d      	sub	sp, #116	; 0x74
 8004a68:	4607      	mov	r7, r0
 8004a6a:	460d      	mov	r5, r1
 8004a6c:	4614      	mov	r4, r2
 8004a6e:	d50e      	bpl.n	8004a8e <_svfiprintf_r+0x32>
 8004a70:	690b      	ldr	r3, [r1, #16]
 8004a72:	b963      	cbnz	r3, 8004a8e <_svfiprintf_r+0x32>
 8004a74:	2140      	movs	r1, #64	; 0x40
 8004a76:	f7ff ff0b 	bl	8004890 <_malloc_r>
 8004a7a:	6028      	str	r0, [r5, #0]
 8004a7c:	6128      	str	r0, [r5, #16]
 8004a7e:	b920      	cbnz	r0, 8004a8a <_svfiprintf_r+0x2e>
 8004a80:	230c      	movs	r3, #12
 8004a82:	603b      	str	r3, [r7, #0]
 8004a84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004a88:	e0d0      	b.n	8004c2c <_svfiprintf_r+0x1d0>
 8004a8a:	2340      	movs	r3, #64	; 0x40
 8004a8c:	616b      	str	r3, [r5, #20]
 8004a8e:	2300      	movs	r3, #0
 8004a90:	9309      	str	r3, [sp, #36]	; 0x24
 8004a92:	2320      	movs	r3, #32
 8004a94:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004a98:	f8cd 800c 	str.w	r8, [sp, #12]
 8004a9c:	2330      	movs	r3, #48	; 0x30
 8004a9e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004c44 <_svfiprintf_r+0x1e8>
 8004aa2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004aa6:	f04f 0901 	mov.w	r9, #1
 8004aaa:	4623      	mov	r3, r4
 8004aac:	469a      	mov	sl, r3
 8004aae:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004ab2:	b10a      	cbz	r2, 8004ab8 <_svfiprintf_r+0x5c>
 8004ab4:	2a25      	cmp	r2, #37	; 0x25
 8004ab6:	d1f9      	bne.n	8004aac <_svfiprintf_r+0x50>
 8004ab8:	ebba 0b04 	subs.w	fp, sl, r4
 8004abc:	d00b      	beq.n	8004ad6 <_svfiprintf_r+0x7a>
 8004abe:	465b      	mov	r3, fp
 8004ac0:	4622      	mov	r2, r4
 8004ac2:	4629      	mov	r1, r5
 8004ac4:	4638      	mov	r0, r7
 8004ac6:	f7ff ff6f 	bl	80049a8 <__ssputs_r>
 8004aca:	3001      	adds	r0, #1
 8004acc:	f000 80a9 	beq.w	8004c22 <_svfiprintf_r+0x1c6>
 8004ad0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004ad2:	445a      	add	r2, fp
 8004ad4:	9209      	str	r2, [sp, #36]	; 0x24
 8004ad6:	f89a 3000 	ldrb.w	r3, [sl]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	f000 80a1 	beq.w	8004c22 <_svfiprintf_r+0x1c6>
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004ae6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004aea:	f10a 0a01 	add.w	sl, sl, #1
 8004aee:	9304      	str	r3, [sp, #16]
 8004af0:	9307      	str	r3, [sp, #28]
 8004af2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004af6:	931a      	str	r3, [sp, #104]	; 0x68
 8004af8:	4654      	mov	r4, sl
 8004afa:	2205      	movs	r2, #5
 8004afc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b00:	4850      	ldr	r0, [pc, #320]	; (8004c44 <_svfiprintf_r+0x1e8>)
 8004b02:	f7fb fb75 	bl	80001f0 <memchr>
 8004b06:	9a04      	ldr	r2, [sp, #16]
 8004b08:	b9d8      	cbnz	r0, 8004b42 <_svfiprintf_r+0xe6>
 8004b0a:	06d0      	lsls	r0, r2, #27
 8004b0c:	bf44      	itt	mi
 8004b0e:	2320      	movmi	r3, #32
 8004b10:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004b14:	0711      	lsls	r1, r2, #28
 8004b16:	bf44      	itt	mi
 8004b18:	232b      	movmi	r3, #43	; 0x2b
 8004b1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004b1e:	f89a 3000 	ldrb.w	r3, [sl]
 8004b22:	2b2a      	cmp	r3, #42	; 0x2a
 8004b24:	d015      	beq.n	8004b52 <_svfiprintf_r+0xf6>
 8004b26:	9a07      	ldr	r2, [sp, #28]
 8004b28:	4654      	mov	r4, sl
 8004b2a:	2000      	movs	r0, #0
 8004b2c:	f04f 0c0a 	mov.w	ip, #10
 8004b30:	4621      	mov	r1, r4
 8004b32:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004b36:	3b30      	subs	r3, #48	; 0x30
 8004b38:	2b09      	cmp	r3, #9
 8004b3a:	d94d      	bls.n	8004bd8 <_svfiprintf_r+0x17c>
 8004b3c:	b1b0      	cbz	r0, 8004b6c <_svfiprintf_r+0x110>
 8004b3e:	9207      	str	r2, [sp, #28]
 8004b40:	e014      	b.n	8004b6c <_svfiprintf_r+0x110>
 8004b42:	eba0 0308 	sub.w	r3, r0, r8
 8004b46:	fa09 f303 	lsl.w	r3, r9, r3
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	9304      	str	r3, [sp, #16]
 8004b4e:	46a2      	mov	sl, r4
 8004b50:	e7d2      	b.n	8004af8 <_svfiprintf_r+0x9c>
 8004b52:	9b03      	ldr	r3, [sp, #12]
 8004b54:	1d19      	adds	r1, r3, #4
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	9103      	str	r1, [sp, #12]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	bfbb      	ittet	lt
 8004b5e:	425b      	neglt	r3, r3
 8004b60:	f042 0202 	orrlt.w	r2, r2, #2
 8004b64:	9307      	strge	r3, [sp, #28]
 8004b66:	9307      	strlt	r3, [sp, #28]
 8004b68:	bfb8      	it	lt
 8004b6a:	9204      	strlt	r2, [sp, #16]
 8004b6c:	7823      	ldrb	r3, [r4, #0]
 8004b6e:	2b2e      	cmp	r3, #46	; 0x2e
 8004b70:	d10c      	bne.n	8004b8c <_svfiprintf_r+0x130>
 8004b72:	7863      	ldrb	r3, [r4, #1]
 8004b74:	2b2a      	cmp	r3, #42	; 0x2a
 8004b76:	d134      	bne.n	8004be2 <_svfiprintf_r+0x186>
 8004b78:	9b03      	ldr	r3, [sp, #12]
 8004b7a:	1d1a      	adds	r2, r3, #4
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	9203      	str	r2, [sp, #12]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	bfb8      	it	lt
 8004b84:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004b88:	3402      	adds	r4, #2
 8004b8a:	9305      	str	r3, [sp, #20]
 8004b8c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8004c54 <_svfiprintf_r+0x1f8>
 8004b90:	7821      	ldrb	r1, [r4, #0]
 8004b92:	2203      	movs	r2, #3
 8004b94:	4650      	mov	r0, sl
 8004b96:	f7fb fb2b 	bl	80001f0 <memchr>
 8004b9a:	b138      	cbz	r0, 8004bac <_svfiprintf_r+0x150>
 8004b9c:	9b04      	ldr	r3, [sp, #16]
 8004b9e:	eba0 000a 	sub.w	r0, r0, sl
 8004ba2:	2240      	movs	r2, #64	; 0x40
 8004ba4:	4082      	lsls	r2, r0
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	3401      	adds	r4, #1
 8004baa:	9304      	str	r3, [sp, #16]
 8004bac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004bb0:	4825      	ldr	r0, [pc, #148]	; (8004c48 <_svfiprintf_r+0x1ec>)
 8004bb2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004bb6:	2206      	movs	r2, #6
 8004bb8:	f7fb fb1a 	bl	80001f0 <memchr>
 8004bbc:	2800      	cmp	r0, #0
 8004bbe:	d038      	beq.n	8004c32 <_svfiprintf_r+0x1d6>
 8004bc0:	4b22      	ldr	r3, [pc, #136]	; (8004c4c <_svfiprintf_r+0x1f0>)
 8004bc2:	bb1b      	cbnz	r3, 8004c0c <_svfiprintf_r+0x1b0>
 8004bc4:	9b03      	ldr	r3, [sp, #12]
 8004bc6:	3307      	adds	r3, #7
 8004bc8:	f023 0307 	bic.w	r3, r3, #7
 8004bcc:	3308      	adds	r3, #8
 8004bce:	9303      	str	r3, [sp, #12]
 8004bd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004bd2:	4433      	add	r3, r6
 8004bd4:	9309      	str	r3, [sp, #36]	; 0x24
 8004bd6:	e768      	b.n	8004aaa <_svfiprintf_r+0x4e>
 8004bd8:	fb0c 3202 	mla	r2, ip, r2, r3
 8004bdc:	460c      	mov	r4, r1
 8004bde:	2001      	movs	r0, #1
 8004be0:	e7a6      	b.n	8004b30 <_svfiprintf_r+0xd4>
 8004be2:	2300      	movs	r3, #0
 8004be4:	3401      	adds	r4, #1
 8004be6:	9305      	str	r3, [sp, #20]
 8004be8:	4619      	mov	r1, r3
 8004bea:	f04f 0c0a 	mov.w	ip, #10
 8004bee:	4620      	mov	r0, r4
 8004bf0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004bf4:	3a30      	subs	r2, #48	; 0x30
 8004bf6:	2a09      	cmp	r2, #9
 8004bf8:	d903      	bls.n	8004c02 <_svfiprintf_r+0x1a6>
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d0c6      	beq.n	8004b8c <_svfiprintf_r+0x130>
 8004bfe:	9105      	str	r1, [sp, #20]
 8004c00:	e7c4      	b.n	8004b8c <_svfiprintf_r+0x130>
 8004c02:	fb0c 2101 	mla	r1, ip, r1, r2
 8004c06:	4604      	mov	r4, r0
 8004c08:	2301      	movs	r3, #1
 8004c0a:	e7f0      	b.n	8004bee <_svfiprintf_r+0x192>
 8004c0c:	ab03      	add	r3, sp, #12
 8004c0e:	9300      	str	r3, [sp, #0]
 8004c10:	462a      	mov	r2, r5
 8004c12:	4b0f      	ldr	r3, [pc, #60]	; (8004c50 <_svfiprintf_r+0x1f4>)
 8004c14:	a904      	add	r1, sp, #16
 8004c16:	4638      	mov	r0, r7
 8004c18:	f3af 8000 	nop.w
 8004c1c:	1c42      	adds	r2, r0, #1
 8004c1e:	4606      	mov	r6, r0
 8004c20:	d1d6      	bne.n	8004bd0 <_svfiprintf_r+0x174>
 8004c22:	89ab      	ldrh	r3, [r5, #12]
 8004c24:	065b      	lsls	r3, r3, #25
 8004c26:	f53f af2d 	bmi.w	8004a84 <_svfiprintf_r+0x28>
 8004c2a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004c2c:	b01d      	add	sp, #116	; 0x74
 8004c2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c32:	ab03      	add	r3, sp, #12
 8004c34:	9300      	str	r3, [sp, #0]
 8004c36:	462a      	mov	r2, r5
 8004c38:	4b05      	ldr	r3, [pc, #20]	; (8004c50 <_svfiprintf_r+0x1f4>)
 8004c3a:	a904      	add	r1, sp, #16
 8004c3c:	4638      	mov	r0, r7
 8004c3e:	f000 f879 	bl	8004d34 <_printf_i>
 8004c42:	e7eb      	b.n	8004c1c <_svfiprintf_r+0x1c0>
 8004c44:	080052f0 	.word	0x080052f0
 8004c48:	080052fa 	.word	0x080052fa
 8004c4c:	00000000 	.word	0x00000000
 8004c50:	080049a9 	.word	0x080049a9
 8004c54:	080052f6 	.word	0x080052f6

08004c58 <_printf_common>:
 8004c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c5c:	4616      	mov	r6, r2
 8004c5e:	4699      	mov	r9, r3
 8004c60:	688a      	ldr	r2, [r1, #8]
 8004c62:	690b      	ldr	r3, [r1, #16]
 8004c64:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	bfb8      	it	lt
 8004c6c:	4613      	movlt	r3, r2
 8004c6e:	6033      	str	r3, [r6, #0]
 8004c70:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004c74:	4607      	mov	r7, r0
 8004c76:	460c      	mov	r4, r1
 8004c78:	b10a      	cbz	r2, 8004c7e <_printf_common+0x26>
 8004c7a:	3301      	adds	r3, #1
 8004c7c:	6033      	str	r3, [r6, #0]
 8004c7e:	6823      	ldr	r3, [r4, #0]
 8004c80:	0699      	lsls	r1, r3, #26
 8004c82:	bf42      	ittt	mi
 8004c84:	6833      	ldrmi	r3, [r6, #0]
 8004c86:	3302      	addmi	r3, #2
 8004c88:	6033      	strmi	r3, [r6, #0]
 8004c8a:	6825      	ldr	r5, [r4, #0]
 8004c8c:	f015 0506 	ands.w	r5, r5, #6
 8004c90:	d106      	bne.n	8004ca0 <_printf_common+0x48>
 8004c92:	f104 0a19 	add.w	sl, r4, #25
 8004c96:	68e3      	ldr	r3, [r4, #12]
 8004c98:	6832      	ldr	r2, [r6, #0]
 8004c9a:	1a9b      	subs	r3, r3, r2
 8004c9c:	42ab      	cmp	r3, r5
 8004c9e:	dc26      	bgt.n	8004cee <_printf_common+0x96>
 8004ca0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004ca4:	1e13      	subs	r3, r2, #0
 8004ca6:	6822      	ldr	r2, [r4, #0]
 8004ca8:	bf18      	it	ne
 8004caa:	2301      	movne	r3, #1
 8004cac:	0692      	lsls	r2, r2, #26
 8004cae:	d42b      	bmi.n	8004d08 <_printf_common+0xb0>
 8004cb0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004cb4:	4649      	mov	r1, r9
 8004cb6:	4638      	mov	r0, r7
 8004cb8:	47c0      	blx	r8
 8004cba:	3001      	adds	r0, #1
 8004cbc:	d01e      	beq.n	8004cfc <_printf_common+0xa4>
 8004cbe:	6823      	ldr	r3, [r4, #0]
 8004cc0:	6922      	ldr	r2, [r4, #16]
 8004cc2:	f003 0306 	and.w	r3, r3, #6
 8004cc6:	2b04      	cmp	r3, #4
 8004cc8:	bf02      	ittt	eq
 8004cca:	68e5      	ldreq	r5, [r4, #12]
 8004ccc:	6833      	ldreq	r3, [r6, #0]
 8004cce:	1aed      	subeq	r5, r5, r3
 8004cd0:	68a3      	ldr	r3, [r4, #8]
 8004cd2:	bf0c      	ite	eq
 8004cd4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004cd8:	2500      	movne	r5, #0
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	bfc4      	itt	gt
 8004cde:	1a9b      	subgt	r3, r3, r2
 8004ce0:	18ed      	addgt	r5, r5, r3
 8004ce2:	2600      	movs	r6, #0
 8004ce4:	341a      	adds	r4, #26
 8004ce6:	42b5      	cmp	r5, r6
 8004ce8:	d11a      	bne.n	8004d20 <_printf_common+0xc8>
 8004cea:	2000      	movs	r0, #0
 8004cec:	e008      	b.n	8004d00 <_printf_common+0xa8>
 8004cee:	2301      	movs	r3, #1
 8004cf0:	4652      	mov	r2, sl
 8004cf2:	4649      	mov	r1, r9
 8004cf4:	4638      	mov	r0, r7
 8004cf6:	47c0      	blx	r8
 8004cf8:	3001      	adds	r0, #1
 8004cfa:	d103      	bne.n	8004d04 <_printf_common+0xac>
 8004cfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004d00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d04:	3501      	adds	r5, #1
 8004d06:	e7c6      	b.n	8004c96 <_printf_common+0x3e>
 8004d08:	18e1      	adds	r1, r4, r3
 8004d0a:	1c5a      	adds	r2, r3, #1
 8004d0c:	2030      	movs	r0, #48	; 0x30
 8004d0e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004d12:	4422      	add	r2, r4
 8004d14:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004d18:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004d1c:	3302      	adds	r3, #2
 8004d1e:	e7c7      	b.n	8004cb0 <_printf_common+0x58>
 8004d20:	2301      	movs	r3, #1
 8004d22:	4622      	mov	r2, r4
 8004d24:	4649      	mov	r1, r9
 8004d26:	4638      	mov	r0, r7
 8004d28:	47c0      	blx	r8
 8004d2a:	3001      	adds	r0, #1
 8004d2c:	d0e6      	beq.n	8004cfc <_printf_common+0xa4>
 8004d2e:	3601      	adds	r6, #1
 8004d30:	e7d9      	b.n	8004ce6 <_printf_common+0x8e>
	...

08004d34 <_printf_i>:
 8004d34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d38:	7e0f      	ldrb	r7, [r1, #24]
 8004d3a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004d3c:	2f78      	cmp	r7, #120	; 0x78
 8004d3e:	4691      	mov	r9, r2
 8004d40:	4680      	mov	r8, r0
 8004d42:	460c      	mov	r4, r1
 8004d44:	469a      	mov	sl, r3
 8004d46:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004d4a:	d807      	bhi.n	8004d5c <_printf_i+0x28>
 8004d4c:	2f62      	cmp	r7, #98	; 0x62
 8004d4e:	d80a      	bhi.n	8004d66 <_printf_i+0x32>
 8004d50:	2f00      	cmp	r7, #0
 8004d52:	f000 80d4 	beq.w	8004efe <_printf_i+0x1ca>
 8004d56:	2f58      	cmp	r7, #88	; 0x58
 8004d58:	f000 80c0 	beq.w	8004edc <_printf_i+0x1a8>
 8004d5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d60:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004d64:	e03a      	b.n	8004ddc <_printf_i+0xa8>
 8004d66:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004d6a:	2b15      	cmp	r3, #21
 8004d6c:	d8f6      	bhi.n	8004d5c <_printf_i+0x28>
 8004d6e:	a101      	add	r1, pc, #4	; (adr r1, 8004d74 <_printf_i+0x40>)
 8004d70:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004d74:	08004dcd 	.word	0x08004dcd
 8004d78:	08004de1 	.word	0x08004de1
 8004d7c:	08004d5d 	.word	0x08004d5d
 8004d80:	08004d5d 	.word	0x08004d5d
 8004d84:	08004d5d 	.word	0x08004d5d
 8004d88:	08004d5d 	.word	0x08004d5d
 8004d8c:	08004de1 	.word	0x08004de1
 8004d90:	08004d5d 	.word	0x08004d5d
 8004d94:	08004d5d 	.word	0x08004d5d
 8004d98:	08004d5d 	.word	0x08004d5d
 8004d9c:	08004d5d 	.word	0x08004d5d
 8004da0:	08004ee5 	.word	0x08004ee5
 8004da4:	08004e0d 	.word	0x08004e0d
 8004da8:	08004e9f 	.word	0x08004e9f
 8004dac:	08004d5d 	.word	0x08004d5d
 8004db0:	08004d5d 	.word	0x08004d5d
 8004db4:	08004f07 	.word	0x08004f07
 8004db8:	08004d5d 	.word	0x08004d5d
 8004dbc:	08004e0d 	.word	0x08004e0d
 8004dc0:	08004d5d 	.word	0x08004d5d
 8004dc4:	08004d5d 	.word	0x08004d5d
 8004dc8:	08004ea7 	.word	0x08004ea7
 8004dcc:	682b      	ldr	r3, [r5, #0]
 8004dce:	1d1a      	adds	r2, r3, #4
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	602a      	str	r2, [r5, #0]
 8004dd4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004dd8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004ddc:	2301      	movs	r3, #1
 8004dde:	e09f      	b.n	8004f20 <_printf_i+0x1ec>
 8004de0:	6820      	ldr	r0, [r4, #0]
 8004de2:	682b      	ldr	r3, [r5, #0]
 8004de4:	0607      	lsls	r7, r0, #24
 8004de6:	f103 0104 	add.w	r1, r3, #4
 8004dea:	6029      	str	r1, [r5, #0]
 8004dec:	d501      	bpl.n	8004df2 <_printf_i+0xbe>
 8004dee:	681e      	ldr	r6, [r3, #0]
 8004df0:	e003      	b.n	8004dfa <_printf_i+0xc6>
 8004df2:	0646      	lsls	r6, r0, #25
 8004df4:	d5fb      	bpl.n	8004dee <_printf_i+0xba>
 8004df6:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004dfa:	2e00      	cmp	r6, #0
 8004dfc:	da03      	bge.n	8004e06 <_printf_i+0xd2>
 8004dfe:	232d      	movs	r3, #45	; 0x2d
 8004e00:	4276      	negs	r6, r6
 8004e02:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e06:	485a      	ldr	r0, [pc, #360]	; (8004f70 <_printf_i+0x23c>)
 8004e08:	230a      	movs	r3, #10
 8004e0a:	e012      	b.n	8004e32 <_printf_i+0xfe>
 8004e0c:	682b      	ldr	r3, [r5, #0]
 8004e0e:	6820      	ldr	r0, [r4, #0]
 8004e10:	1d19      	adds	r1, r3, #4
 8004e12:	6029      	str	r1, [r5, #0]
 8004e14:	0605      	lsls	r5, r0, #24
 8004e16:	d501      	bpl.n	8004e1c <_printf_i+0xe8>
 8004e18:	681e      	ldr	r6, [r3, #0]
 8004e1a:	e002      	b.n	8004e22 <_printf_i+0xee>
 8004e1c:	0641      	lsls	r1, r0, #25
 8004e1e:	d5fb      	bpl.n	8004e18 <_printf_i+0xe4>
 8004e20:	881e      	ldrh	r6, [r3, #0]
 8004e22:	4853      	ldr	r0, [pc, #332]	; (8004f70 <_printf_i+0x23c>)
 8004e24:	2f6f      	cmp	r7, #111	; 0x6f
 8004e26:	bf0c      	ite	eq
 8004e28:	2308      	moveq	r3, #8
 8004e2a:	230a      	movne	r3, #10
 8004e2c:	2100      	movs	r1, #0
 8004e2e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004e32:	6865      	ldr	r5, [r4, #4]
 8004e34:	60a5      	str	r5, [r4, #8]
 8004e36:	2d00      	cmp	r5, #0
 8004e38:	bfa2      	ittt	ge
 8004e3a:	6821      	ldrge	r1, [r4, #0]
 8004e3c:	f021 0104 	bicge.w	r1, r1, #4
 8004e40:	6021      	strge	r1, [r4, #0]
 8004e42:	b90e      	cbnz	r6, 8004e48 <_printf_i+0x114>
 8004e44:	2d00      	cmp	r5, #0
 8004e46:	d04b      	beq.n	8004ee0 <_printf_i+0x1ac>
 8004e48:	4615      	mov	r5, r2
 8004e4a:	fbb6 f1f3 	udiv	r1, r6, r3
 8004e4e:	fb03 6711 	mls	r7, r3, r1, r6
 8004e52:	5dc7      	ldrb	r7, [r0, r7]
 8004e54:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004e58:	4637      	mov	r7, r6
 8004e5a:	42bb      	cmp	r3, r7
 8004e5c:	460e      	mov	r6, r1
 8004e5e:	d9f4      	bls.n	8004e4a <_printf_i+0x116>
 8004e60:	2b08      	cmp	r3, #8
 8004e62:	d10b      	bne.n	8004e7c <_printf_i+0x148>
 8004e64:	6823      	ldr	r3, [r4, #0]
 8004e66:	07de      	lsls	r6, r3, #31
 8004e68:	d508      	bpl.n	8004e7c <_printf_i+0x148>
 8004e6a:	6923      	ldr	r3, [r4, #16]
 8004e6c:	6861      	ldr	r1, [r4, #4]
 8004e6e:	4299      	cmp	r1, r3
 8004e70:	bfde      	ittt	le
 8004e72:	2330      	movle	r3, #48	; 0x30
 8004e74:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004e78:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004e7c:	1b52      	subs	r2, r2, r5
 8004e7e:	6122      	str	r2, [r4, #16]
 8004e80:	f8cd a000 	str.w	sl, [sp]
 8004e84:	464b      	mov	r3, r9
 8004e86:	aa03      	add	r2, sp, #12
 8004e88:	4621      	mov	r1, r4
 8004e8a:	4640      	mov	r0, r8
 8004e8c:	f7ff fee4 	bl	8004c58 <_printf_common>
 8004e90:	3001      	adds	r0, #1
 8004e92:	d14a      	bne.n	8004f2a <_printf_i+0x1f6>
 8004e94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004e98:	b004      	add	sp, #16
 8004e9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e9e:	6823      	ldr	r3, [r4, #0]
 8004ea0:	f043 0320 	orr.w	r3, r3, #32
 8004ea4:	6023      	str	r3, [r4, #0]
 8004ea6:	4833      	ldr	r0, [pc, #204]	; (8004f74 <_printf_i+0x240>)
 8004ea8:	2778      	movs	r7, #120	; 0x78
 8004eaa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004eae:	6823      	ldr	r3, [r4, #0]
 8004eb0:	6829      	ldr	r1, [r5, #0]
 8004eb2:	061f      	lsls	r7, r3, #24
 8004eb4:	f851 6b04 	ldr.w	r6, [r1], #4
 8004eb8:	d402      	bmi.n	8004ec0 <_printf_i+0x18c>
 8004eba:	065f      	lsls	r7, r3, #25
 8004ebc:	bf48      	it	mi
 8004ebe:	b2b6      	uxthmi	r6, r6
 8004ec0:	07df      	lsls	r7, r3, #31
 8004ec2:	bf48      	it	mi
 8004ec4:	f043 0320 	orrmi.w	r3, r3, #32
 8004ec8:	6029      	str	r1, [r5, #0]
 8004eca:	bf48      	it	mi
 8004ecc:	6023      	strmi	r3, [r4, #0]
 8004ece:	b91e      	cbnz	r6, 8004ed8 <_printf_i+0x1a4>
 8004ed0:	6823      	ldr	r3, [r4, #0]
 8004ed2:	f023 0320 	bic.w	r3, r3, #32
 8004ed6:	6023      	str	r3, [r4, #0]
 8004ed8:	2310      	movs	r3, #16
 8004eda:	e7a7      	b.n	8004e2c <_printf_i+0xf8>
 8004edc:	4824      	ldr	r0, [pc, #144]	; (8004f70 <_printf_i+0x23c>)
 8004ede:	e7e4      	b.n	8004eaa <_printf_i+0x176>
 8004ee0:	4615      	mov	r5, r2
 8004ee2:	e7bd      	b.n	8004e60 <_printf_i+0x12c>
 8004ee4:	682b      	ldr	r3, [r5, #0]
 8004ee6:	6826      	ldr	r6, [r4, #0]
 8004ee8:	6961      	ldr	r1, [r4, #20]
 8004eea:	1d18      	adds	r0, r3, #4
 8004eec:	6028      	str	r0, [r5, #0]
 8004eee:	0635      	lsls	r5, r6, #24
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	d501      	bpl.n	8004ef8 <_printf_i+0x1c4>
 8004ef4:	6019      	str	r1, [r3, #0]
 8004ef6:	e002      	b.n	8004efe <_printf_i+0x1ca>
 8004ef8:	0670      	lsls	r0, r6, #25
 8004efa:	d5fb      	bpl.n	8004ef4 <_printf_i+0x1c0>
 8004efc:	8019      	strh	r1, [r3, #0]
 8004efe:	2300      	movs	r3, #0
 8004f00:	6123      	str	r3, [r4, #16]
 8004f02:	4615      	mov	r5, r2
 8004f04:	e7bc      	b.n	8004e80 <_printf_i+0x14c>
 8004f06:	682b      	ldr	r3, [r5, #0]
 8004f08:	1d1a      	adds	r2, r3, #4
 8004f0a:	602a      	str	r2, [r5, #0]
 8004f0c:	681d      	ldr	r5, [r3, #0]
 8004f0e:	6862      	ldr	r2, [r4, #4]
 8004f10:	2100      	movs	r1, #0
 8004f12:	4628      	mov	r0, r5
 8004f14:	f7fb f96c 	bl	80001f0 <memchr>
 8004f18:	b108      	cbz	r0, 8004f1e <_printf_i+0x1ea>
 8004f1a:	1b40      	subs	r0, r0, r5
 8004f1c:	6060      	str	r0, [r4, #4]
 8004f1e:	6863      	ldr	r3, [r4, #4]
 8004f20:	6123      	str	r3, [r4, #16]
 8004f22:	2300      	movs	r3, #0
 8004f24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f28:	e7aa      	b.n	8004e80 <_printf_i+0x14c>
 8004f2a:	6923      	ldr	r3, [r4, #16]
 8004f2c:	462a      	mov	r2, r5
 8004f2e:	4649      	mov	r1, r9
 8004f30:	4640      	mov	r0, r8
 8004f32:	47d0      	blx	sl
 8004f34:	3001      	adds	r0, #1
 8004f36:	d0ad      	beq.n	8004e94 <_printf_i+0x160>
 8004f38:	6823      	ldr	r3, [r4, #0]
 8004f3a:	079b      	lsls	r3, r3, #30
 8004f3c:	d413      	bmi.n	8004f66 <_printf_i+0x232>
 8004f3e:	68e0      	ldr	r0, [r4, #12]
 8004f40:	9b03      	ldr	r3, [sp, #12]
 8004f42:	4298      	cmp	r0, r3
 8004f44:	bfb8      	it	lt
 8004f46:	4618      	movlt	r0, r3
 8004f48:	e7a6      	b.n	8004e98 <_printf_i+0x164>
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	4632      	mov	r2, r6
 8004f4e:	4649      	mov	r1, r9
 8004f50:	4640      	mov	r0, r8
 8004f52:	47d0      	blx	sl
 8004f54:	3001      	adds	r0, #1
 8004f56:	d09d      	beq.n	8004e94 <_printf_i+0x160>
 8004f58:	3501      	adds	r5, #1
 8004f5a:	68e3      	ldr	r3, [r4, #12]
 8004f5c:	9903      	ldr	r1, [sp, #12]
 8004f5e:	1a5b      	subs	r3, r3, r1
 8004f60:	42ab      	cmp	r3, r5
 8004f62:	dcf2      	bgt.n	8004f4a <_printf_i+0x216>
 8004f64:	e7eb      	b.n	8004f3e <_printf_i+0x20a>
 8004f66:	2500      	movs	r5, #0
 8004f68:	f104 0619 	add.w	r6, r4, #25
 8004f6c:	e7f5      	b.n	8004f5a <_printf_i+0x226>
 8004f6e:	bf00      	nop
 8004f70:	08005301 	.word	0x08005301
 8004f74:	08005312 	.word	0x08005312

08004f78 <memmove>:
 8004f78:	4288      	cmp	r0, r1
 8004f7a:	b510      	push	{r4, lr}
 8004f7c:	eb01 0402 	add.w	r4, r1, r2
 8004f80:	d902      	bls.n	8004f88 <memmove+0x10>
 8004f82:	4284      	cmp	r4, r0
 8004f84:	4623      	mov	r3, r4
 8004f86:	d807      	bhi.n	8004f98 <memmove+0x20>
 8004f88:	1e43      	subs	r3, r0, #1
 8004f8a:	42a1      	cmp	r1, r4
 8004f8c:	d008      	beq.n	8004fa0 <memmove+0x28>
 8004f8e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004f92:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004f96:	e7f8      	b.n	8004f8a <memmove+0x12>
 8004f98:	4402      	add	r2, r0
 8004f9a:	4601      	mov	r1, r0
 8004f9c:	428a      	cmp	r2, r1
 8004f9e:	d100      	bne.n	8004fa2 <memmove+0x2a>
 8004fa0:	bd10      	pop	{r4, pc}
 8004fa2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004fa6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004faa:	e7f7      	b.n	8004f9c <memmove+0x24>

08004fac <_sbrk_r>:
 8004fac:	b538      	push	{r3, r4, r5, lr}
 8004fae:	4d06      	ldr	r5, [pc, #24]	; (8004fc8 <_sbrk_r+0x1c>)
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	4604      	mov	r4, r0
 8004fb4:	4608      	mov	r0, r1
 8004fb6:	602b      	str	r3, [r5, #0]
 8004fb8:	f7fc fdfa 	bl	8001bb0 <_sbrk>
 8004fbc:	1c43      	adds	r3, r0, #1
 8004fbe:	d102      	bne.n	8004fc6 <_sbrk_r+0x1a>
 8004fc0:	682b      	ldr	r3, [r5, #0]
 8004fc2:	b103      	cbz	r3, 8004fc6 <_sbrk_r+0x1a>
 8004fc4:	6023      	str	r3, [r4, #0]
 8004fc6:	bd38      	pop	{r3, r4, r5, pc}
 8004fc8:	20000308 	.word	0x20000308

08004fcc <memcpy>:
 8004fcc:	440a      	add	r2, r1
 8004fce:	4291      	cmp	r1, r2
 8004fd0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004fd4:	d100      	bne.n	8004fd8 <memcpy+0xc>
 8004fd6:	4770      	bx	lr
 8004fd8:	b510      	push	{r4, lr}
 8004fda:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004fde:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004fe2:	4291      	cmp	r1, r2
 8004fe4:	d1f9      	bne.n	8004fda <memcpy+0xe>
 8004fe6:	bd10      	pop	{r4, pc}

08004fe8 <_realloc_r>:
 8004fe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004fec:	4680      	mov	r8, r0
 8004fee:	4614      	mov	r4, r2
 8004ff0:	460e      	mov	r6, r1
 8004ff2:	b921      	cbnz	r1, 8004ffe <_realloc_r+0x16>
 8004ff4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004ff8:	4611      	mov	r1, r2
 8004ffa:	f7ff bc49 	b.w	8004890 <_malloc_r>
 8004ffe:	b92a      	cbnz	r2, 800500c <_realloc_r+0x24>
 8005000:	f7ff fbda 	bl	80047b8 <_free_r>
 8005004:	4625      	mov	r5, r4
 8005006:	4628      	mov	r0, r5
 8005008:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800500c:	f000 f81b 	bl	8005046 <_malloc_usable_size_r>
 8005010:	4284      	cmp	r4, r0
 8005012:	4607      	mov	r7, r0
 8005014:	d802      	bhi.n	800501c <_realloc_r+0x34>
 8005016:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800501a:	d812      	bhi.n	8005042 <_realloc_r+0x5a>
 800501c:	4621      	mov	r1, r4
 800501e:	4640      	mov	r0, r8
 8005020:	f7ff fc36 	bl	8004890 <_malloc_r>
 8005024:	4605      	mov	r5, r0
 8005026:	2800      	cmp	r0, #0
 8005028:	d0ed      	beq.n	8005006 <_realloc_r+0x1e>
 800502a:	42bc      	cmp	r4, r7
 800502c:	4622      	mov	r2, r4
 800502e:	4631      	mov	r1, r6
 8005030:	bf28      	it	cs
 8005032:	463a      	movcs	r2, r7
 8005034:	f7ff ffca 	bl	8004fcc <memcpy>
 8005038:	4631      	mov	r1, r6
 800503a:	4640      	mov	r0, r8
 800503c:	f7ff fbbc 	bl	80047b8 <_free_r>
 8005040:	e7e1      	b.n	8005006 <_realloc_r+0x1e>
 8005042:	4635      	mov	r5, r6
 8005044:	e7df      	b.n	8005006 <_realloc_r+0x1e>

08005046 <_malloc_usable_size_r>:
 8005046:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800504a:	1f18      	subs	r0, r3, #4
 800504c:	2b00      	cmp	r3, #0
 800504e:	bfbc      	itt	lt
 8005050:	580b      	ldrlt	r3, [r1, r0]
 8005052:	18c0      	addlt	r0, r0, r3
 8005054:	4770      	bx	lr
	...

08005058 <_init>:
 8005058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800505a:	bf00      	nop
 800505c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800505e:	bc08      	pop	{r3}
 8005060:	469e      	mov	lr, r3
 8005062:	4770      	bx	lr

08005064 <_fini>:
 8005064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005066:	bf00      	nop
 8005068:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800506a:	bc08      	pop	{r3}
 800506c:	469e      	mov	lr, r3
 800506e:	4770      	bx	lr
